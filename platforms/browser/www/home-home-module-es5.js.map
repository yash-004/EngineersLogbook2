{"version":3,"sources":["src/app/home/home.page.html","src/app/home/home.module.ts","src/app/home/home.page.scss","src/app/home/home.page.ts","src/app/services/anime.js","src/app/services/messaging.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-content padding id='login-content'>\\n\\n  <form class=\\\"form\\\" [formGroup]=\\\"validationsForm\\\"  (ngSubmit)=\\\"loginUser(validationsForm.value)\\\">\\n    <ion-item class=\\\"textfield\\\" no-padding id='email'>\\n      <ion-label class=\\\"textfield\\\" position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"email\\\" formControlName=\\\"email\\\" name=\\\"email\\\"></ion-input>\\n    </ion-item>\\n\\n    <!--div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('email').hasError(validation.type) && (validationsForm.get('email').dirty || validationsForm.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div-->\\n\\n    <ion-item class=\\\"textfield\\\" fill=\\\"outline\\\" no-padding id='password'>\\n      <ion-label class=\\\"textfield\\\" position=\\\"floating\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" required ></ion-input>\\n    </ion-item>\\n    \\n    <!--div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('password').hasError(validation.type) && (validationsForm.get('password').dirty || validationsForm.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div-->\\n\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\n\\n    <ion-button class=\\\"submit-btn\\\" type=\\\"submit\\\" fill=\\\"solid\\\" expand=\\\"block\\\" [disabled]=\\\"!validationsForm.valid\\\" >Login</ion-button>\\n    \\n  </form>\\n  <ion-button class='signup-btn' fill=\\\"outline\\\" routerLink=\\\"/signup\\\" expand=\\\"block\\\">Sign up</ion-button>\\n\\n<!--\\n  <ion-button class='offline-btn' fill=\\\"outline\\\" routerLink=\\\"/offline\\\" expand=\\\"block\\\">Offline Mode</ion-button>\\n-->\\n\\n      <ion-list>\\n        <ion-item lines=\\\"full\\\">\\n          <ion-icon slot=\\\"start\\\" name=\\\"moon\\\"></ion-icon>\\n          <ion-label>\\n            Toggle Dark Theme\\n          </ion-label>\\n          <ion-toggle [(ngModel)]=\\\"toggle_dark_mode\\\" id=\\\"themeToggle\\\" slot=\\\"end\\\"></ion-toggle>\\n        </ion-item>\\n      </ion-list>\\n\\n  <!-- FOR DEBUGGING ONLY -->\\n\\n  <!--<div id='debug-stuff' style=\\\"position:relative; top:5em;\\\" *ngIf=\\\"debugging_mode\\\">\\n    <ion-button size='small' fill=\\\"outline\\\" (click)=\\\"debug('driver')\\\" clear>Debug Driver</ion-button>\\n    <ion-button size='small' fill=\\\"outline\\\" (click)=\\\"debug('commander')\\\" clear>Debug Commander</ion-button>\\n    <ion-button size='small' fill=\\\"outline\\\" (click)=\\\"debug('admin')\\\" clear>Debug Admin</ion-button>\\n    &lt;!&ndash;ion-button (click)=\\\"changeTheme('autumn')\\\">Autumn</ion-button>\\n    <ion-button (click)=\\\"changeTheme('night')\\\">Dark</ion-button>\\n    <ion-button (click)=\\\"changeTheme('neon')\\\">Neon</ion-button> &ndash;&gt;\\n  </div>-->\\n\\n      \\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { HomePage } from './home.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: HomePage\n      }\n    ])\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n","export default \"ion-content {\\n  --padding-start: 10%;\\n  --padding-end: 10%;\\n  --padding-top: 10%;\\n}\\nion-content .rounded {\\n  border-radius: 5px;\\n}\\nion-content .textfield {\\n  --background: transparent;\\n}\\nion-content .error-message {\\n  color: red;\\n  font-size: 0.8em;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95YXNoZGl4aXQvRGVza3RvcC9FbmdpbmVlcnNMb2dib29rMi9zcmMvYXBwL2hvbWUvaG9tZS5wYWdlLnNjc3MiLCJzcmMvYXBwL2hvbWUvaG9tZS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFJRSxvQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUNIRjtBRFVFO0VBR0Usa0JBQUE7QUNSSjtBRFVFO0VBQ0UseUJBQUE7QUNSSjtBRFVFO0VBQ0UsVUFBQTtFQUNBLGdCQUFBO0FDUkoiLCJmaWxlIjoic3JjL2FwcC9ob21lL2hvbWUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pb24tY29udGVudCB7XG5cbi8vICBvcGFjaXR5OiAwOyAgIC8vIGFuaW1lanMgd2lsbCBmYWRlIHRoaXMgaW5cbiAgXG4gIC0tcGFkZGluZy1zdGFydDogMTAlO1xuICAtLXBhZGRpbmctZW5kOiAxMCU7XG4gIC0tcGFkZGluZy10b3A6IDEwJTtcblxuICAvLyBodHRwczovL3d3dy5jc3NtYXRpYy5jb20vZ3JhZGllbnQtZ2VuZXJhdG9yXG4gIC8vYmFja2dyb3VuZDogLW1vei1saW5lYXItZ3JhZGllbnQobGVmdCwgcmdiYSgzMyw1Myw5LDEpMCUsICByZ2JhKDEwNCwxMzMsODEsMSkgIDEwMCUpO1xuICAvLy0taW9uLWJhY2tncm91bmQtY29sb3I6IG5vbmU7XG4gIC8vLS1pb24tdGV4dC1jb2xvcjojMDAwMDAwO1xuICAgIFxuICAucm91bmRlZCB7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICB9XG4gIC50ZXh0ZmllbGQge1xuICAgIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmVycm9yLW1lc3NhZ2Uge1xuICAgIGNvbG9yOiByZWQ7XG4gICAgZm9udC1zaXplOiAwLjhlbTtcbiAgfVxufVxuIiwiaW9uLWNvbnRlbnQge1xuICAtLXBhZGRpbmctc3RhcnQ6IDEwJTtcbiAgLS1wYWRkaW5nLWVuZDogMTAlO1xuICAtLXBhZGRpbmctdG9wOiAxMCU7XG59XG5pb24tY29udGVudCAucm91bmRlZCB7XG4gIC1tb3otYm9yZGVyLXJhZGl1czogNXB4O1xuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xufVxuaW9uLWNvbnRlbnQgLnRleHRmaWVsZCB7XG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5pb24tY29udGVudCAuZXJyb3ItbWVzc2FnZSB7XG4gIGNvbG9yOiByZWQ7XG4gIGZvbnQtc2l6ZTogMC44ZW07XG59Il19 */\"","import { Component } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl} from '@angular/forms';\nimport { NavController, LoadingController } from '@ionic/angular';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { DatabaseService } from '../services/database.service';\nimport { MessagingService } from '../services/messaging.service';\n//import { ThemeService } from '../services/theme.service';\nimport { environment } from '../../environments/environment';\nimport { Storage } from '@ionic/storage';\nimport * as anime from '../services/anime.js'  // For splash animation\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n\n  validationsForm: FormGroup;\n  errorMessage = '';\n\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Invalid email.' }\n    ],\n\n    // TODO: Validate password security at sign-up page only\n    password: [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n    ]\n  };\n\n  constructor(\n\n    private navCtrl: NavController,\n    private authService: AuthenticationService,\n    private database: DatabaseService,\n    private messaging: MessagingService,\n    private formBuilder: FormBuilder,\n    private loadingCtrl: LoadingController,\n    private storage: Storage\n    //,private theme: ThemeService\n\n  ) {\n    //this.animate();\n  }    \n\n  private loading;\n  public debugging_mode = true;\n  public toggle_dark_mode = false;\n  \n  ngOnInit() {\n\n    this.debugging_mode = !environment.production;  // --prod\n    \n    this.validationsForm = this.formBuilder.group({\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ]))\n    });\n    \n    // Restore used user/password\n    this.storage.get('email').then(value => {\n      this.validationsForm.get('email').setValue(value);\n    });\n    this.storage.get('password').then(value => {\n      this.validationsForm.get('password').setValue(value);\n    });\n\n    // Query for the toggle that is used to change between themes\n    // Note: \"dark\" colors are defined in theme/variables.scss\n    const toggle:any = document.querySelector('#themeToggle');\n    toggle.addEventListener('ionChange', (ev:any) => {\n      document.body.classList.toggle('dark', ev.detail.checked);\n      this.storage.set('dark', ev.detail.checked);\n    });\n\n    this.storage.get('dark').then(value => {\n      document.body.classList.toggle('dark', value);\n      this.toggle_dark_mode = value; // This will also set ngModel for ion-toggle\n    });\n  }\n\n  async loginUser(input){\n\n    console.log(`> Attempting login: ${input.email}`);\n\n    // Loading spinner overlay\n    this.loading = await this.loadingCtrl.create({\n      message: \"Authenticating...\"\n    });\n    this.loading.present();\n    \n    try { \n\n      // Authenticate user\n      var res = await this.authService.loginUser(input);\n      console.log(`> Firebase authentication is successful: ${res.user.email}`);\n\n      // Init database, retrieve user/drives info    \n      this.setLoadingText(\"Reading database...\");\n      await this.database.init(res.user.email);\n      console.log(`> Finished loading user: ${res.user.email}`);\n\n      // Init cloud messaging/notifications\n      this.setLoadingText(\"Initializing cloud messaging...\");\n      await this.messaging.init(res.user.email);\n\n      this.setLoadingText(\"Login success.\");\n      setTimeout(() => {this.loading.dismiss();},2000);\n\n      // Done initialization\n      if (this.database.current.user.is_commander) {\n        this.navCtrl.navigateForward('/tabs/commander');\n      } else {\n        this.navCtrl.navigateForward('/tabs/summary');\n      }\n      this.errorMessage = '';\n\n      // On successful login, save it      \n      this.storage.set('email', input.email);\n      this.storage.set('password', input.password);\n\n    } catch(err) {\n    \n      this.loading.dismiss();\n      this.errorMessage = `Login failed. ${err}`;\n    }\n    //this.validationsForm.reset();\n  }\n\n  private setLoadingText(text:string) {\n    const elem = document.querySelector(\n      \"div.loading-wrapper div.loading-content\");\n    if (elem) elem.innerHTML = text;\n  }\n\n  private debug(who) {\n    if (who === 'driver') {\n      this.validationsForm.get('email').setValue('tan97@gmail.com');\n      this.validationsForm.get('password').setValue('123456');\n    } else\n    if (who === 'commander') {\n      this.validationsForm.get('email').setValue('lee55@gmail.com');\n      this.validationsForm.get('password').setValue('123456');\n    } else\n    if (who === 'admin') {   \n      this.validationsForm.get('email').setValue('superuser@gmail.com');\n      this.validationsForm.get('password').setValue('123456');\n    }\n  }\n  private animate() {\n    // Only start animation when background image has finished loading\n    document.body.classList.add('js-loading');\n    window.addEventListener(\"load\", () => \n    {\n      document.body.classList.remove('js-loading');\n      console.log(\"Inside window::load\");\n\n      anime.timeline({loop: false})\n      .add({\n        targets: '#login-content',\n        opacity: [0,1],\n        duration: 3000,\n        easing: \"easeOutExpo\",\n      }).add({\n        targets: '#email',\n        opacity: [0,1],\n        translateY: [\"50em\",0],\n        duration: 800,\n        easing: \"easeOutBack\",\n        offset: '-=3000'\n      }).add({\n        targets: '#password',\n        opacity: [0,1],\n        translateY: [\"50em\",0],\n        duration: 800,\n        easing: \"easeOutBack\",\n        offset: '-=2500'\n      }).add({\n        targets: '.submit-btn',\n        opacity: [0,1],\n        translateY: [\"50em\",0],\n        duration: 800,\n        easing: \"easeOutBack\",\n        offset: '-=2250'\n      }).add({\n        targets: '.signup-btn',\n        opacity: [0,1],\n        translateY: [\"50em\",0],\n        duration: 800,\n        easing: \"easeOutBack\",\n        offset: '-=2000'\n      }).add({\n        targets: '#debug-stuff',\n        opacity: [0,1],\n        duration: 800,\n        easing: \"easeOutBack\",\n        offset: '-=1000'\n      });\n    });\n  }\n}\n","/**\n * http://animejs.com\n * JavaScript animation engine\n * @version v2.2.0\n * @author Julian Garnier\n * @copyright ©2017 Julian Garnier\n * Released under the MIT license\n**/\n\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.anime = factory();\n  }\n}(this, () => {\n\n  // Defaults\n\n  const defaultInstanceSettings = {\n    update: undefined,\n    begin: undefined,\n    run: undefined,\n    complete: undefined,\n    loop: 1,\n    direction: 'normal',\n    autoplay: true,\n    offset: 0\n  }\n\n  const defaultTweenSettings = {\n    duration: 1000,\n    delay: 0,\n    easing: 'easeOutElastic',\n    elasticity: 500,\n    round: 0\n  }\n\n  const validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skewX', 'skewY', 'perspective'];\n  let transformString;\n\n  // Utils\n\n  function stringContains(str, text) {\n    return str.indexOf(text) > -1;\n  }\n\n  const is = {\n    arr: a => Array.isArray(a),\n    obj: a => stringContains(Object.prototype.toString.call(a), 'Object'),\n    pth: a => is.obj(a) && a.hasOwnProperty('totalLength'),\n    svg: a => a instanceof SVGElement,\n    dom: a => a.nodeType || is.svg(a),\n    str: a => typeof a === 'string',\n    fnc: a => typeof a === 'function',\n    und: a => typeof a === 'undefined',\n    hex: a => /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a),\n    rgb: a => /^rgb/.test(a),\n    hsl: a => /^hsl/.test(a),\n    col: a => (is.hex(a) || is.rgb(a) || is.hsl(a))\n  }\n\n  // BezierEasing https://github.com/gre/bezier-easing\n\n  const bezier = (() => {\n\n    const kSplineTableSize = 11;\n    const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n    function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 };\n    function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 };\n    function C (aA1)      { return 3.0 * aA1 };\n\n    function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT };\n    function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) };\n\n    function binarySubdivide (aX, aA, aB, mX1, mX2) {\n      let currentX, currentT, i = 0;\n      do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) { aB = currentT } else { aA = currentT };\n      } while (Math.abs(currentX) > 0.0000001 && ++i < 10);\n      return currentT;\n    }\n\n    function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n      for (let i = 0; i < 4; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) return aGuessT;\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n      }\n      return aGuessT;\n    }\n\n    function bezier(mX1, mY1, mX2, mY2) {\n\n      if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) return;\n      let sampleValues = new Float32Array(kSplineTableSize);\n\n      if (mX1 !== mY1 || mX2 !== mY2) {\n        for (let i = 0; i < kSplineTableSize; ++i) {\n          sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n      }\n\n      function getTForX(aX) {\n\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n          intervalStart += kSampleStepSize;\n        }\n\n        --currentSample;\n\n        const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n\n        if (initialSlope >= 0.001) {\n          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n          return guessForT;\n        } else {\n          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n\n      }\n\n      return x => {\n        if (mX1 === mY1 && mX2 === mY2) return x;\n        if (x === 0) return 0;\n        if (x === 1) return 1;\n        return calcBezier(getTForX(x), mY1, mY2);\n      }\n\n    }\n\n    return bezier;\n\n  })();\n\n  const easings = (() => {\n\n    const names = ['Quad', 'Cubic', 'Quart', 'Quint', 'Sine', 'Expo', 'Circ', 'Back', 'Elastic'];\n\n    // Elastic easing adapted from jQueryUI http://api.jqueryui.com/easings/\n\n    function elastic(t, p) {\n      return t === 0 || t === 1 ? t :\n      -Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2.0) * Math.asin(1))) * (Math.PI * 2)) / p );\n    }\n\n    // Approximated Penner equations http://matthewlein.com/ceaser/\n\n    const equations = {\n      In: [\n        [0.550, 0.085, 0.680, 0.530], /* InQuad */\n        [0.550, 0.055, 0.675, 0.190], /* InCubic */\n        [0.895, 0.030, 0.685, 0.220], /* InQuart */\n        [0.755, 0.050, 0.855, 0.060], /* InQuint */\n        [0.470, 0.000, 0.745, 0.715], /* InSine */\n        [0.950, 0.050, 0.795, 0.035], /* InExpo */\n        [0.600, 0.040, 0.980, 0.335], /* InCirc */\n        [0.600, -0.280, 0.735, 0.045], /* InBack */\n        elastic /* InElastic */\n      ], Out: [\n        [0.250, 0.460, 0.450, 0.940], /* OutQuad */\n        [0.215, 0.610, 0.355, 1.000], /* OutCubic */\n        [0.165, 0.840, 0.440, 1.000], /* OutQuart */\n        [0.230, 1.000, 0.320, 1.000], /* OutQuint */\n        [0.390, 0.575, 0.565, 1.000], /* OutSine */\n        [0.190, 1.000, 0.220, 1.000], /* OutExpo */\n        [0.075, 0.820, 0.165, 1.000], /* OutCirc */\n        [0.175, 0.885, 0.320, 1.275], /* OutBack */\n        (t, f) => 1 - elastic(1 - t, f) /* OutElastic */\n      ], InOut: [\n        [0.455, 0.030, 0.515, 0.955], /* InOutQuad */\n        [0.645, 0.045, 0.355, 1.000], /* InOutCubic */\n        [0.770, 0.000, 0.175, 1.000], /* InOutQuart */\n        [0.860, 0.000, 0.070, 1.000], /* InOutQuint */\n        [0.445, 0.050, 0.550, 0.950], /* InOutSine */\n        [1.000, 0.000, 0.000, 1.000], /* InOutExpo */\n        [0.785, 0.135, 0.150, 0.860], /* InOutCirc */\n        [0.680, -0.550, 0.265, 1.550], /* InOutBack */\n        (t, f) => t < .5 ? elastic(t * 2, f) / 2 : 1 - elastic(t * -2 + 2, f) / 2 /* InOutElastic */\n      ]\n    }\n\n    let functions = {\n      linear: bezier(0.250, 0.250, 0.750, 0.750)\n    }\n\n    for (let type in equations) {\n      equations[type].forEach((f, i) => {\n        functions['ease'+type+names[i]] = is.fnc(f) ? f : bezier.apply(this, f);\n      });\n    }\n\n    return functions;\n\n  })();\n\n  // Strings\n\n  function stringToHyphens(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n\n  function selectString(str) {\n    if (is.col(str)) return;\n    try {\n      let nodes = document.querySelectorAll(str);\n      return nodes;\n    } catch(e) {\n      return;\n    }\n  }\n\n  // Arrays\n\n  function filterArray(arr, callback) {\n    const len = arr.length;\n    const thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    let result = [];\n    for (let i = 0; i < len; i++) {\n      if (i in arr) {\n        const val = arr[i];\n        if (callback.call(thisArg, val, i, arr)) {\n          result.push(val);\n        }\n      }\n    }\n    return result;\n  }\n\n  function flattenArray(arr) {\n    return arr.reduce((a, b) => a.concat(is.arr(b) ? flattenArray(b) : b), []);\n  }\n\n  function toArray(o) {\n    if (is.arr(o)) return o;\n    if (is.str(o)) o = selectString(o) || o;\n    if (o instanceof NodeList || o instanceof HTMLCollection) return [].slice.call(o);\n    return [o];\n  }\n\n  function arrayContains(arr, val) {\n    return arr.some(a => a === val);\n  }\n\n  // Objects\n\n  function cloneObject(o) {\n    let clone = {};\n    for (let p in o) clone[p] = o[p];\n    return clone;\n  }\n\n  function replaceObjectProps(o1, o2) {\n    let o = cloneObject(o1);\n    for (let p in o1) o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p];\n    return o;\n  }\n\n  function mergeObjects(o1, o2) {\n    let o = cloneObject(o1);\n    for (let p in o2) o[p] = is.und(o1[p]) ? o2[p] : o1[p];\n    return o;\n  }\n\n  // Colors\n\n  function rgbToRgba(rgbValue) {\n    const rgb = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(rgbValue);\n    return rgb ? `rgba(${rgb[1]},1)` : rgbValue;\n  }\n\n  function hexToRgba(hexValue) {\n    const rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    const hex = hexValue.replace(rgx, (m, r, g, b) => r + r + g + g + b + b );\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    const r = parseInt(rgb[1], 16);\n    const g = parseInt(rgb[2], 16);\n    const b = parseInt(rgb[3], 16);\n    return `rgba(${r},${g},${b},1)`;\n  }\n\n  function hslToRgba(hslValue) {\n    const hsl = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(hslValue) || /hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(hslValue);\n    const h = parseInt(hsl[1]) / 360;\n    const s = parseInt(hsl[2]) / 100;\n    const l = parseInt(hsl[3]) / 100;\n    const a = hsl[4] || 1;\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    }\n    let r, g, b;\n    if (s == 0) {\n      r = g = b = l;\n    } else {\n      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      const p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1/3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1/3);\n    }\n    return `rgba(${r * 255},${g * 255},${b * 255},${a})`;\n  }\n\n  function colorToRgb(val) {\n    if (is.rgb(val)) return rgbToRgba(val);\n    if (is.hex(val)) return hexToRgba(val);\n    if (is.hsl(val)) return hslToRgba(val);\n  }\n\n  // Units\n\n  function getUnit(val) {\n    const split = /([\\+\\-]?[0-9#\\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);\n    if (split) return split[2];\n  }\n\n  function getTransformUnit(propName) {\n    if (stringContains(propName, 'translate') || propName === 'perspective') return 'px';\n    if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) return 'deg';\n  }\n\n  // Values\n\n  function minMaxValue(val, min, max) {\n    return Math.min(Math.max(val, min), max);\n  }\n\n  function getFunctionValue(val, animatable) {\n    if (!is.fnc(val)) return val;\n    return val(animatable.target, animatable.id, animatable.total);\n  }\n\n  function getCSSValue(el, prop) {\n    if (prop in el.style) {\n      return getComputedStyle(el).getPropertyValue(stringToHyphens(prop)) || '0';\n    }\n  }\n\n  function getAnimationType(el, prop) {\n    if (is.dom(el) && arrayContains(validTransforms, prop)) return 'transform';\n    if (is.dom(el) && (el.getAttribute(prop) || (is.svg(el) && el[prop]))) return 'attribute';\n    if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) return 'css';\n    if (el[prop] != null) return 'object';\n  }\n\n  function getTransformValue(el, propName) {\n    const defaultUnit = getTransformUnit(propName);\n    const defaultVal = stringContains(propName, 'scale') ? 1 : 0 + defaultUnit;\n    const str = el.style.transform;\n    if (!str) return defaultVal;\n    let match = [];\n    let props = [];\n    let values = [];\n    const rgx = /(\\w+)\\((.+?)\\)/g;\n    while (match = rgx.exec(str)) {\n      props.push(match[1]);\n      values.push(match[2]);\n    }\n    const value = filterArray(values, (val, i) => props[i] === propName);\n    return value.length ? value[0] : defaultVal;\n  }\n\n  function getOriginalTargetValue(target, propName) {\n    switch (getAnimationType(target, propName)) {\n      case 'transform': return getTransformValue(target, propName);\n      case 'css': return getCSSValue(target, propName);\n      case 'attribute': return target.getAttribute(propName);\n    }\n    return target[propName] || 0;\n  }\n\n  function getRelativeValue(to, from) {\n    const operator = /^(\\*=|\\+=|-=)/.exec(to);\n    if (!operator) return to;\n    const u = getUnit(to) || 0;\n    const x = parseFloat(from);\n    const y = parseFloat(to.replace(operator[0], ''));\n    switch (operator[0][0]) {\n      case '+': return x + y + u;\n      case '-': return x - y + u;\n      case '*': return x * y + u;\n    }\n  }\n\n  function validateValue(val, unit) {\n    if (is.col(val)) return colorToRgb(val);\n    const originalUnit = getUnit(val);\n    const unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;\n    return unit && !/\\s/g.test(val) ? unitLess + unit : unitLess;\n  }\n\n  // getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes. \n  // adapted from https://gist.github.com/SebLambla/3e0550c496c236709744\n\n  function getDistance(p1, p2) {\n    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)); \n  }\n\n  function getCircleLength(el) {\n    return 2 * Math.PI * el.getAttribute('r');\n  }\n\n  function getRectLength(el) {\n    return (el.getAttribute('width') * 2) + (el.getAttribute('height') * 2);\n  }\n\n  function getLineLength(el) {\n    return getDistance(\n      {x: el.getAttribute('x1'), y: el.getAttribute('y1')}, \n      {x: el.getAttribute('x2'), y: el.getAttribute('y2')}\n    );\n  }\n\n  function getPolylineLength(el) {\n    const points = el.points;\n    let totalLength = 0;\n    let previousPos;\n    for (let i = 0 ; i < points.numberOfItems; i++) {\n      const currentPos = points.getItem(i);\n      if (i > 0) totalLength += getDistance(previousPos, currentPos);\n      previousPos = currentPos;\n    }\n    return totalLength;\n  }\n\n  function getPolygonLength(el) {\n    const points = el.points;\n    return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));\n  }\n\n  // Path animation\n\n  function getTotalLength(el) {\n    if (el.getTotalLength) return el.getTotalLength();\n    switch(el.tagName.toLowerCase()) {\n      case 'circle': return getCircleLength(el);\n      case 'rect': return getRectLength(el);\n      case 'line': return getLineLength(el);\n      case 'polyline': return getPolylineLength(el);\n      case 'polygon': return getPolygonLength(el);\n    }\n  }\n\n  function setDashoffset(el) {\n    const pathLength = getTotalLength(el);\n    el.setAttribute('stroke-dasharray', pathLength);\n    return pathLength;\n  }\n\n  // Motion path\n\n  function getPath(path, percent) {\n    const el = is.str(path) ? selectString(path)[0] : path;\n    const p = percent || 100;\n    return function(prop) {\n      return {\n        el: el,\n        property: prop,\n        totalLength: getTotalLength(el) * (p / 100)\n      }\n    }\n  }\n\n  function getPathProgress(path, progress) {\n    function point(offset = 0) {\n      const l = progress + offset >= 1 ? progress + offset : 0;\n      return path.el.getPointAtLength(l);\n    }\n    const p = point();\n    const p0 = point(-1);\n    const p1 = point(+1);\n    switch (path.property) {\n      case 'x': return p.x;\n      case 'y': return p.y;\n      case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;\n    }\n  }\n\n  // Decompose value\n\n  function decomposeValue(val, unit) {\n    const rgx = /-?\\d*\\.?\\d+/g;\n    const value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';\n    return {\n      original: value,\n      numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],\n      strings: (is.str(val) || unit) ? value.split(rgx) : []\n    }\n  }\n\n  // Animatables\n\n  function parseTargets(targets) {\n    const targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];\n    return filterArray(targetsArray, (item, pos, self) => self.indexOf(item) === pos);\n  }\n\n  function getAnimatables(targets) {\n    const parsed = parseTargets(targets);\n    return parsed.map((t, i) => {\n      return {target: t, id: i, total: parsed.length};\n    });\n  }\n\n  // Properties\n\n  function normalizePropertyTweens(prop, tweenSettings) {\n    let settings = cloneObject(tweenSettings);\n    if (is.arr(prop)) {\n      const l = prop.length;\n      const isFromTo = (l === 2 && !is.obj(prop[0]));\n      if (!isFromTo) {\n        // Duration divided by the number of tweens\n        if (!is.fnc(tweenSettings.duration)) settings.duration = tweenSettings.duration / l;\n      } else {\n        // Transform [from, to] values shorthand to a valid tween value\n        prop = {value: prop};\n      }\n    }\n    return toArray(prop).map((v, i) => {\n      // Default delay value should be applied only on the first tween\n      const delay = !i ? tweenSettings.delay : 0;\n      // Use path object as a tween value\n      let obj = is.obj(v) && !is.pth(v) ? v : {value: v};\n      // Set default delay value\n      if (is.und(obj.delay)) obj.delay = delay;\n      return obj;\n    }).map(k => mergeObjects(k, settings));\n  }\n\n  function getProperties(instanceSettings, tweenSettings, params) {\n    let properties = [];\n    const settings = mergeObjects(instanceSettings, tweenSettings);\n    for (let p in params) {\n      if (!settings.hasOwnProperty(p) && p !== 'targets') {\n        properties.push({\n          name: p,\n          offset: settings['offset'],\n          tweens: normalizePropertyTweens(params[p], tweenSettings)\n        });\n      }\n    }\n    return properties;\n  }\n\n  // Tweens\n\n  function normalizeTweenValues(tween, animatable) {\n    let t = {};\n    for (let p in tween) {\n      let value = getFunctionValue(tween[p], animatable);\n      if (is.arr(value)) {\n        value = value.map(v => getFunctionValue(v, animatable));\n        if (value.length === 1) value = value[0];\n      }\n      t[p] = value;\n    }\n    t.duration = parseFloat(t.duration);\n    t.delay = parseFloat(t.delay);\n    return t;\n  }\n\n  function normalizeEasing(val) {\n    return is.arr(val) ? bezier.apply(this, val) : easings[val];\n  }\n\n  function normalizeTweens(prop, animatable) {\n    let previousTween;\n    return prop.tweens.map(t => {\n      let tween = normalizeTweenValues(t, animatable);\n      const tweenValue = tween.value;\n      const originalValue = getOriginalTargetValue(animatable.target, prop.name);\n      const previousValue = previousTween ? previousTween.to.original : originalValue;\n      const from = is.arr(tweenValue) ? tweenValue[0] : previousValue;\n      const to = getRelativeValue(is.arr(tweenValue) ? tweenValue[1] : tweenValue, from);\n      const unit = getUnit(to) || getUnit(from) || getUnit(originalValue);\n      tween.from = decomposeValue(from, unit);\n      tween.to = decomposeValue(to, unit);\n      tween.start = previousTween ? previousTween.end : prop.offset;\n      tween.end = tween.start + tween.delay + tween.duration;\n      tween.easing = normalizeEasing(tween.easing);\n      tween.elasticity = (1000 - minMaxValue(tween.elasticity, 1, 999)) / 1000;\n      tween.isPath = is.pth(tweenValue);\n      tween.isColor = is.col(tween.from.original);\n      if (tween.isColor) tween.round = 1;\n      previousTween = tween;\n      return tween;\n    });\n  }\n\n  // Tween progress\n\n  const setTweenProgress = {\n    css: (t, p, v) => t.style[p] = v,\n    attribute: (t, p, v) => t.setAttribute(p, v),\n    object: (t, p, v) => t[p] = v,\n    transform: (t, p, v, transforms, id) => {\n      if (!transforms[id]) transforms[id] = [];\n      transforms[id].push(`${p}(${v})`);\n    }\n  }\n\n  // Animations\n\n  function createAnimation(animatable, prop) {\n    const animType = getAnimationType(animatable.target, prop.name);\n    if (animType) {\n      const tweens = normalizeTweens(prop, animatable);\n      return {\n        type: animType,\n        property: prop.name,\n        animatable: animatable,\n        tweens: tweens,\n        duration: tweens[tweens.length - 1].end,\n        delay: tweens[0].delay\n      }\n    }\n  }\n\n  function getAnimations(animatables, properties) {\n    return filterArray(flattenArray(animatables.map(animatable => {\n      return properties.map(prop => {\n        return createAnimation(animatable, prop);\n      });\n    })), a => !is.und(a));\n  }\n\n  // Create Instance\n\n  function getInstanceTimings(type, animations, instanceSettings, tweenSettings) {\n    const isDelay = (type === 'delay');\n    if (animations.length) {\n      return (isDelay ? Math.min : Math.max).apply(Math, animations.map(anim => anim[type]));\n    } else {\n      return isDelay ? tweenSettings.delay : instanceSettings.offset + tweenSettings.delay + tweenSettings.duration;\n    }\n  }\n\n  function createNewInstance(params) {\n    const instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\n    const tweenSettings = replaceObjectProps(defaultTweenSettings, params);\n    const animatables = getAnimatables(params.targets);\n    const properties = getProperties(instanceSettings, tweenSettings, params);\n    const animations = getAnimations(animatables, properties);\n    return mergeObjects(instanceSettings, {\n      children: [],\n      animatables: animatables,\n      animations: animations,\n      duration: getInstanceTimings('duration', animations, instanceSettings, tweenSettings),\n      delay: getInstanceTimings('delay', animations, instanceSettings, tweenSettings)\n    });\n  }\n\n  // Core\n\n  let activeInstances = [];\n  let raf = 0;\n\n  const engine = (() => {\n    function play() { raf = requestAnimationFrame(step); };\n    function step(t) {\n      const activeLength = activeInstances.length;\n      if (activeLength) {\n        let i = 0;\n        while (i < activeLength) {\n          if (activeInstances[i]) activeInstances[i].tick(t);\n          i++;\n        }\n        play();\n      } else {\n        cancelAnimationFrame(raf);\n        raf = 0;\n      }\n    }\n    return play;\n  })();\n\n\n  // Public Instance\n\n  function anime(params = {}) {\n\n    let now, startTime, lastTime = 0;\n\n    let resolve = null;\n\n    function makePromise() {\n      return window.Promise && new Promise(_resolve => resolve = _resolve);\n    }\n\n    let promise = makePromise();\n\n    let instance = createNewInstance(params);\n\n    function toggleInstanceDirection() {\n      instance.reversed = !instance.reversed;\n    }\n\n    function adjustTime(time) {\n      return instance.reversed ? instance.duration - time : time;\n    }\n\n    function syncInstanceChildren(time) {\n      const children = instance.children;\n      const childrenLength = children.length;\n      if (time >= instance.currentTime) {\n        for (let i = 0; i < childrenLength; i++) children[i].seek(time);\n      } else {\n        for (let i = childrenLength; i--;) children[i].seek(time);\n      }\n    }\n\n    function setAnimationsProgress(insTime) {\n      let i = 0;\n      let transforms = {};\n      const animations = instance.animations;\n      const animationsLength = animations.length;\n      while (i < animationsLength) {\n        const anim = animations[i];\n        const animatable = anim.animatable;\n        const tweens = anim.tweens;\n        const tweenLength = tweens.length - 1;\n        let tween = tweens[tweenLength];\n        // Only check for keyframes if there is more than one tween\n        if (tweenLength) tween = filterArray(tweens, t => (insTime < t.end))[0] || tween;\n        const elapsed = minMaxValue(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;\n        const eased = isNaN(elapsed) ? 1 : tween.easing(elapsed, tween.elasticity);\n        const strings = tween.to.strings;\n        const round = tween.round;\n        let numbers = [];\n        let progress;\n        const toNumbersLength = tween.to.numbers.length;\n        for (let n = 0; n < toNumbersLength; n++) {\n          let value;\n          const toNumber = tween.to.numbers[n];\n          const fromNumber = tween.from.numbers[n];\n          if (!tween.isPath) {\n            value = fromNumber + (eased * (toNumber - fromNumber));\n          } else {\n            value = getPathProgress(tween.value, eased * toNumber);\n          }\n          if (round) {\n            if (!(tween.isColor && n > 2)) {\n              value = Math.round(value * round) / round;\n            }\n          }\n          numbers.push(value);\n        }\n        // Manual Array.reduce for better performances\n        const stringsLength = strings.length;\n        if (!stringsLength) {\n          progress = numbers[0];\n        } else {\n          progress = strings[0];\n          for (let s = 0; s < stringsLength; s++) {\n            const a = strings[s];\n            const b = strings[s + 1];\n            const n = numbers[s];\n            if (!isNaN(n)) {\n              if (!b) {\n                progress += n + ' ';\n              } else {\n                progress += n + b;\n              }\n            }\n          }\n        }\n        setTweenProgress[anim.type](animatable.target, anim.property, progress, transforms, animatable.id);\n        anim.currentValue = progress;\n        i++;\n      }\n      const transformsLength = Object.keys(transforms).length;\n      if (transformsLength) {\n        for (let id = 0; id < transformsLength; id++) {\n          if (!transformString) {\n            const t = 'transform';\n            transformString = (getCSSValue(document.body, t) ? t : `-webkit-${t}`);\n          }\n          instance.animatables[id].target.style[transformString] = transforms[id].join(' ');\n        }\n      }\n      instance.currentTime = insTime;\n      instance.progress = (insTime / instance.duration) * 100;\n    }\n\n    function setCallback(cb) {\n      if (instance[cb]) instance[cb](instance);\n    }\n\n    function countIteration() {\n      if (instance.remaining && instance.remaining !== true) {\n        instance.remaining--;\n      }\n    }\n\n    function setInstanceProgress(engineTime) {\n      const insDuration = instance.duration;\n      const insOffset = instance.offset;\n      const insStart = insOffset + instance.delay;\n      const insCurrentTime = instance.currentTime;\n      const insReversed = instance.reversed;\n      const insTime = adjustTime(engineTime);\n      if (instance.children.length) syncInstanceChildren(insTime);\n      if (insTime >= insStart || !insDuration) {\n        if (!instance.began) {\n          instance.began = true;\n          setCallback('begin');\n        }\n        setCallback('run');\n      }\n      if (insTime > insOffset && insTime < insDuration) {\n        setAnimationsProgress(insTime);\n      } else {\n        if (insTime <= insOffset && insCurrentTime !== 0) {\n          setAnimationsProgress(0);\n          if (insReversed) countIteration();\n        }\n        if ((insTime >= insDuration && insCurrentTime !== insDuration) || !insDuration) {\n          setAnimationsProgress(insDuration);\n          if (!insReversed) countIteration();\n        }\n      }\n      setCallback('update');\n      if (engineTime >= insDuration) {\n        if (instance.remaining) {\n          startTime = now;\n          if (instance.direction === 'alternate') toggleInstanceDirection();\n        } else {\n          instance.pause();\n          if (!instance.completed) {\n            instance.completed = true;\n            setCallback('complete');\n            if ('Promise' in window) {\n              resolve();\n              promise = makePromise();\n            }\n          }\n        }\n        lastTime = 0;\n      }\n    }\n\n    instance.reset = function() {\n      const direction = instance.direction;\n      const loops = instance.loop;\n      instance.currentTime = 0;\n      instance.progress = 0;\n      instance.paused = true;\n      instance.began = false;\n      instance.completed = false;\n      instance.reversed = direction === 'reverse';\n      instance.remaining = direction === 'alternate' && loops === 1 ? 2 : loops;\n      setAnimationsProgress(0);\n      for (let i = instance.children.length; i--; ){\n        instance.children[i].reset();\n      }\n    }\n\n    instance.tick = function(t) {\n      now = t;\n      if (!startTime) startTime = now;\n      const engineTime = (lastTime + now - startTime) * anime.speed;\n      setInstanceProgress(engineTime);\n    }\n\n    instance.seek = function(time) {\n      setInstanceProgress(adjustTime(time));\n    }\n\n    instance.pause = function() {\n      const i = activeInstances.indexOf(instance);\n      if (i > -1) activeInstances.splice(i, 1);\n      instance.paused = true;\n    }\n\n    instance.play = function() {\n      if (!instance.paused) return;\n      instance.paused = false;\n      startTime = 0;\n      lastTime = adjustTime(instance.currentTime);\n      activeInstances.push(instance);\n      if (!raf) engine();\n    }\n\n    instance.reverse = function() {\n      toggleInstanceDirection();\n      startTime = 0;\n      lastTime = adjustTime(instance.currentTime);\n    }\n\n    instance.restart = function() {\n      instance.pause();\n      instance.reset();\n      instance.play();\n    }\n\n    instance.finished = promise;\n\n    instance.reset();\n\n    if (instance.autoplay) instance.play();\n\n    return instance;\n\n  }\n\n  // Remove targets from animation\n\n  function removeTargets(targets) {\n    const targetsArray = parseTargets(targets);\n    for (let i = activeInstances.length; i--;) {\n      const instance = activeInstances[i];\n      const animations = instance.animations;\n      for (let a = animations.length; a--;) {\n        if (arrayContains(targetsArray, animations[a].animatable.target)) {\n          animations.splice(a, 1);\n          if (!animations.length) instance.pause();\n        }\n      }\n    }\n  }\n\n  // Timeline\n\n  function timeline(params) {\n    let tl = anime(params);\n    tl.pause();\n    tl.duration = 0;\n    tl.add = function(instancesParams) {\n      tl.children.forEach(i => { i.began = true; i.completed = true; });\n      toArray(instancesParams).forEach(instanceParams => {\n        let insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params || {}));\n        insParams.targets = insParams.targets || params.targets;\n        const tlDuration = tl.duration;\n        const insOffset = insParams.offset;\n        insParams.autoplay = false;\n        insParams.direction = tl.direction;\n        insParams.offset = is.und(insOffset) ? tlDuration : getRelativeValue(insOffset, tlDuration);\n        tl.began = true;\n        tl.completed = true;\n        tl.seek(insParams.offset);\n        const ins = anime(insParams);\n        ins.began = true;\n        ins.completed = true;\n        if (ins.duration > tlDuration) tl.duration = ins.duration;\n        tl.children.push(ins);\n      });\n      tl.seek(0);\n      tl.reset();\n      if (tl.autoplay) tl.restart();\n      return tl;\n    }\n    return tl;\n  }\n\n  anime.version = '2.2.0';\n  anime.speed = 1;\n  anime.running = activeInstances;\n  anime.remove = removeTargets;\n  anime.getValue = getOriginalTargetValue;\n  anime.path = getPath;\n  anime.setDashoffset = setDashoffset;\n  anime.bezier = bezier;\n  anime.easings = easings;\n  anime.timeline = timeline;\n  anime.random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n  return anime;\n\n}));\n","import { Platform } from '@ionic/angular';\nimport { Injectable } from '@angular/core';\nimport { DatabaseService } from './database.service';\nimport { FCM } from '@ionic-native/fcm/ngx';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagingService {\n\n  constructor(\n    private platform: Platform,\n    private database: DatabaseService,\n    private fcm: FCM  // Firebase Cloud Messaging\n  ) { }\n\n  public init(email: string) {\n\n    // Setup Firebase Cloud Messaging -- token handling,\n    // notifications in foreground/background.\n\n    if (this.platform.is('cordova')) {\n\n      console.log(`> FCM: Initializing cloud messaging services: ${email}`);\n      \n      this.fcm.getToken().then(token => {\n      \n        console.log(`> FCM: Token received: ${token}`);\n\n        const doc = {\n          token,\n          userId: email\n        };\n        \n        this.database.write('devices',email,doc);\n      });\n      \n      this.fcm.onTokenRefresh().subscribe(token => {\n        console.log(`> FCM: Token refreshed: ${token}`);\n        console.log(token);\n      });\n\n      this.fcm.onNotification().subscribe(data => {\n      \n        if (data.wasTapped) {\n          console.log(`> FCM: Received in background: ${data}`);\n//          this.router.navigate([data.landing_page, data.key3]);\n        } else {\n          console.log(`> FCM: Received token in foreground: ${data}`);\n//          this.router.navigate([data.landing_page, data.key3]);\n        }\n      });\n\n      console.log(`> FCM: initialization ok.`);\n    }\n  }\n}\n"],"sourceRoot":"webpack:///","file":"home-home-module-es5.js"}