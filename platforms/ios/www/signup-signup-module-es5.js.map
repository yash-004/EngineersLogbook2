{"version":3,"sources":["src/app/signup/signup.page.html","src/app/signup/signup.module.ts","src/app/signup/signup.page.scss","src/app/signup/signup.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Signup</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content no-padding>\\n\\n  <form class=\\\"form\\\" [formGroup]=\\\"validationsForm\\\"  (ngSubmit)=\\\"tryRegister(validationsForm.value)\\\">\\n    \\n    <!-- Name ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label position=\\\"floating\\\">Name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('name').hasError(validation.type) && (validationsForm.get('name').dirty || validationsForm.get('name').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <!-- Email ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label  position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('email').hasError(validation.type) && (validationsForm.get('email').dirty || validationsForm.get('email').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!-- Unit ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label position=\\\"floating\\\">Unit</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"unit\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.unit\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('unit').hasError(validation.type) && (validationsForm.get('unit').dirty || validationsForm.get('unit').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!-- Company/Platoon ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label position=\\\"floating\\\">Company</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"company\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.company\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('company').hasError(validation.type) && (validationsForm.get('company').dirty || validationsForm.get('company').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    \\n    <!-- Password ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label  position=\\\"floating\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('password').hasError(validation.type) && (validationsForm.get('password').dirty || validationsForm.get('password').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n       \\n    <ion-item no-padding>\\n      <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.confirmPassword\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('confirmPassword').hasError(validation.type) && (validationsForm.get('confirmPassword').dirty || validationsForm.get('confirmPassword').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <!-- Licence ------------------->\\n    \\n    <ion-item no-padding>\\n      <ion-label position=\\\"floating\\\">License Number</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"licenseNum\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validationMessages.licenseNum\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('licenseNum').hasError(validation.type) && (validationsForm.get('licenseNum').dirty || validationsForm.get('licenseNum').touched)\\\">\\n        {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    \\n    <ion-item no-padding>\\n      <ion-label floating >License Type</ion-label>\\n      <ion-select formControlName=\\\"licenseType\\\">\\n        <ion-select-option value=\\\"A\\\">A</ion-select-option>\\n        <ion-select-option value=\\\"B\\\">B</ion-select-option>\\n        <ion-select-option value=\\\"C\\\">C</ion-select-option>\\n        <ion-select-option value=\\\"D\\\">D</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <!-- Commander or Driver ------------------->\\n\\n    <ion-item no-padding>\\n      <ion-label floating >Commander or Driver?</ion-label>\\n      <ion-select formControlName=\\\"isCommander\\\">\\n        <ion-select-option value=\\\"true\\\">Commander</ion-select-option>\\n        <ion-select-option value=\\\"false\\\">Driver</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n        \\n    <!-- Submit Button ------------------->  \\n    <BR><BR>\\n    <ion-button expand=\\\"block\\\" class=\\\"submit-btn\\\" type=\\\"submit\\\"  [disabled]=\\\"!validationsForm.valid\\\">Sign up</ion-button>\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\n    <label class=\\\"success-message\\\">{{successMessage}}</label>\\n\\n    <!-- <ion-button expand=\\\"block\\\" routerLink=\\\"/tabs\\\" fill=\\\"outline\\\">Sign up</ion-button>  --> \\n\\n    <!-- Cancel Button ------------------->\\n    <ion-button expand=\\\"block\\\" routerLink=\\\"/\\\" fill=\\\"outline\\\">Cancel</ion-button>\\n\\n  </form>\\n\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignupPage } from './signup.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignupPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [SignupPage]\n})\nexport class SignupPageModule {}\n","export default \"ion-content {\\n  --padding-start: 10%;\\n  --padding-end: 10%;\\n  --padding-top: 5px;\\n}\\nion-content .error-message {\\n  color: red;\\n  font-size: 0.8em;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXdpc3RoYW0vR2l0SHViL0VuZ2luZWVyc0xvZ2Jvb2syL3NyYy9hcHAvc2lnbnVwL3NpZ251cC5wYWdlLnNjc3MiLCJzcmMvYXBwL3NpZ251cC9zaWdudXAucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsb0JBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0FDQUY7QURFRTtFQUNFLFVBQUE7RUFDQSxnQkFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvc2lnbnVwL3NpZ251cC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY29udGVudCB7XG5cbiAgLS1wYWRkaW5nLXN0YXJ0OiAxMCU7XG4gIC0tcGFkZGluZy1lbmQ6IDEwJTtcbiAgLS1wYWRkaW5nLXRvcDogNXB4O1xuXG4gIC5lcnJvci1tZXNzYWdlIHtcbiAgICBjb2xvcjogcmVkO1xuICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gIH1cbn1cbiIsImlvbi1jb250ZW50IHtcbiAgLS1wYWRkaW5nLXN0YXJ0OiAxMCU7XG4gIC0tcGFkZGluZy1lbmQ6IDEwJTtcbiAgLS1wYWRkaW5nLXRvcDogNXB4O1xufVxuaW9uLWNvbnRlbnQgLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDAuOGVtO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { NavController } from '@ionic/angular';\nimport { DatabaseService, User } from '../services/database.service';\nimport { ToastController } from '@ionic/angular';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.page.html',\n  styleUrls: ['./signup.page.scss'],\n})\nexport class SignupPage implements OnInit {\n\n  validationsForm: FormGroup;\n  errorMessage = '';\n  successMessage = '';\n  toast: any;\n\n  validationMessages = {\n   name: [\n     { type: 'required', message: 'Name is required.' }],\n   email: [\n     { type: 'required', message: 'Email is required.' },\n     { type: 'pattern', message: 'Enter a valid email.' }\n   ],\n   unit: [\n     { type: 'required', message: 'Unit is required 30SCE or TPT.' },\n     { type: 'minlength', message: 'Unit must be at least 3 characters long.' }\n   ],\n   company: [\n     { type: 'required', message: 'Company is required A/B/C/ME or West.' },\n     { type: 'maxlength', message: 'Company must be less than 5 characters long. Alpha-A Bravo-B Charlie-C' }\n   ],\n   password: [\n     { type: 'required', message: 'Password is required.' },\n     { type: 'minlength', message: 'Password must be at least 6 characters long.' }\n   ],\n   confirmPassword: [\n    { type: 'required', message: 'You need to confirm your password.' },\n  ],\n   licenseNum: [\n    { type: 'required', message: 'License Number is required.' },\n    { type: 'minlength', message: 'License Number must be at least 5 characters long.' }\n  ]\n };\n\n  constructor(\n    private navCtrl: NavController,\n    private authService: AuthenticationService,\n    private database: DatabaseService,\n    private formBuilder: FormBuilder,\n    public toastController: ToastController\n  ) {}\n\n  ngOnInit(){\n    this.validationsForm = this.formBuilder.group({\n      name: new FormControl('', Validators.compose([\n        Validators.required\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      unit: new FormControl('', Validators.compose([\n        Validators.minLength(3),\n        Validators.required\n      ])),\n      company: new FormControl('', Validators.compose([\n        Validators.maxLength(4),\n        Validators.required\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ])),\n      confirmPassword: new FormControl('', Validators.required),\n      licenseNum: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required\n      ])),\n      licenseType: new FormControl('', Validators.compose([\n        Validators.required\n      ])),\n      isCommander: new FormControl('', Validators.compose([\n        Validators.required\n      ]))\n    });\n  }\n\n  async tryRegister(value){\n  \n    //console.log(`tryRegister: ${JSON.stringify(value)}`);\n    if (this.validationsForm.get('password').value !== this.validationsForm.get('confirmPassword').value) {\n      this.errorMessage = 'Password do not match';\n    }\n    else {\n      try {\n        const res = await this.authService.registerUser(value);\n        //console.log(`success: ${JSON.stringify(res)}`);\n        var new_user: User = {\n          name: value.name.toUpperCase(),\n          email: value.email,\n          fleet: value.unit.toUpperCase(),\n          company: value.company.toUpperCase(),\n          licence_num: value.licenseNum,\n          licence_type: value.licenseType,\n          created: this.database.getTimeStamp(),\n          mss_certified: false,\n          flb_certified: false,\n          belrex_certified: false,\n          m3g_certified: false,\n          is_driver: value.isCommander.toLowerCase() === 'false',\n          is_commander: value.isCommander.toLowerCase() === 'true',\n          location: {lat: 0, lng: 0},\n          admin_level: 1,\n        };\n        await this.database.write('user',res.user.email,new_user);\n        this.errorMessage = '';\n        this.successMessage = 'Your account has been created. Please log in.';\n        this.showToast(this.successMessage);\n        \n      } catch(err) {\n        console.log(err);\n        this.errorMessage = err.message;\n        this.successMessage = '';\n      }\n    }\n  }\n\n  goLoginPage() {\n    this.navCtrl.navigateBack('');\n  }\n\n  showToast(msg) {\n    this.toastController.create({\n      message: msg,\n      duration: 2000,\n      showCloseButton: true,\n      closeButtonText: 'OK',\n      position: 'middle'\n    }).then((obj) => {\n      obj.present();\n      this.navCtrl.navigateBack('');\n    });\n  }\n \n}\n"],"sourceRoot":"webpack:///","file":"signup-signup-module-es5.js"}