/*!
 * chartjs-gauge.js v0.1.0
 * https://github.com/haiiaaa/chartjs-gauge/
 * (c) 2019 chartjs-gauge.js Contributors
 * Released under the MIT License
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("chart.js")):"function"==typeof define&&define.amd?define(["chart.js"],e):(t=t||self).Gauge=e(t.Chart)}(this,(function(t){"use strict";(t=t&&t.hasOwnProperty("default")?t.default:t).defaults._set("gauge",{needle:{radiusPercentage:2,widthPercentage:3.2,lengthPercentage:80,color:"rgba(0, 0, 0, 1)"},valueLabel:{display:!0,formatter:null,color:"rgba(255, 255, 255, 1)",backgroundColor:"rgba(0, 0, 0, 1)",borderRadius:5,padding:{top:5,right:5,bottom:5,left:5},bottomMarginPercentage:5},animation:{duration:1e3,animateRotate:!0,animateScale:!1},cutoutPercentage:50,rotation:-Math.PI,circumference:Math.PI,legend:{display:!1},tooltips:{enabled:!1}});const e=t.controllers.doughnut.extend({getMaxValue:t=>t[t.length-1]||1,getWidth:t=>t.chartArea.right-t.chartArea.left,getAngle({chart:t,value:e,maxValue:a}){const{rotation:r,circumference:o}=t.options;return r+o*(e/a)},drawNeedle(t){this.chart.animating||(t=1);const{ctx:e,chartArea:{bottom:a},config:r}=this.chart,o=r.data.datasets[this.index],{previous:i}=this.getMeta(),{radiusPercentage:l,widthPercentage:n,lengthPercentage:s,color:c}=r.options.needle,{innerRadius:u,outerRadius:h}=this.chart,d=this.getWidth(this.chart),g=l/100*d,f=n/100*d,p=s/100*(h-u)+u,m=this.getWidth(this.chart)/2,b=a,x=this.getAngle({chart:this.chart,value:i.value,maxValue:i.maxValue}),v=x+(this.getAngle({chart:this.chart,value:o.value,maxValue:this.getMaxValue(o.data)})-x)*t;e.save(),e.translate(m,b),e.rotate(v),e.fillStyle=c,e.beginPath(),e.ellipse(0,0,g,g,0,0,2*Math.PI),e.fill(),e.beginPath(),e.moveTo(0,f/2),e.lineTo(p,0),e.lineTo(0,-f/2),e.fill(),e.restore()},drawValueLabel(e){if(!this.chart.config.options.valueLabel.display)return;const{ctx:a,chartArea:{bottom:r},config:o}=this.chart,i=o.data.datasets[this.index],{formatter:l,color:n,backgroundColor:s,borderRadius:c,padding:u,bottomMarginPercentage:h}=o.options.valueLabel,d=this.getWidth(this.chart),g=h/100*d,f=(l||(t=>t))(i.value).toString();a.textBaseline="middle",a.textAlign="center";const{width:p}=a.measureText(f),m=a.measureText("M").width,b=-(u.left+p/2),x=-(u.top+m/2),v=u.left+p+u.right,P=u.top+m+u.bottom,y=d/2,w=r-g;a.save(),a.translate(y,w),a.beginPath(),t.helpers.canvas.roundedRect(a,b,x,v,P,c),a.fillStyle=s,a.fill(),a.fillStyle=n||o.options.defaultFontColor,a.fillText(f,0,m/2-u.bottom),a.restore()},update(e){const a=this.chart.config.data.datasets[this.index],r=this.getMeta(),o={value:0,maxValue:1};e?(r.previous=null,r.current=o):(a.data.sort((t,e)=>t-e),r.previous=r.current||o,r.current={value:a.value,maxValue:this.getMaxValue(a.data)}),t.controllers.doughnut.prototype.update.call(this,e)},updateElement(e,a,r){t.controllers.doughnut.prototype.updateElement.call(this,e,a,r);const o=this.getDataset(),{data:i}=o,{options:l}=this.chart.config,n=this.getMaxValue(i),s=i[a-1]||0,c=i[a],u=l.rotation+l.circumference*(s/n),h=u+l.circumference*((c-s)/n),d=h-u;Object.assign(e._model,{startAngle:u,endAngle:h,circumference:d})},draw(e){t.controllers.doughnut.prototype.draw.call(this,e),this.drawNeedle(e),this.drawValueLabel(e)}});return t.controllers.gauge=e,t.Gauge=(e,a)=>(a.type="gauge",new t(e,a)),t.Gauge}));
