(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-countdown', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-countdown'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    (function (CountdownStatus) {
        CountdownStatus[CountdownStatus["ing"] = 0] = "ing";
        CountdownStatus[CountdownStatus["pause"] = 1] = "pause";
        CountdownStatus[CountdownStatus["stop"] = 2] = "stop";
        CountdownStatus[CountdownStatus["done"] = 3] = "done";
    })(exports.CountdownStatus || (exports.CountdownStatus = {}));

    var CountdownTimer = /** @class */ (function () {
        function CountdownTimer(ngZone) {
            this.ngZone = ngZone;
            this.fns = [];
            this.commands = [];
            this.ing = false;
        }
        CountdownTimer.prototype.start = function () {
            var _this = this;
            if (this.ing === true)
                return;
            this.ing = true;
            this.nextTime = +new Date();
            this.ngZone.runOutsideAngular(function () {
                _this.process();
            });
        };
        CountdownTimer.prototype.process = function () {
            var _this = this;
            while (this.commands.length) {
                this.commands.shift()();
            }
            var diff = +new Date() - this.nextTime;
            var count = 1 + Math.floor(diff / 100);
            diff = 100 - (diff % 100);
            this.nextTime += 100 * count;
            for (var i = 0, len = this.fns.length; i < len; i += 2) {
                var frequency = this.fns[i + 1];
                // 100/s
                if (0 === frequency) {
                    this.fns[i](count);
                    // 1000/s
                }
                else {
                    // 先把末位至0，再每次加2
                    frequency += 2 * count - 1;
                    var step = Math.floor(frequency / 20);
                    if (step > 0) {
                        this.fns[i](step);
                    }
                    // 把末位还原成1
                    this.fns[i + 1] = (frequency % 20) + 1;
                }
            }
            if (!this.ing)
                return;
            setTimeout(function () { return _this.process(); }, diff);
        };
        CountdownTimer.prototype.add = function (fn, frequency) {
            var _this = this;
            this.commands.push(function () {
                _this.fns.push(fn);
                _this.fns.push(frequency === 1000 ? 1 : 0);
                _this.ing = true;
            });
            return this;
        };
        CountdownTimer.prototype.remove = function (fn) {
            var _this = this;
            this.commands.push(function () {
                var i = _this.fns.indexOf(fn);
                if (i !== -1) {
                    _this.fns.splice(i, 2);
                }
                _this.ing = _this.fns.length > 0;
            });
            return this;
        };
        CountdownTimer.ctorParameters = function () { return [
            { type: core.NgZone }
        ]; };
        CountdownTimer = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [core.NgZone])
        ], CountdownTimer);
        return CountdownTimer;
    }());

    var CountdownGlobalConfig = /** @class */ (function () {
        function CountdownGlobalConfig(locale) {
            var _this = this;
            this.locale = locale;
            this.demand = false;
            this.leftTime = 0;
            this.format = 'HH:mm:ss';
            this.timezone = '+0000';
            this.formatDate = function (_a) {
                var date = _a.date, formatStr = _a.formatStr, timezone = _a.timezone;
                return common.formatDate(new Date(date), formatStr, _this.locale, timezone || _this.timezone || '+0000');
            };
        }
        CountdownGlobalConfig.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }
        ]; };
        CountdownGlobalConfig.ɵprov = core["ɵɵdefineInjectable"]({ factory: function CountdownGlobalConfig_Factory() { return new CountdownGlobalConfig(core["ɵɵinject"](core.LOCALE_ID)); }, token: CountdownGlobalConfig, providedIn: "root" });
        CountdownGlobalConfig = __decorate([
            core.Injectable({ providedIn: 'root' }),
            __param(0, core.Inject(core.LOCALE_ID)),
            __metadata("design:paramtypes", [String])
        ], CountdownGlobalConfig);
        return CountdownGlobalConfig;
    }());

    var CountdownComponent = /** @class */ (function () {
        function CountdownComponent(locale, timer, defCog, cdr, ngZone) {
            this.locale = locale;
            this.timer = timer;
            this.defCog = defCog;
            this.cdr = cdr;
            this.ngZone = ngZone;
            this.frequency = 1000;
            this._notify = {};
            this._left = 0;
            this.status = exports.CountdownStatus.ing;
            this.isDestroy = false;
            this.i = {};
            this.event = new core.EventEmitter();
        }
        Object.defineProperty(CountdownComponent.prototype, "left", {
            get: function () {
                return this._left;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Start countdown, you must manually call when `demand: false`
         */
        CountdownComponent.prototype.begin = function () {
            this.status = exports.CountdownStatus.ing;
            this.callEvent('start');
        };
        /**
         * Restart countdown
         */
        CountdownComponent.prototype.restart = function () {
            if (this.status !== exports.CountdownStatus.stop) {
                this.destroy();
            }
            this.init();
            this.callEvent('restart');
        };
        /**
         * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover
         */
        CountdownComponent.prototype.stop = function () {
            if (this.status === exports.CountdownStatus.stop) {
                return;
            }
            this.status = exports.CountdownStatus.stop;
            this.destroy();
            this.callEvent('stop');
        };
        /**
         * Pause countdown, you can use `resume` to recover again
         */
        CountdownComponent.prototype.pause = function () {
            if (this.status === exports.CountdownStatus.stop || this.status === exports.CountdownStatus.pause)
                return;
            this.status = exports.CountdownStatus.pause;
            this.callEvent('pause');
        };
        /**
         * Resume countdown
         */
        CountdownComponent.prototype.resume = function () {
            if (this.status === exports.CountdownStatus.stop || this.status !== exports.CountdownStatus.pause)
                return;
            this.status = exports.CountdownStatus.ing;
            this.callEvent('resume');
        };
        CountdownComponent.prototype.callEvent = function (action) {
            this.event.emit({ action: action, left: this._left, status: this.status, text: this.i.text });
        };
        CountdownComponent.prototype.init = function () {
            var _this = this;
            var _a = this, locale = _a.locale, defCog = _a.defCog;
            var config = (this.config = __assign(__assign(__assign({}, new CountdownGlobalConfig(locale)), defCog), this.config));
            // tslint:disable-next-line: no-bitwise
            var frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);
            this.status = config.demand ? exports.CountdownStatus.pause : exports.CountdownStatus.ing;
            this.getLeft();
            // bind reflow to me
            var _reflow = this.reflow;
            this.reflow = function (count, force) {
                if (count === void 0) { count = 0; }
                if (force === void 0) { force = false; }
                return _reflow.apply(_this, [count, force]);
            };
            if (Array.isArray(config.notify)) {
                config.notify.forEach(function (time) {
                    if (time < 1)
                        throw new Error("The notify config must be a positive integer.");
                    time = time * 1000;
                    time = time - (time % frq);
                    _this._notify[time] = true;
                });
            }
            this.timer.add(this.reflow, frq).start();
            this.reflow(0, true);
        };
        CountdownComponent.prototype.destroy = function () {
            this.timer.remove(this.reflow);
            return this;
        };
        /**
         * 更新时钟
         */
        CountdownComponent.prototype.reflow = function (count, force) {
            var _this = this;
            if (count === void 0) { count = 0; }
            if (force === void 0) { force = false; }
            if (this.isDestroy)
                return;
            var _a = this, status = _a.status, config = _a.config, _notify = _a._notify;
            if (!force && status !== exports.CountdownStatus.ing)
                return;
            var value = (this._left = this._left - this.frequency * count);
            this.i = {
                value: value,
                text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),
            };
            if (typeof config.prettyText === 'function') {
                this.i.text = config.prettyText(this.i.text);
            }
            this.cdr.detectChanges();
            if (config.notify === 0 || _notify[value]) {
                this.ngZone.run(function () {
                    _this.callEvent('notify');
                });
            }
            if (value < 1) {
                this.ngZone.run(function () {
                    _this.status = exports.CountdownStatus.done;
                    _this.callEvent('done');
                    _this.destroy();
                });
            }
        };
        /**
         * 获取倒计时剩余帧数
         */
        CountdownComponent.prototype.getLeft = function () {
            var _a = this, config = _a.config, frequency = _a.frequency;
            var left = config.leftTime * 1000;
            var end = config.stopTime;
            if (!left && end) {
                left = end - new Date().getTime();
            }
            this._left = left - (left % frequency);
        };
        CountdownComponent.prototype.ngOnInit = function () {
            this.init();
            if (!this.config.demand) {
                this.begin();
            }
        };
        CountdownComponent.prototype.ngOnDestroy = function () {
            this.isDestroy = true;
            this.destroy();
        };
        CountdownComponent.prototype.ngOnChanges = function (changes) {
            if (!changes.config.firstChange) {
                this.restart();
            }
        };
        CountdownComponent.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] },
            { type: CountdownTimer },
            { type: CountdownGlobalConfig },
            { type: core.ChangeDetectorRef },
            { type: core.NgZone }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CountdownComponent.prototype, "config", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.TemplateRef)
        ], CountdownComponent.prototype, "render", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CountdownComponent.prototype, "event", void 0);
        CountdownComponent = __decorate([
            core.Component({
                selector: 'countdown',
                template: "\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  ",
                host: { '[class.count-down]': 'true' },
                encapsulation: core.ViewEncapsulation.None,
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __param(0, core.Inject(core.LOCALE_ID)),
            __metadata("design:paramtypes", [String, CountdownTimer,
                CountdownGlobalConfig,
                core.ChangeDetectorRef,
                core.NgZone])
        ], CountdownComponent);
        return CountdownComponent;
    }());

    var CountdownModule = /** @class */ (function () {
        function CountdownModule() {
        }
        CountdownModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                providers: [CountdownTimer],
                declarations: [CountdownComponent],
                exports: [CountdownComponent],
            })
        ], CountdownModule);
        return CountdownModule;
    }());

    exports.CountdownComponent = CountdownComponent;
    exports.CountdownGlobalConfig = CountdownGlobalConfig;
    exports.CountdownModule = CountdownModule;
    exports.CountdownTimer = CountdownTimer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-countdown.umd.js.map
