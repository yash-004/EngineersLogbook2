{"version":3,"sources":["./src/app/add-drive/add-drive.page.html","./src/app/add-drive/add-drive.module.ts","./src/app/add-drive/add-drive.page.scss","./src/app/add-drive/add-drive.page.ts"],"names":[],"mappings":"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","file":"add-drive-add-drive-module-es2015.js","sourcesContent":["export default \"<ion-header translucent>\\n  <ion-toolbar>\\n    <ion-title>Drive Details</ion-title>\\n  </ion-toolbar>\\n\\n</ion-header>\\n\\n<ion-content>\\n\\n  <form class=\\\"form\\\" [formGroup]=\\\"addDriveForm\\\" (submit)=\\\"addDrive(addDriveForm.value)\\\">\\n\\n    <ion-grid>\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Date</ion-label>\\n            <ion-datetime displayFormat=\\\"DD/MM/YYYY\\\" formControlName=\\\"date\\\"></ion-datetime>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.date\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"addDriveForm.get('date').hasError(validation.type) && (addDriveForm.get('date').dirty || addDriveForm.get('date').touched)\\\">\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n\\n      <ion-row>\\n        <ion-col>\\n          <ion-item >\\n            <ion-label position=\\\"floating\\\">Vehicle Number</ion-label>\\n            <ion-input onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"vehicleNumber\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleNumber\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"addDriveForm.get('vehicleNumber').hasError(validation.type) && (addDriveForm.get('vehicleNumber').dirty || addDriveForm.get('vehicleNumber').touched)\\\">\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Vehicle Type</ion-label>\\n            <ion-select formControlName=\\\"vehicleType\\\" interface=\\\"popover\\\">\\n              <ion-select-option text-wrap *ngFor=\\\"let vty of getapprovedvtypes()\\\" value={{vty}}>{{vty}}</ion-select-option>\\n            </ion-select>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleType\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"addDriveForm.get('vehicleType').hasError(validation.type) && (addDriveForm.get('vehicleType').dirty || addDriveForm.get('vehicleType').touched)\\\">\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n\\n      <ion-row>\\n        <ion-col>\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Vehicle Commander</ion-label>\\n            <ion-select formControlName=\\\"vehicleCommander\\\" interface=\\\"popover\\\">\\n              <ion-select-option *ngFor=\\\"let c of database.current.all_commanders_of_driver\\\" value={{c.email}}>{{c.name}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleCommander\\\">\\n              <div class=\\\"error-message\\\"\\n                *ngIf=\\\"addDriveForm.get('vehicleCommander').hasError(validation.type) && (addDriveForm.get('vehicleCommander').dirty || addDriveForm.get('vehicleCommander').touched)\\\">\\n                {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n\\n    <ion-card>\\n      <ion-card-content>\\n        <ion-item lines=\\\"none\\\" no-padding>\\n          <ion-icon name=\\\"pin\\\" size=\\\"large\\\" color=\\\"primary\\\"></ion-icon>\\n          <ion-label> Start Drive Details </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Location</ion-label>\\n          <ion-input type=\\\"text\\\" onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"startLocation\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startLocation\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('startLocation').hasError(validation.type) && (addDriveForm.get('startLocation').dirty || addDriveForm.get('startLocation').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Odometer</ion-label>\\n          <ion-input type=\\\"number\\\" inputmode=\\\"numeric\\\" formControlName=\\\"startOdometer\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startOdometer\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('startOdometer').hasError(validation.type) && (addDriveForm.get('startOdometer').dirty || addDriveForm.get('startOdometer').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Time</ion-label>\\n          <ion-datetime formControlName=\\\"startTime\\\" displayFormat=\\\"HH:mm\\\"></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startTime\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('startTime').hasError(validation.type) && (addDriveForm.get('startTime').dirty || addDriveForm.get('startTime').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n      </ion-card-content>\\n    </ion-card>\\n\\n    <ion-card *ngIf=(drive)>\\n      <ion-card-content>\\n        <ion-item lines=\\\"none\\\" no-padding>\\n          <ion-icon name=\\\"pin\\\" size=\\\"large\\\" color=\\\"success\\\"></ion-icon>\\n          <ion-label> End Drive Details </ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Location</ion-label>\\n          <ion-input type=\\\"text\\\" onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"endLocation\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endLocation\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('endLocation').hasError(validation.type) && (addDriveForm.get('endLocation').dirty || addDriveForm.get('endLocation').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Odometer</ion-label>\\n          <ion-input type=\\\"number\\\" inputmode=\\\"numeric\\\" formControlName=\\\"endOdometer\\\"></ion-input>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endOdometer\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('endOdometer').hasError(validation.type) && (addDriveForm.get('endOdometer').dirty || addDriveForm.get('endOdometer').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Time</ion-label>\\n          <ion-datetime formControlName=\\\"endTime\\\" displayFormat=\\\"HH:mm\\\"></ion-datetime>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endTime\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('endTime').hasError(validation.type) && (addDriveForm.get('endTime').dirty || addDriveForm.get('endTime').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label>Fuel Level</ion-label>\\n          <ion-range min='0' max='4' color=\\\"secondary\\\" step='1' formControlName=\\\"fuelLevel\\\">\\n            <ion-label slot=\\\"start\\\">empty</ion-label>\\n            <ion-label slot=\\\"end\\\">full</ion-label>\\n          </ion-range>\\n        </ion-item>\\n        <div class=\\\"validation-errors\\\">\\n          <ng-container *ngFor=\\\"let validation of validationMessages.fuelLevel\\\">\\n            <div class=\\\"error-message\\\"\\n              *ngIf=\\\"addDriveForm.get('fuelLevel').hasError(validation.type) && (addDriveForm.get('fuelLevel').dirty || addDriveForm.get('fuelLevel').touched)\\\">\\n              {{ validation.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item>\\n          <ion-label>Maintenance Drive</ion-label>\\n          <ion-toggle slot=\\\"start\\\" formControlName=\\\"maintenance\\\" (ionChange)=\\\"onToggle()\\\" [checked]=\\\"isToggled\\\"></ion-toggle>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label floating>Comments</ion-label>\\n          <ion-textarea onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"driveComments\\\"></ion-textarea>\\n        </ion-item>\\n      </ion-card-content>\\n    </ion-card>\\n   <ion-card *ngIf=(showStatus)>\\n      <ion-list>\\n      <ion-radio-group formControlName=\\\"driveStatus\\\">\\n        <ion-item>\\n          <ion-label>Verified Drive</ion-label>\\n          <ion-radio value='verified' formControlName='radioVerify'>Verified drive</ion-radio>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Reject Drive</ion-label>\\n          <ion-radio value='rejected' formControlName='radioReject'>Reject Drive</ion-radio>\\n        </ion-item>\\n      </ion-radio-group>\\n      </ion-list>\\n    </ion-card>\\n\\n    <div class=\\\"btn-wrapper\\\">\\n      <div *ngIf = showSubmit()>\\n        <ion-button class=\\\"submit-btn\\\" type=\\\"submit\\\" [disabled]=\\\"!addDriveForm.valid\\\" style=\\\"padding-right:10px\\\">Submit\\n        </ion-button>\\n        <ion-button (click)='onCancel()'>Cancel</ion-button>\\n      </div>\\n      <div *ngIf = !showSubmit()>\\n            <ion-button expand=\\\"block\\\" (click)='onCancel()'>OK</ion-button>\\n      </div>\\n    </div>\\n  </form>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AddDrivePage } from './add-drive.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AddDrivePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AddDrivePage]\n})\nexport class AddDrivePageModule {}\n","export default \"ion-input {\\n  text-transform: uppercase;\\n  color: primary !important;\\n}\\n\\nion-card-title {\\n  --color:--ion-color-primary-contrast-rgb;\\n}\\n\\n.btn-wrapper {\\n  text-align: center;\\n}\\n\\n.input[type=number] {\\n  -moz-appearance: textfield;\\n}\\n\\n.input[type=number]::-webkit-inner-spin-button {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95YXNoZGl4aXQvRGVza3RvcC9FbmdpbmVlcnNMb2dib29rMi9zcmMvYXBwL2FkZC1kcml2ZS9hZGQtZHJpdmUucGFnZS5zY3NzIiwic3JjL2FwcC9hZGQtZHJpdmUvYWRkLWRyaXZlLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTtFQUNFLHlCQUFBO0VBQ0EseUJBQUE7QUNKRjs7QURPQTtFQUNFLHdDQUFBO0FDSkY7O0FET0E7RUFDRSxrQkFBQTtBQ0pGOztBRFFBO0VBRUUsMEJBQUE7QUNORjs7QURLRTtFQUE4QixhQUFBO0FDRmhDIiwiZmlsZSI6InNyYy9hcHAvYWRkLWRyaXZlL2FkZC1kcml2ZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbioge1xuLy8gIG9wYWNpdHk6IDEgIWltcG9ydGFudDsgIC8vIGRpc2FibGVkIGl0ZW1zIHdpbGwgbm90IGJlIGdyZXkgb3V0LlxufVxuXG5pb24taW5wdXR7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiBwcmltYXJ5IWltcG9ydGFudDtcbn1cblxuaW9uLWNhcmQtdGl0bGV7XG4gIC0tY29sb3I6LS1pb24tY29sb3ItcHJpbWFyeS1jb250cmFzdC1yZ2I7XG59XG5cbi5idG4td3JhcHBlciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLy8gZG8gbm90IHNob3cgc3Bpbm5lciBmb3IgbnVtYmVyIGlucHV0c1xuLmlucHV0W3R5cGU9bnVtYmVyXSB7ICBcbiAgJjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbnsgZGlzcGxheTogbm9uZTsgfVxuICAtbW96LWFwcGVhcmFuY2U6dGV4dGZpZWxkO1xufSIsImlvbi1pbnB1dCB7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiBwcmltYXJ5ICFpbXBvcnRhbnQ7XG59XG5cbmlvbi1jYXJkLXRpdGxlIHtcbiAgLS1jb2xvcjotLWlvbi1jb2xvci1wcmltYXJ5LWNvbnRyYXN0LXJnYjtcbn1cblxuLmJ0bi13cmFwcGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uaW5wdXRbdHlwZT1udW1iZXJdIHtcbiAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG59XG4uaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcbiAgZGlzcGxheTogbm9uZTtcbn0iXX0= */\"","import { Component, OnInit, wtfStartTimeRange } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { NavController } from '@ionic/angular';\nimport { DatabaseService, Drive, VehicleTypes } from '../services/database.service';\nimport { ToastController } from '@ionic/angular';\nimport { ActivatedRoute } from '@angular/router';\nimport * as dayjs from 'dayjs'; // DateTime utility, See http://zetcode.com/javascript/dayjs/\n\n@Component({\n  selector: 'app-add-drive',\n  templateUrl: './add-drive.page.html',\n  styleUrls: ['./add-drive.page.scss'],\n})\n\nexport class AddDrivePage implements OnInit {\n\n  addDriveForm: FormGroup;\n  endDriveForm: FormGroup;\n  errorMessage = '';\n  successMessage = '';\n  toast: any;\n  today = new Date().toISOString();\n  drive;\n  updateStatus;\n  showStatus = true;\n  isToggled = false;\n  isDisabled;\n\n  validationMessages = {\n    date: [\n      { type: 'required', message: 'Date is required.' }],\n    vehicleNumber: [\n      { type: 'required', message: 'Vehicle Number is required.' },\n      { type: 'minlength', message: 'Vehicle number must be at least 5 characters long.' }\n    ],\n    vehicleType: [\n      { type: 'required', message: 'Select a type of vehicle' },\n    ],\n    vehicleCommander: [\n      { type: 'required', message: 'Select the Vehicle Commanders Name' },\n    ],\n    startLocation: [\n      { type: 'required', message: 'Enter starting location' },\n    ],\n    startOdometer: [\n      { type: 'required', message: 'Enter current Odometer value' },\n    ],\n    startTime: [\n      { type: 'required', message: 'Enter current Time' },\n    ],\n    endLocation: [\n      { type: 'required', message: 'Enter final location' },\n    ],\n    endOdometer: [\n      { type: 'required', message: 'Enter final Odometer value' },\n    ],\n    endTime: [\n      { type: 'required', message: 'Enter final Time' },\n    ],\n    fuelLevel: [\n      { type: 'required', message: 'Indicate final fuel level' },\n    ]\n  };\n\n  constructor(\n    private navCtrl: NavController,\n    private formBuilder: FormBuilder,\n    public toastController: ToastController,\n    public database: DatabaseService,\n    public route: ActivatedRoute\n  ) { }\n\n  public getapprovedvtypes(): string[] {\n        var vtypes =  VehicleTypes\n        if (this.database.current.user.mss_certified != true) {\n            vtypes = vtypes.filter( vtype => vtype != 'MSS');\n        }\n        if (this.database.current.user.flb_certified != true) {\n            vtypes = vtypes.filter( vtype => vtype != 'FLB');\n        }\n        if (this.database.current.user.belrex_certified != true) {\n            vtypes = vtypes.filter( vtype => vtype != 'BELREX');\n        return vtypes\n        }\n  }\n\n  ngOnInit() {\n    // Create form group of controls\n    this.addDriveForm = this.formBuilder.group({\n      date: new FormControl(this.today, Validators.compose([Validators.required])),\n      vehicleNumber: new FormControl('', Validators.compose([Validators.minLength(5), Validators.required])),\n      vehicleType: new FormControl('', Validators.compose([Validators.required])),\n      vehicleCommander: new FormControl('', Validators.compose([Validators.required])),\n      startLocation: new FormControl('', Validators.compose([Validators.required])),\n      startOdometer: new FormControl('', Validators.compose([Validators.required])),\n      startTime: new FormControl(this.today, Validators.compose([Validators.required])),\n      endLocation: new FormControl('', Validators.compose([Validators.required])),\n      endOdometer: new FormControl('', Validators.compose([Validators.required])),\n      endTime: new FormControl('', Validators.compose([Validators.required])),\n      maintenance: new FormControl(''),\n      fuelLevel: new FormControl('', Validators.compose([Validators.required])),\n      driveComments: new FormControl(''),\n      driveStatus: new FormControl(''),\n      radioVerify: new FormControl({ value: '', disabled: true }),\n      radioReject: new FormControl({ value: '', disabled: true })\n    });\n\n  //  this.updateStatus = false;\n  //  this.isDisabled = false;\n\n    // get the drive the user selected\n    this.drive = this.database.current.drive_to_edit;\n    if (this.drive != null) {\n      console.log('In add drive page: drive id:' + this.drive.id);\n    }\n    // Has gotten the info so reset drive_to_edit\n    this.database.current.drive_to_edit = null;\n\n    /* if user did not select any drive, ie user clicked on fab button,\n        check if there is an incompleted drive\n     */\n    if (this.drive == null) {\n      this.drive = this.database.current.drive_in_progress;\n    }\n    if (this.drive) {\n      console.log('drive status: ' + this.drive.status);\n      console.log('is commander: ' + this.database.current.user.is_commander);\n    }\n    if (this.drive == null) { // start a new drive\n      this.startDriveControls();\n      this.updateStatus = false;\n      this.isDisabled = false;\n      this.showStatus = false;\n    } else {  // retrieving an existing drive\n      if (this.database.current.user.is_admin) {\n        console.log('editing drive info - admin user');\n        this.editDriveControls();\n        this.updateStatus = true;\n        this.showStatus = true;\n        this.isDisabled = false;\n      } else if (this.drive.status === 'pending' || this.drive.status === 'verified' ||\n        ((this.drive.status === 'in-progress' || this.drive.status === 'rejected') &&\n          this.database.current.user.is_commander)) {\n        // view only\n        console.log('viewing a drive');\n        this.updateStatus = false;\n        this.showStatus = true;\n        this.isDisabled = true;\n        this.viewDriveControls();\n    } else if (this.drive.status === 'in-progress' && !this.database.current.user.is_commander) {\n        // driver enter details to complete drive\n        console.log('completing an in-progress drive - driver');\n        this.updateStatus = false;\n        this.isDisabled = false;\n        this.showStatus = false;\n        this.endDriveControls();\n      } else if ((this.drive.status === 'rejected' && !this.database.current.user.is_commander)) {\n        console.log('editing rejected drive info - driver')\n        // driver edit details for rejected drive\n        this.updateStatus = false;\n        this.showStatus = true;\n        this.isDisabled = false;\n        this.editDriveControls();\n      }\n    }\n  }\n\n  viewDriveControls()\n  {\n    this.addDriveForm.disable();\n //   this.isDisabled = this.addDriveForm.disabled;\n    console.log('form is disabled? ' + this.isDisabled);\n    console.log('update status? ' + this.updateStatus);\n    this.setStartDriveDetails();\n    this.setEndDriveDetails();\n    this.setDriveStatusControls();\n\n    // if commander and drive status is pending, add verified and reject controls\n    // else display ok button\n    if (this.database.current.user.is_commander && this.drive.status === 'pending') {\n      console.log('commander need to approve/reject drive');\n      this.updateStatus = true;\n      this.addDriveForm.get('driveStatus').setValidators(Validators.required);\n      this.addDriveForm.get('radioVerify').enable();\n      this.addDriveForm.get('radioReject').enable();\n    }\n    }\n\n  startDriveControls() {\n    this.addDriveForm.get('date').setValue(this.today);\n    this.addDriveForm.get('startTime').setValue(this.today);\n    // clear validators for end drive controls\n    this.addDriveForm.get('endLocation').clearValidators();\n    this.addDriveForm.get('endOdometer').clearValidators();\n    this.addDriveForm.get('endTime').clearValidators();\n    this.addDriveForm.get('fuelLevel').clearValidators();\n  }\n\n  endDriveControls() {\n    console.log('incomplete drive exist');\n    this.setStartDriveDetails();\n    // set end Time to current time\n    const time2 = dayjs(new Date(this.today)).format('HH:mm');\n    this.addDriveForm.get('endTime').setValue(time2);\n  }\n\n  editDriveControls() {\n    this.addDriveForm.reset();\n    this.setStartDriveDetails();\n    this.setEndDriveDetails();\n    this.setDriveStatusControls();\n  }\n\n  setStartDriveDetails() {\n    // Stage-1 details\n    // populate values of start drive fields\n    this.addDriveForm.get('date').setValue(this.drive.date);\n    this.addDriveForm.get('vehicleNumber').setValue(this.drive.vehicle.toUpperCase());\n    this.addDriveForm.get('vehicleType').setValue(this.drive.vehicle_type);\n    this.addDriveForm.get('vehicleCommander').setValue(this.drive.commander);\n    this.addDriveForm.get('startLocation').setValue(this.drive.start_location.toUpperCase());\n    this.addDriveForm.get('startOdometer').setValue(this.drive.start_odometer);\n    this.addDriveForm.get('startTime').setValue(this.drive.start_time);\n    console.log('start time: ' + this.addDriveForm.value.startTime);\n  }\n\n  setEndDriveDetails() {\n    // Stage-2 details\n    // populate values of end drive fields\n    this.addDriveForm.get('endLocation').setValue(this.drive.end_location.toUpperCase());\n    this.addDriveForm.get('endOdometer').setValue(this.drive.end_odometer);\n    this.addDriveForm.get('endTime').setValue(this.drive.end_time);\n    console.log('end time: ' +   this.addDriveForm.value.endTime);\n    this.addDriveForm.get('driveComments').setValue(this.drive.comments.toUpperCase());\n    // set the maintenance toggle to check\n    this.isToggled = this.drive.is_maintenance;\n  }\n\n  setDriveStatusControls() {\n    if (this.showStatus) {\n      this.addDriveForm.get('driveStatus').setValue(this.drive.status);\n    }\n  }\n\n  async endDrive(value) {\n    // added this check as end drive details can be saved despite missing info.\n    // check if all mandatory fields are entered\n    if (!this.addDriveForm.valid) {\n      this.errorMessage = 'Drive cannot be updated... missing end drive information.';\n      this.showToast(this.errorMessage);\n      console.log(this.errorMessage);\n      return;\n    }\n    try {\n      const currentDrive = this.database.current.drive_history[0];\n\n      // Stage 1 details : the user may made some changes to these info\n      currentDrive.start_location = this.addDriveForm.value.vehicleNumber.toUpperCase();\n      currentDrive.vehicle_type = this.addDriveForm.value.vehicleType;\n      currentDrive.commander =  this.addDriveForm.value.vehicleCommander;\n      currentDrive.date = (this.addDriveForm.value.date).split('T')[0];\n      currentDrive.start_location = this.addDriveForm.value.startLocation.toUpperCase();\n      currentDrive.start_odometer = parseInt(this.addDriveForm.value.startOdometer);\n      currentDrive.start_time = this.addDriveForm.value.startTime;\n      currentDrive.fleet = this.database.current.user.fleet;\n      currentDrive.company = this.database.current.user.company;\n\n      // Stage 2 details\n      currentDrive.end_location = this.addDriveForm.value.endLocation;\n      currentDrive.end_odometer = parseInt(this.addDriveForm.value.endOdometer);\n     // const time2 = dayjs(new Date(this.addDriveForm.value.endTime)).format('HH:mm');\n      currentDrive.end_time = this.addDriveForm.value.endTime;\n      // store the maintenance toggle checked value in the drive document\n      currentDrive.is_maintenance = this.isToggled;\n      currentDrive.fuel_level = parseInt(this.addDriveForm.value.fuelLevel);\n      console.log('Fuel level (UI): ' + currentDrive.fuel_level);\n\n      currentDrive.comments = this.addDriveForm.value.driveComments;\n      currentDrive.status = 'pending';\n      await this.database.write('drive', currentDrive.id, currentDrive);\n      this.errorMessage = '';\n      this.successMessage = 'Your drive has been updated.';\n      this.showToast(this.successMessage);\n      this.navCtrl.pop();\n    } catch (err) {\n      console.log(err);\n      this.errorMessage = 'Update drive error: ${err}';\n      this.successMessage = '';\n\n      this.showToast(this.errorMessage);\n      this.navCtrl.pop();\n    }\n  }\n\n  async addDrive(value) {\n    console.log('is Commander: ' + this.database.current.user.is_commander);\n    if (this.database.current.user.is_commander) {\n      // commander has verified/rejected drive, update drive status.\n      this.drive.status = this.addDriveForm.get('driveStatus').value;\n      console.log('Drive status: ' + this.drive.status);\n      // update status in database\n      await this.database.write('drive', this.drive.id, this.drive);\n      this.errorMessage = '';\n      this.successMessage = 'The drive status has been updated successfully.';\n      this.showToast(this.successMessage);\n      this.navCtrl.pop();\n\n    } else if (this.database.current.drive_in_progress != null || this.drive != null) {\n      // the submit is to complete the drive information\n      console.log('Updating start and end drive details...');\n      this.endDrive(value);\n    } else { // the submit is to capture start drive information\n      try {\n        const time = dayjs(new Date(this.addDriveForm.value.startTime)).format('HH:mm');\n        var new_drive: Drive = {\n          created: this.database.getTimeStamp(),\n          driver: this.database.current.user.email,\n          status: \"in-progress\",\n\n          // Stage-1 details\n          vehicle: this.addDriveForm.value.vehicleNumber.toUpperCase(),\n          vehicle_type: this.addDriveForm.value.vehicleType,\n          commander: this.addDriveForm.value.vehicleCommander,\n          date: (this.addDriveForm.value.date).split('T')[0],\n          start_location: this.addDriveForm.value.startLocation.toUpperCase(),\n          start_odometer: parseInt(this.addDriveForm.value.startOdometer),\n          start_time: time,\n          fleet: this.database.current.user.fleet,\n          company: this.database.current.user.company\n\n        };\n        console.log('new_drive=${JSON.stringify(new_drive)}');\n        await this.database.add('drive', new_drive);\n\n        this.errorMessage = '';\n        this.successMessage = 'Your drive has been added.';\n\n        this.showToast(this.successMessage);\n        this.navCtrl.pop();\n\n      } catch (err) {\n\n        this.errorMessage = `Add drive error: ${err}`;\n        this.successMessage = '';\n\n        this.showToast(this.errorMessage);\n        this.navCtrl.pop();\n      }\n    }\n  }\n\n  showToast(msg) {\n    this.toastController.create({\n      message: msg,\n      duration: 2000,\n      //  showCloseButton: true,\n      //  closeButtonText: 'OK',\n      position: 'middle'\n    }).then((obj) => {\n      obj.present();\n    });\n  }\n\n  onCancel() {\n    this.navCtrl.pop();\n  }\n\n  onToggle() {\n    //console.log(\"initial state - toggled: \" + this.isToggled);\n    if (this.isToggled) { this.isToggled = false; } else { this.isToggled = true; }\n    //console.log(\"final state - toggled: \" + this.isToggled);\n  }\n\n  showSubmit() {\n    if (this.updateStatus || !this.isDisabled) { return true; }\n    return false;\n  }\n}\n"],"sourceRoot":"webpack:///"}