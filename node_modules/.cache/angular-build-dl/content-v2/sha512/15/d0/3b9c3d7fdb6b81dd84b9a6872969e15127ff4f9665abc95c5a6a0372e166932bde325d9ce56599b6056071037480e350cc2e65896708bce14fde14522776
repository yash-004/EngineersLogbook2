(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["mtrac-mtrac-module"],{

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/mtrac/mtrac.page.html":
/*!*****************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/mtrac/mtrac.page.html ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ion-header translucent>\n  <ion-toolbar>\n    <h1 style=\"margin-left: 10px;\"><strong>MT RISK ASSESSMENT CHECKLIST (MT-RAC)</strong></h1>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div>\n    <h5 style=\"margin-left: 10px;\"><strong><u>ABOUT THE MT RAC FORM</u></strong><br></h5>\n    <h6 style=\"margin-left: 10px;\">It enables the drivers / riders to assess the risk level involved in their driving / riding detail. It allows the drivers / riders to make an informed decision as to whether to carry on with the detail.</h6>\n  </div>\n    <ion-item lines=\"none\" no-padding>\n    <ion-grid style=\"margin-left: 5px;\">\n      <ion-row class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>FACTORS</strong></h5>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>MEANING</strong></h5>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h6 style=\"text-align:center\">MAN</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h6 style=\"text-align:left\">This refers to the driver / rider and in particular his driving / riding experience and accident record.<br>How well he has rested before the detail is also important.</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h6 style=\"text-align:center\">MACHINE</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h6 style=\"text-align:left\">This refers to the condition of the vehicle / motorcycle, which they are handling on the road.<br>A faulty vehicle / motorcycle will heighten the risk level.</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h6 style=\"text-align:center\">MISSION</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h6 style=\"text-align:left\">This type of transport detail will have an effect on the risk level.<br>An administrative detail will have less risk than a training detail, which requires them to drive / ride in difficult cross-country terrain.</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h6 style=\"text-align:center\">MEDIUM</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h6 style=\"text-align:left\">This refers mainly to the road conditions under which the driver / rider operates.<br>Their prevailing conditions will have a direct effect on the driver / rider.</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col size=\"2\">\n          <div>\n            <h6 style=\"text-align:center\">MANAGEMENT</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px\">\n          <div>\n            <h6 style=\"text-align:left\">Close supervision of the driver / rider will contribute to risk minimisation.<br>Assignment of Vehicle Commander of a high rank will have a psychological effect on the driver to do better.</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-item>\n\n  <ion-item lines=\"none\" no-padding>\n    <ion-grid style=\"margin-left: 5px;\">\n      <ion-row>\n        <ion-col class=\"cell-class\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>RISK LEVEL</strong></h5>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col>\n          <div>\n            <h5 style=\"text-align:center\"><strong>LOW RISK</strong></h5>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px;\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>MEDIUM RISK</strong></h5>\n          </div>\n        </ion-col>\n        <ion-col>\n          <div>\n            <h5 style=\"text-align:center\"><strong>HIGH RISK</strong></h5>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row align-items-center class=\"cell-class\">\n        <ion-col>\n          <div>\n            <h6 style=\"text-align:center\">Normal operational risk.</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\" style=\"margin-left : -1px;\">\n          <div>\n            <h6 style=\"text-align:center\">Above normal operational risk level.<br>Increase supervision, briefing and exercise caution, Mission may be suspended till conditions are better.</h6>\n          </div>\n        </ion-col>\n        <ion-col>\n          <div>\n            <h6 style=\"text-align:center\">Do not proceed with mission unless approved by higher authorities.<br><strong>All high risk factors must be mitigated.</strong></h6>\n          </div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-item>\n\n  <ion-item lines=\"none\" no-padding>\n    <ion-grid style=\"margin-left: 5px;\">\n      <ion-row class=\"cell-class\">\n        <ion-col>\n          <div>\n            <h5 style=\"text-align:center\"><strong>List of Common Vehicle Defects</strong></h5>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row class=\"cell-class\">\n        <ion-col class=\"cell-class\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>Major Defects</strong></h5>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\">\n          <div>\n            <h5 style=\"text-align:center\"><strong>Minor Defects</strong></h5>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ion-row class=\"cell-class\">\n        <ion-col class=\"cell-class\">\n          <div>\n            <h6 style=\"text-align:left\">- Emitting black or white smoke<br>\n              - Exhaust silencer leaking<br>\n              - Speedometer not working<br>\n              - Horn not working<br>\n              - Signal Indicator not working<br>\n              - Brake light not working<br>\n              - Headlights not working<br>\n              - Tail lights not working<br>\n              - No Mirrors / <strong>Loose mirror</strong> / <strong>Blurred mirror</strong><br>\n              - Windscreen shattered / crack<br>\n              - Wiper not working<br>\n              - Unusual noise or vibration from engine<br>\n              - Brakes not effective<br>\n              - Engine oil level below the minimum level, exceed maximum level<br>\n              - Bald tyre<br>\n              - Door not closing properly<br>\n              - Radiator water leaking<br>\n              - Speed Warning Device not working<br>\n              - Unserviceable Front/Rear (Safety Belt)<br>\n              - Unserviceable Safety strap<br>\n              - Pintle securing pin missing (Not fit for towing)</h6>\n          </div>\n        </ion-col>\n        <ion-col class=\"cell-class\">\n          <div>\n            <h6 style=\"text-align:left\">- Weak batteries<br>\n              - Battery water too low<br>\n              - Temperature gauge and other panel gauges not working<br>\n              - Incorrect tyre pressure<br>\n              - Vehicle body dented<br>\n              - Superstructure damaged or broken<br>\n              - Canopy torn<br>\n              - Tailboard strap missing<br>\n              - No self-centering (Steering system)<br>\n              - Steering free-play too much<br>\n              - Fan belt worn or slacked<br>\n              - Weak suspension coil spring<br>\n              - Towing pin missing (Not fit for towing)<br>\n              - Pintle securing pin missing (Not fit for towing) to major fault</h6>\n          </div>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-item>\n  <div>\n    <h5 style=\"margin-left: 10px;\"><strong><u>Briefing and ensuring notes for TO/ DV/ LOA Drivers</u></strong><br></h5>\n\n    <h6 style=\"margin-left: 10px;\"><ol type=\"a\">\n      <li>Check and ensure seating capacity, if exceeds (Please do not proceed on with the detail)</li>\n      <li>Brief troops to engage seat belt throughout the journey</li>\n      <li>Assist the troops in engaging the safety straps. Safety straps are to be engaged throughout the journey.</li>\n      <li>Brief \"no smoking / sleeping on vehicle\" throughout the journey</li>\n      <li>Nobody is to move while the vehicle is on the move</li>\n      <li>No sitting on the tailboard at all times</li>\n    </ol></h6>\n\n    <h5 style=\"margin-left: 10px;\"><strong>* For any matters please seek vehicle commander's assistance</strong><br></h5>\n\n    <h5 style=\"text-align:center;\"><strong><u>MT RISK ASSESSMENT CHECKLIST (MT-RAC)</u></strong></h5>\n    <ion-grid style=\"margin-left: 5px;\"><ion-row class=\"cell-class\">\n      <h6 style=\"margin-left: 10px;\">The MT-RAC form is an assessment of the 5-M Risk Factors and identified high risk factors are to be mitigated. All SAF Drivers are to fill up the MT-RAC form, and completed forms are to be kept by the MT Node for 3 working days or in the event of an accident, until the investigation is completed. A MT-RAC form is to be completed for every transport detail, or when there is a change in the conditions or nature of detail. For exercises/training, a MT-RAC is prepared at the start of each exercise, and updated  if there is a change in conditions.</h6>\n    </ion-row></ion-grid></div>\n\n  <form class=\"form\" [formGroup]=\"mtracForm\" (submit)=\"addmtrac(mtracForm.value)\">\n  <ion-card><ion-card-content>\n    <ion-item>\n      <ion-label color=\"light\" position=\"floating\">driving area</ion-label>\n      <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"incamp\" interface=\"popover\" value=\"true\" (ionChange)=\"setincamp()\">\n        <ion-select-option [ngStyle]=\"{'color': 'black'}\" text-wrap value=true>In Camp</ion-select-option>\n        <ion-select-option [ngStyle]=\"{'color': 'black'}\" text-wrap value=false *ngIf=\"gettime()\">Out of Camp</ion-select-option>\n      </ion-select>\n    </ion-item>\n\n    <ion-item *ngIf=\"!getincamp()\">\n      <ion-label color=\"light\" position=\"floating\" >To</ion-label>\n      <ion-input [ngStyle]=\"{'color': 'black'}\" type=\"text\" onkeyup=\"this.value = this.value.toUpperCase()\"></ion-input>\n      <ion-label color=\"light\" position=\"floating\">From</ion-label>\n      <ion-input [ngStyle]=\"{'color': 'black'}\" type=\"text\" onkeyup=\"this.value = this.value.toUpperCase()\"></ion-input>\n    </ion-item>\n\n    <ion-item>\n      <ion-col><ion-item>\n        <ion-label color=\"light\" position=\"floating\" color=\"light\">Vehicle Number</ion-label>\n        <ion-input [ngStyle]=\"{'color': 'black'}\" onkeyup=\"this.value = this.value.toUpperCase()\" formControlName=\"vehicleNumber\"></ion-input>\n      </ion-item>\n      <div class=\"validation-errors\">\n        <ng-container *ngFor=\"let validation of validationMessages.vehicleNumber\">\n          <div class=\"error-message\" *ngIf=\"mtracForm.get('vehicleNumber').hasError(validation.type) && (mtracForm.get('vehicleNumber').dirty || mtracForm.get('vehicleNumber').touched)\">\n            {{ validation.message }}\n          </div>\n        </ng-container>\n      </div>\n      </ion-col></ion-item>\n  </ion-card-content></ion-card>\n\n  <ion-card>\n    <ion-card-title text-center>MAN FACTORS</ion-card-title>\n    <ion-card-content>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Driving Experience</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"licenceType\" interface=\"popover\">\n          <ion-select-option text-wrap value=\"L\">CAT A, B</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">CAT C</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">CAT D</ion-select-option>\n          <ion-select-option text-wrap value=\"N\">Have never been trained and familiarized in the vehicle that you will be driving</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.licenceType\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('licenceType').hasError(validation.type) && (mtracForm.get('licenceType').dirty || mtracForm.get('licenceType').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Vehicle Type</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\" color=\"light\" formControlName=\"vehicleType\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">Same as last detail / Different (GP Car/Pickup)</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">Different (MUV/OUV/JEEP)</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Different (Coach/3Ton/5Ton/7Ton)</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.vehicleType\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('vehicleType').hasError(validation.type) && (mtracForm.get('vehicleType').dirty || mtracForm.get('vehicleType').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Fatigue/Length of Rest</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"rest\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">More than 6 hours</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">Less than 6 hours (Home/Camp)</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Less than 6 hours (Field)</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.rest\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('rest').hasError(validation.type) && (mtracForm.get('rest').dirty || mtracForm.get('rest').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>My Health</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"health\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">Good</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">Fair (Just recovered from illness < 1 day)</ion-select-option>\n          <ion-select-option text-wrap value=\"N\">Poor (Still ill or Attend C) / Still under medication that causes drowsiness</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.health\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('health').hasError(validation.type) && (mtracForm.get('health').dirty || mtracForm.get('health').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n    </ion-card-content></ion-card>\n\n  <ion-card>\n    <ion-card-title text-center>MEDIUM FACTORS</ion-card-title>\n    <ion-card-content>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Weather</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"weather\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">Dry</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">Wet</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Heavy showers</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.weather\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('weather').hasError(validation.type) && (mtracForm.get('weather').dirty || mtracForm.get('weather').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Route Familiarity</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"route\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">Familiar</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Not Familiar</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.route\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('route').hasError(validation.type) && (mtracForm.get('route').dirty || mtracForm.get('route').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n    </ion-card-content></ion-card>\n\n  <ion-card>\n    <ion-card-title text-center>MISSION FACTORS</ion-card-title>\n    <ion-card-content>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Detail Type</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"detailType\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">Admin</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">Training/Special mission oriented towing vehicle/gun</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Occasional towing trailer/vehicle/gun</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.detailType\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('detailType').hasError(validation.type) && (mtracForm.get('detailType').dirty || mtracForm.get('detailType').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n    </ion-card-content></ion-card>\n\n  <ion-card>\n    <ion-card-title text-center>MANAGEMENT FACTORS</ion-card-title>\n    <ion-card-content>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Without Vehicle Commander</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"vc\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">CAT A, B</ion-select-option>\n          <ion-select-option text-wrap value=\"M\">CAT C</ion-select-option>\n          <ion-select-option text-wrap value=\"N\">CAT D</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.vc\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('vc').hasError(validation.type) && (mtracForm.get('vc').dirty || mtracForm.get('vc').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n    </ion-card-content></ion-card>\n\n  <ion-card>\n    <ion-card-title text-center>MACHINE FACTORS</ion-card-title>\n    <ion-card-content>\n      <ion-col><ion-item>\n        <ion-label color=\"light\"><strong>Vehicle Serviceability</strong></ion-label>\n        <ion-select [ngStyle]=\"{'color': 'black'}\"color=\"light\" formControlName=\"vehicleServiceability\" interface=\"popover\" text-wrap>\n          <ion-select-option text-wrap value=\"L\">No fault</ion-select-option>\n          <ion-select-option text-wrap value=\"H\">Minor fault</ion-select-option>\n          <ion-select-option text-wrap value=\"N\">Major fault</ion-select-option>\n        </ion-select></ion-item>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.vehicleServiceability\">\n            <div class=\"error-message\"\n                 *ngIf=\"mtracForm.get('vehicleServiceability').hasError(validation.type) && (mtracForm.get('vehicleServiceability').dirty || mtracForm.get('vehicleServiceability').touched)\">\n              {{ validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-col>\n    </ion-card-content></ion-card>\n\n    <ion-card>\n      <ion-card-title text-center>OVERALL RISK LEVEL</ion-card-title>\n      <ion-card-content>\n        <ion-item *ngIf=\"!getoverallrisk()\" color=\"danger\" text-center>\n          <ion-label color=\"light\">\n            NO MOVE\n          </ion-label>\n        </ion-item>\n        <ion-item *ngIf=\"getoverallrisk()=='HIGH'\" color=\"danger\" text-center>\n          <ion-label color=\"light\">\n            {{getoverallrisk()}}\n          </ion-label>\n        </ion-item>\n        <ion-item *ngIf=\"getoverallrisk()=='MEDIUM'\" color=\"warning\" text-center>\n          <ion-label color=\"light\">\n            {{getoverallrisk()}}\n          </ion-label>\n        </ion-item>\n        <ion-item  *ngIf=\"getoverallrisk()=='LOW'\" color=\"success\" text-center>\n          <ion-label color=\"light\">\n            {{getoverallrisk()}}\n          </ion-label>\n        </ion-item>\n      </ion-card-content>\n    </ion-card>\n<!--\n\n    <div class=\"btn-wrapper\">\n      <div *ngIf = showSubmit()>\n        <ion-button class=\"submit-btn\" type=\"submit\" routerLink=\"/add-drive\" [disabled]=\"!mtracForm.valid\" style=\"padding-right:10px\">Submit\n        </ion-button>\n        <ion-button (click)='onCancel()'>Cancel</ion-button>\n      </div>\n      <div *ngIf = !showSubmit()>\n        <ion-button expand=\"block\" (click)='onCancel()'>OK</ion-button>\n      </div>\n    </div>\n\n-->\n  </form>\n  <ion-item>\n    <ion-label color=\"light\" text-wrap>I acknowledge that I have read through, understood, and checked through the MT-RAC.</ion-label>\n    <ion-checkbox slot=\"start\" name=\"mtrac\" (ionChange)=\"setcheckboxstatus()\"></ion-checkbox>\n  </ion-item>\n  <div class=\"btn-wrapper\">\n    <div *ngIf=getcheckboxstatus()>\n      <ion-button style=\"padding-right:10px\" routerLink=\"/add-drive\" [disabled]=\"!mtracForm.valid || getoverallrisk()==false\">Continue</ion-button>\n      <ion-button (click)='onCancel()'>Cancel</ion-button>\n    </div>\n    <div *ngIf = !getcheckboxstatus()>\n      <ion-button expand=\"block\" (click)='onCancel()'>Cancel</ion-button>\n    </div>\n  </div>\n</ion-content>");

/***/ }),

/***/ "./src/app/mtrac/mtrac.module.ts":
/*!***************************************!*\
  !*** ./src/app/mtrac/mtrac.module.ts ***!
  \***************************************/
/*! exports provided: mtracPageModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mtracPageModule", function() { return mtracPageModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var _mtrac_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mtrac.page */ "./src/app/mtrac/mtrac.page.ts");







const routes = [
    {
        path: '',
        component: _mtrac_page__WEBPACK_IMPORTED_MODULE_6__["mtracPage"]
    }
];
let mtracPageModule = class mtracPageModule {
};
mtracPageModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _ionic_angular__WEBPACK_IMPORTED_MODULE_5__["IonicModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"].forChild(routes)
        ],
        declarations: [_mtrac_page__WEBPACK_IMPORTED_MODULE_6__["mtracPage"]]
    })
], mtracPageModule);



/***/ }),

/***/ "./src/app/mtrac/mtrac.page.scss":
/*!***************************************!*\
  !*** ./src/app/mtrac/mtrac.page.scss ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("@charset \"UTF-8\";\n* {\n  –ion-background-color: #FFFF66;\n}\nion-content {\n  --ion-background-color:#FFFF66;\n  --color:black;\n}\nion-card {\n  --background:#FFFF66;\n}\nion-item {\n  --background:#FFFF66;\n}\nion-grid {\n  --background:#FFFF66;\n}\nion-input {\n  text-transform: uppercase;\n  color: primary !important;\n}\nion-card-title {\n  --color:black;\n}\nion-select {\n  --placeholder-color:black;\n  --color:black;\n}\nion-label {\n  --color:black;\n}\n.btn-wrapper {\n  text-align: center;\n}\n.input[type=number] {\n  -moz-appearance: textfield;\n}\n.input[type=number]::-webkit-inner-spin-button {\n  display: none;\n}\n.toolbar-title {\n  text-overflow: inherit;\n  white-space: normal;\n  text-align: left;\n  font-size: 1.3em;\n}\n.cell-class {\n  border-color: black;\n  border-width: 0.01em;\n  border-style: solid;\n}\n.row {\n  height: 100%;\n}\n.col {\n  height: 100%;\n  border: solid black;\n}\n.sc-ion-popover-md-h {\n  min-width: auto;\n  min-height: auto;\n  max-width: 100%;\n  height: 50%;\n}\n.popover-content.sc-ion-popover-md {\n  position: inherit;\n  min-width: auto;\n  max-width: 100%;\n  height: auto;\n  min-height: auto;\n  max-height: 100%;\n}\ndiv {\n  color: black;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbXRyYWMvbXRyYWMucGFnZS5zY3NzIiwiL1VzZXJzL21vamF2ZS9EZXNrdG9wL0VuZ2luZWVyc0xvZ2Jvb2syL3NyYy9hcHAvbXRyYWMvbXRyYWMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQ0FoQjtFQUVJLDhCQUFBO0FEQ0o7QUNFQTtFQUNFLDhCQUFBO0VBQ0EsYUFBQTtBRENGO0FDRUE7RUFDRSxvQkFBQTtBRENGO0FDRUE7RUFDRSxvQkFBQTtBRENGO0FDRUE7RUFDRSxvQkFBQTtBRENGO0FDRUE7RUFDRSx5QkFBQTtFQUNBLHlCQUFBO0FEQ0Y7QUNFQTtFQUNFLGFBQUE7QURDRjtBQ0VBO0VBQ0UseUJBQUE7RUFDQSxhQUFBO0FEQ0Y7QUNFQTtFQUNFLGFBQUE7QURDRjtBQ0VBO0VBQ0Usa0JBQUE7QURDRjtBQ0dBO0VBRUUsMEJBQUE7QURERjtBQ0FFO0VBQThCLGFBQUE7QURHaEM7QUNDQTtFQUNHLHNCQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLGdCQUFBO0FERUg7QUNDQTtFQUNFLG1CQUFBO0VBQ0Esb0JBQUE7RUFDQSxtQkFBQTtBREVGO0FDQ0E7RUFFRSxZQUFBO0FEQ0Y7QUNFQTtFQUNFLFlBQUE7RUFDQSxtQkFBQTtBRENGO0FDRUE7RUFDSSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0VBQ0EsV0FBQTtBRENKO0FDRUE7RUFDSSxpQkFBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7QURDSjtBQ0VBO0VBQ0ksWUFBQTtBRENKIiwiZmlsZSI6InNyYy9hcHAvbXRyYWMvbXRyYWMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuKiB7XG4gIOKAk2lvbi1iYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRjY2O1xufVxuXG5pb24tY29udGVudCB7XG4gIC0taW9uLWJhY2tncm91bmQtY29sb3I6I0ZGRkY2NjtcbiAgLS1jb2xvcjpibGFjaztcbn1cblxuaW9uLWNhcmQge1xuICAtLWJhY2tncm91bmQ6I0ZGRkY2Njtcbn1cblxuaW9uLWl0ZW0ge1xuICAtLWJhY2tncm91bmQ6I0ZGRkY2Njtcbn1cblxuaW9uLWdyaWQge1xuICAtLWJhY2tncm91bmQ6I0ZGRkY2Njtcbn1cblxuaW9uLWlucHV0IHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgY29sb3I6IHByaW1hcnkgIWltcG9ydGFudDtcbn1cblxuaW9uLWNhcmQtdGl0bGUge1xuICAtLWNvbG9yOmJsYWNrO1xufVxuXG5pb24tc2VsZWN0IHtcbiAgLS1wbGFjZWhvbGRlci1jb2xvcjpibGFjaztcbiAgLS1jb2xvcjpibGFjaztcbn1cblxuaW9uLWxhYmVsIHtcbiAgLS1jb2xvcjpibGFjaztcbn1cblxuLmJ0bi13cmFwcGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uaW5wdXRbdHlwZT1udW1iZXJdIHtcbiAgLW1vei1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG59XG4uaW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRvb2xiYXItdGl0bGUge1xuICB0ZXh0LW92ZXJmbG93OiBpbmhlcml0O1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBmb250LXNpemU6IDEuM2VtO1xufVxuXG4uY2VsbC1jbGFzcyB7XG4gIGJvcmRlci1jb2xvcjogYmxhY2s7XG4gIGJvcmRlci13aWR0aDogMC4wMWVtO1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xufVxuXG4ucm93IHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4uY29sIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXI6IHNvbGlkIGJsYWNrO1xufVxuXG4uc2MtaW9uLXBvcG92ZXItbWQtaCB7XG4gIG1pbi13aWR0aDogYXV0bztcbiAgbWluLWhlaWdodDogYXV0bztcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDUwJTtcbn1cblxuLnBvcG92ZXItY29udGVudC5zYy1pb24tcG9wb3Zlci1tZCB7XG4gIHBvc2l0aW9uOiBpbmhlcml0O1xuICBtaW4td2lkdGg6IGF1dG87XG4gIG1heC13aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiBhdXRvO1xuICBtaW4taGVpZ2h0OiBhdXRvO1xuICBtYXgtaGVpZ2h0OiAxMDAlO1xufVxuXG5kaXYge1xuICBjb2xvcjogYmxhY2s7XG59IiwiKiB7XG4vLyAgb3BhY2l0eTogMSAhaW1wb3J0YW50OyAgLy8gZGlzYWJsZWQgaXRlbXMgd2lsbCBub3QgYmUgZ3JleSBvdXQuXG4gICAg4oCTaW9uLWJhY2tncm91bmQtY29sb3I6I0ZGRkY2Njtcbn1cblxuaW9uLWNvbnRlbnR7XG4gIC0taW9uLWJhY2tncm91bmQtY29sb3I6I0ZGRkY2NjtcbiAgLS1jb2xvcjpibGFjaztcbn1cblxuaW9uLWNhcmR7XG4gIC0tYmFja2dyb3VuZDojRkZGRjY2O1xufVxuXG5pb24taXRlbXtcbiAgLS1iYWNrZ3JvdW5kOiNGRkZGNjY7XG59XG5cbmlvbi1ncmlke1xuICAtLWJhY2tncm91bmQ6I0ZGRkY2Njtcbn1cblxuaW9uLWlucHV0e1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogcHJpbWFyeSFpbXBvcnRhbnQ7XG59XG5cbmlvbi1jYXJkLXRpdGxle1xuICAtLWNvbG9yOmJsYWNrO1xufVxuXG5pb24tc2VsZWN0e1xuICAtLXBsYWNlaG9sZGVyLWNvbG9yOmJsYWNrO1xuICAtLWNvbG9yOmJsYWNrO1xufVxuXG5pb24tbGFiZWx7XG4gIC0tY29sb3I6YmxhY2s7XG59XG5cbi5idG4td3JhcHBlciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLy8gZG8gbm90IHNob3cgc3Bpbm5lciBmb3IgbnVtYmVyIGlucHV0c1xuLmlucHV0W3R5cGU9bnVtYmVyXSB7ICBcbiAgJjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbnsgZGlzcGxheTogbm9uZTsgfVxuICAtbW96LWFwcGVhcmFuY2U6dGV4dGZpZWxkO1xufVxuXG4udG9vbGJhci10aXRsZSB7XG4gICB0ZXh0LW92ZXJmbG93OiBpbmhlcml0O1xuICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICBmb250LXNpemU6MS4zZW07XG59XG5cbi5jZWxsLWNsYXNzIHtcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcbiAgYm9yZGVyLXdpZHRoOiAuMDFlbTtcbiAgYm9yZGVyLXN0eWxlOnNvbGlkO1xufVxuXG4ucm93IHtcbiAgLy8gRm9yY2UgZ3JpZCB0byBmaWxsIGhlaWdodCBvZiBjb250ZW50IGFzIHRoaXMgaXMgbm90IHNldCBieSBkZWZhdWx0XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLmNvbHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXI6IHNvbGlkIGJsYWNrO1xufVxuXG4uc2MtaW9uLXBvcG92ZXItbWQtaCB7XG4gICAgbWluLXdpZHRoOiBhdXRvO1xuICAgIG1pbi1oZWlnaHQ6IGF1dG87XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogNTAlO1xufVxuXG4ucG9wb3Zlci1jb250ZW50LnNjLWlvbi1wb3BvdmVyLW1kIHtcbiAgICBwb3NpdGlvbjogaW5oZXJpdDtcbiAgICBtaW4td2lkdGg6IGF1dG87XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBtaW4taGVpZ2h0OiBhdXRvO1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG59XG5cbmRpdntcbiAgICBjb2xvcjogYmxhY2s7XG59Il19 */");

/***/ }),

/***/ "./src/app/mtrac/mtrac.page.ts":
/*!*************************************!*\
  !*** ./src/app/mtrac/mtrac.page.ts ***!
  \*************************************/
/*! exports provided: mtracPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mtracPage", function() { return mtracPage; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ "./node_modules/@ionic/angular/dist/fesm5.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");







let mtracPage = class mtracPage {
    constructor(navCtrl, formBuilder, toastController, database, route) {
        this.navCtrl = navCtrl;
        this.formBuilder = formBuilder;
        this.toastController = toastController;
        this.database = database;
        this.route = route;
        this.errorMessage = '';
        this.successMessage = '';
        this.today = new Date().toISOString();
        this.checkboxstatus = false;
        this.enableloc = true;
        this.validationMessages = {
            date: [
                { type: 'required', message: 'Date is required.' }
            ],
            vehicleNumber: [
                { type: 'required', message: 'Vehicle Number is required.' },
                { type: 'minlength', message: 'Vehicle number must be at least 5 characters long.' }
            ],
            location: [
                { type: 'required', message: 'Enter starting location' },
            ],
            time: [
                { type: 'required', message: 'Enter current time' },
            ],
            licenceType: [
                { type: 'required', message: 'choose licence type' },
            ],
            rest: [
                { type: 'required', message: 'choose rest' },
            ],
            health: [
                { type: 'required', message: 'choose health' },
            ],
            weather: [
                { type: 'required', message: 'choose weather' },
            ],
            route: [
                { type: 'required', message: 'choose route' },
            ],
            detailType: [
                { type: 'required', message: 'choose detail type' },
            ],
            vc: [
                { type: 'required', message: 'choose vc' },
            ],
            vehicleServiceability: [
                { type: 'required', message: 'choose vehicle serviceability' },
            ],
        };
    }
    ngOnInit() {
        this.mtracForm = this.formBuilder.group({
            vehicleNumber: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].minLength(5), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            licenceType: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            vehicleType: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            rest: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            health: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            weather: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            route: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            detailType: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            vc: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            vehicleServiceability: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required])),
            incamp: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"](''),
        });
    }
    setcheckboxstatus() {
        this.checkboxstatus = !this.checkboxstatus;
    }
    getcheckboxstatus() {
        return this.checkboxstatus;
    }
    gettime() {
        var cd = new Date(); // for now
        var nmtmoringstart = new Date();
        nmtmoringstart.setHours(7, 30, 0);
        var nmtmoringend = new Date();
        nmtmoringend.setHours(9, 30, 0);
        var nmtnightstart = new Date();
        nmtnightstart.setHours(7, 30, 0);
        var nmtnightend = new Date();
        nmtnightend.setHours(9, 30, 0);
        if (cd >= nmtmoringstart && cd < nmtmoringend) {
            return false;
        }
        if (cd >= nmtnightstart && cd < nmtnightend) {
            return false;
        }
        return true;
    }
    setincamp() {
        this.enableloc = !this.enableloc;
    }
    getincamp() {
        return this.enableloc;
    }
    getapprovedvtypes() {
        var vtypes = _services_database_service__WEBPACK_IMPORTED_MODULE_4__["VehicleTypes"];
        if (this.database.current.user.mss_certified != true) {
            vtypes = vtypes.filter(vtype => vtype != 'MSS');
        }
        if (this.database.current.user.flb_certified != true) {
            vtypes = vtypes.filter(vtype => vtype != 'FLB');
        }
        if (this.database.current.user.belrex_certified != true) {
            vtypes = vtypes.filter(vtype => vtype != 'BELREX');
            return vtypes;
        }
    }
    onCancel() {
        this.navCtrl.pop();
    }
    showSubmit() {
        return true;
    }
    showToast(msg) {
        this.toastController.create({
            message: msg,
            duration: 2000,
            //  showCloseButton: true,
            //  closeButtonText: 'OK',
            position: 'bottom'
        }).then((obj) => {
            obj.present();
        });
    }
    getoverallrisk() {
        var licenceType = this.mtracForm.value.licenceType;
        var vehicleType = this.mtracForm.value.vehicleType;
        var rest = this.mtracForm.value.rest;
        var health = this.mtracForm.value.health;
        var weather = this.mtracForm.value.weather;
        var route = this.mtracForm.value.route;
        var detailType = this.mtracForm.value.detailType;
        var vc = this.mtracForm.value.vc;
        var vehicleServiceability = this.mtracForm.value.vehicleServiceability;
        var incamp = this.mtracForm.value.incamp;
        if (licenceType == "N" || health == "N" || vc == "N" || vehicleServiceability == "N" || !this.mtracForm.valid) {
            return false;
        }
        else if (licenceType == "H" || vehicleType == "H" || rest == "H" || health == "H" || weather == "H" || route == "H" || detailType == "H" || vc == "H" || vehicleServiceability == "H") {
            return "HIGH";
        }
        else if (licenceType == "M" || vehicleType == "M" || rest == "M" || health == "M" || weather == "M" || route == "M" || detailType == "M" || vc == "M" || vehicleServiceability == "M") {
            return "MEDIUM";
        }
        else if (licenceType == "L" || vehicleType == "L" || rest == "L" || health == "L" || weather == "L" || route == "L" || detailType == "L" || vc == "L" || vehicleServiceability == "L") {
            return "LOW";
        }
    }
};
mtracPage.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["NavController"] },
    { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ToastController"] },
    { type: _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"] },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"] }
];
mtracPage = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        selector: 'app-mtrac',
        template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./mtrac.page.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/mtrac/mtrac.page.html")).default,
        styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./mtrac.page.scss */ "./src/app/mtrac/mtrac.page.scss")).default]
    }),
    tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_ionic_angular__WEBPACK_IMPORTED_MODULE_3__["NavController"],
        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
        _ionic_angular__WEBPACK_IMPORTED_MODULE_3__["ToastController"],
        _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"],
        _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"]])
], mtracPage);



/***/ })

}]);
//# sourceMappingURL=mtrac-mtrac-module-es2015.js.map