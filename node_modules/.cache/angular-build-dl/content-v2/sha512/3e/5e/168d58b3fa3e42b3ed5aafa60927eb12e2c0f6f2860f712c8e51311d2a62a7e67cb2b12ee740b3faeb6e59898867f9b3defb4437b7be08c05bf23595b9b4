{"version":3,"sources":["./node_modules/chartjs-chart-radial-gauge/build/Chart.RadialGauge.cjs.js","./node_modules/chartjs-plugin-labels/src/chartjs-plugin-labels.js","./node_modules/chartjs-tsgauge/Gauge.js"],"names":[],"mappings":";;;;;;;;;;AAAa;;AAEb,+BAA+B,iFAAiF;;AAEhH,YAAY,mBAAO,CAAC,uDAAU;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,+BAA+B;AAC9E;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,qEAAqE,aAAa;AAClF;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,YAAY;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;;;;;;;;;;;;AC/ZA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;ACzeD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC","file":"default~pages-history-history-module~pages-summary-summary-module-es2015.js","sourcesContent":["'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Chart = require('chart.js');\nvar Chart__default = _interopDefault(Chart);\n\n/**\n * An arc element that supports rounded corners\n */\nChart.elements.RoundedArc = Chart.elements.Arc.extend({\n  draw: function draw() {\n    var ctx = this._chart.ctx;\n    var vm = this._view;\n    var startAngle = vm.startAngle,\n        endAngle = vm.endAngle;\n\n    var cornerRadius = (vm.outerRadius - vm.innerRadius) / 2;\n    var cornerX = (vm.outerRadius + vm.innerRadius) / 2;\n\n    // translate + rotate to make drawing the corners simpler\n    ctx.translate(vm.x, vm.y);\n    ctx.rotate(startAngle);\n    var angle = endAngle - startAngle;\n    ctx.beginPath();\n    if (vm.roundedCorners) {\n      ctx.arc(cornerX, 0, cornerRadius, Math.PI, 0);\n    }\n    ctx.arc(0, 0, vm.outerRadius, 0, angle);\n\n    var x = cornerX * Math.cos(angle);\n    var y = cornerX * Math.sin(angle);\n\n    if (vm.roundedCorners) {\n      ctx.arc(x, y, cornerRadius, angle, angle + Math.PI);\n    }\n\n    ctx.arc(0, 0, vm.innerRadius, angle, 0, true);\n    ctx.closePath();\n    ctx.rotate(-startAngle);\n    ctx.translate(-vm.x, -vm.y);\n\n    ctx.strokeStyle = vm.borderColor;\n    ctx.lineWidth = vm.borderWidth;\n    ctx.fillStyle = vm.backgroundColor;\n\n    ctx.fill();\n    ctx.lineJoin = 'bevel';\n\n    if (vm.borderWidth) {\n      ctx.stroke();\n    }\n  }\n});\n\nChart.elements.RoundedArc;\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar helpers = Chart__default.helpers;\n\n/**\n * Controller for the radialGauge chart type\n */\n\nChart__default.defaults._set('radialGauge', {\n  animation: {\n    // Boolean - Whether we animate the rotation of the radialGauge\n    animateRotate: true,\n    // Boolean - Whether we animate scaling the radialGauge from the centre\n    animateScale: true\n  },\n\n  // The percentage of the chart that is the center area\n  centerPercentage: 80,\n\n  // The rotation for the start of the metric's arc\n  rotation: -Math.PI / 2,\n\n  // the color of the radial gauge's track\n  trackColor: 'rgb(204, 221, 238)',\n\n  // whether arc for the gauge should have rounded corners\n  roundedCorners: true,\n\n  // center value options\n  centerArea: {\n    // whether to display the center text value\n    displayText: true,\n    // font for the center text\n    fontFamily: null,\n    // color of the center text\n    fontColor: null,\n    // the size of the center text\n    fontSize: null,\n    // padding around the center area\n    padding: 4,\n    // an image to use for the center background\n    backgroundImage: null,\n    // a color to use for the center background\n    backgroundColor: null,\n    // the text to display in the center\n    // this could be a string or a callback that returns a string\n    // if a callback is provided it will be called with (value, options)\n    text: null\n  },\n\n  hover: {\n    mode: 'single'\n  },\n\n  legend: {\n    display: false\n  },\n\n  // the domain of the metric\n  domain: [0, 100],\n\n  tooltips: {\n    callbacks: {\n      title: function title() {\n        return '';\n      },\n      label: function label(tooltipItem, data) {\n        var dataLabel = data.labels[tooltipItem.index];\n        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n        dataLabel += value;\n\n        return dataLabel;\n      }\n    }\n  }\n});\n\n// eslint-disable-next-line no-shadow\nvar RadialGaugeController = (function (Chart$$1) {\n  Chart$$1.controllers.radialGauge = Chart$$1.DatasetController.extend({\n    dataElementType: Chart$$1.elements.RoundedArc,\n\n    linkScales: helpers.noop,\n\n    draw: function draw() {\n      this.drawTrack();\n\n      this.drawCenterArea();\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      Chart$$1.DatasetController.prototype.draw.apply(this, args);\n    },\n    drawTrack: function drawTrack() {\n      new Chart$$1.elements.Arc({\n        _view: {\n          backgroundColor: this.chart.options.trackColor,\n          borderColor: this.chart.options.trackColor,\n          startAngle: 0,\n          endAngle: Math.PI * 2,\n          x: this.centerX,\n          y: this.centerY,\n          innerRadius: this.innerRadius,\n          outerRadius: this.outerRadius,\n          borderWidth: this.borderWidth\n        },\n        _chart: this.chart\n      }).draw();\n    },\n    drawCenterArea: function drawCenterArea() {\n      var ctx = this.chart.ctx;\n      var drawInfo = {\n        ctx: ctx,\n        value: Math.ceil(this.getMeta().data[0]._view.value),\n        radius: this.innerRadius,\n        options: this.chart.options.centerArea\n      };\n\n      ctx.save();\n\n      try {\n        ctx.translate(this.centerX, this.centerY);\n        if (drawInfo.options.draw) {\n          drawInfo.options.draw(drawInfo);\n          return;\n        }\n\n        if (drawInfo.options.backgroundColor) {\n          this.drawCenterBackground(drawInfo);\n        }\n\n        if (drawInfo.options.backgroundImage) {\n          this.drawCenterImage(drawInfo);\n        }\n\n        if (drawInfo.options.displayText) {\n          this.drawCenterText(drawInfo);\n        }\n      } finally {\n        ctx.restore();\n      }\n    },\n    drawCenterBackground: function drawCenterBackground(_ref) {\n      var options = _ref.options,\n          radius = _ref.radius,\n          ctx = _ref.ctx;\n\n      var bgRadius = radius - options.padding;\n      ctx.beginPath();\n      ctx.arc(0, 0, bgRadius, 0, Math.PI * 2);\n      ctx.closePath();\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n    },\n    drawCenterImage: function drawCenterImage(_ref2) {\n      var radius = _ref2.radius,\n          options = _ref2.options,\n          ctx = _ref2.ctx;\n\n      var imageRadius = radius - options.padding;\n      ctx.beginPath();\n      ctx.arc(0, 0, imageRadius, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.clip();\n      ctx.drawImage(options.backgroundImage, -imageRadius, -imageRadius, 2 * imageRadius, 2 * imageRadius);\n    },\n    drawCenterText: function drawCenterText(_ref3) {\n      var options = _ref3.options,\n          value = _ref3.value;\n\n      var fontSize = options.fontSize || (this.innerRadius / 50).toFixed(2) + 'em';\n      if (typeof fontSize === 'number') {\n        fontSize = fontSize + 'px';\n      }\n\n      var fontFamily = options.fontFamily || Chart$$1.defaults.global.defaultFontFamily;\n      var color = options.fontColor || Chart$$1.defaults.global.defaultFontColor;\n\n      var text = typeof options.text === 'function' ? options.text(value, options) : options.text;\n      text = text || '' + value;\n      this.chart.ctx.font = fontSize + ' ' + fontFamily;\n      this.chart.ctx.fillStyle = color;\n      this.chart.ctx.textBaseline = 'middle';\n      var textWidth = this.chart.ctx.measureText(text).width;\n      var textX = Math.round(-textWidth / 2);\n\n      // only display the text if it fits\n      if (textWidth < 2 * this.innerRadius * 0.8) {\n        this.chart.ctx.fillText(text, textX, 0);\n      }\n    },\n    update: function update(reset) {\n      var _this = this;\n\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var arcOpts = opts.elements.arc;\n      var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;\n      var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;\n      var availableSize = Math.min(availableWidth, availableHeight);\n\n      var meta = this.getMeta();\n      var centerPercentage = opts.centerPercentage;\n\n      this.borderWidth = this.getMaxBorderWidth(meta.data);\n      this.outerRadius = Math.max((availableSize - this.borderWidth) / 2, 0);\n      this.innerRadius = Math.max(centerPercentage ? this.outerRadius / 100 * centerPercentage : 0, 0);\n\n      meta.total = this.getMetricValue();\n      this.centerX = (chartArea.left + chartArea.right) / 2;\n      this.centerY = (chartArea.top + chartArea.bottom) / 2;\n\n      helpers.each(meta.data, function (arc, index) {\n        _this.updateElement(arc, index, reset);\n      });\n    },\n    updateElement: function updateElement(arc, index, reset) {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var startAngle = opts.rotation; // non reset case handled later\n      var dataset = this.getDataset();\n      var arcAngle = reset && animationOpts.animateRotate ? 0 : this.calculateArcAngle(dataset.data[index]);\n      var value = reset && animationOpts.animateScale ? 0 : this.getMetricValue();\n      var endAngle = startAngle + arcAngle;\n      var innerRadius = this.innerRadius;\n      var outerRadius = this.outerRadius;\n      var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n\n      helpers.extend(arc, {\n        // Utility\n        _datasetIndex: this.index,\n        _index: index,\n\n        // Desired view properties\n        _model: {\n          x: centerX,\n          y: centerY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index]),\n          roundedCorners: opts.roundedCorners,\n          value: value\n        }\n      });\n\n      var model = arc._model;\n\n      // Resets the visual styles\n      var custom = arc.custom || {};\n      var valueOrDefault = helpers.valueAtIndexOrDefault;\n      var elementOpts = this.chart.options.elements.arc;\n      model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);\n      model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);\n      model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);\n\n      arc.pivot();\n    },\n    getMetricValue: function getMetricValue() {\n      var value = this.getDataset().data[0];\n      if (value == null) {\n        value = this.chart.options.domain[0];\n      }\n\n      return value;\n    },\n    getDomain: function getDomain() {\n      return this.chart.options.domain;\n    },\n    calculateArcAngle: function calculateArcAngle() {\n      var _getDomain = this.getDomain(),\n          _getDomain2 = slicedToArray(_getDomain, 2),\n          domainStart = _getDomain2[0],\n          domainEnd = _getDomain2[1];\n\n      var value = this.getMetricValue();\n      var domainSize = domainEnd - domainStart;\n\n      return domainSize > 0 ? Math.PI * 2.0 * (Math.abs(value - domainStart) / domainSize) : 0;\n    },\n\n\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\n      var max = 0;\n      var index = this.index;\n      var length = arcs.length;\n      var borderWidth = void 0;\n      var hoverWidth = void 0;\n\n      for (var i = 0; i < length; i++) {\n        borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;\n        hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\n\n        max = borderWidth > max ? borderWidth : max;\n        max = hoverWidth > max ? hoverWidth : max;\n      }\n      return max;\n    }\n  });\n});\n\nvar RadialGaugeChart = (function (Chart$$1) {\n  Chart$$1.RadialGauge = function (context, config) {\n    config.type = 'radialGauge';\n\n    return new Chart$$1(context, config);\n  };\n});\n\nRadialGaugeController(Chart__default);\nRadialGaugeChart(Chart__default);\n\nmodule.exports = RadialGaugeChart;\n","/**\n * [chartjs-plugin-labels]{@link https://github.com/emn178/chartjs-plugin-labels}\n *\n * @version 1.1.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2017-2018\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  if (typeof Chart === 'undefined') {\n    console.error('Can not find Chart object.');\n    return;\n  }\n\n  if (typeof Object.assign != 'function') {\n    Object.assign = function (target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n      var to = Object(target);\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n        if (nextSource != null) {\n          for (var nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    };\n  }\n\n  var SUPPORTED_TYPES = {};\n  ['pie', 'doughnut', 'polarArea', 'bar'].forEach(function (t) {\n    SUPPORTED_TYPES[t] = true;\n  });\n\n  function Label() {\n    this.renderToDataset = this.renderToDataset.bind(this);\n  }\n\n  Label.prototype.setup = function (chart, options) {\n    this.chart = chart;\n    this.ctx = chart.ctx;\n    this.args = {};\n    this.barTotal = {};\n    var chartOptions = chart.config.options;\n    this.options = Object.assign({\n      position: 'default',\n      precision: 0,\n      fontSize: chartOptions.defaultFontSize,\n      fontColor: chartOptions.defaultFontColor,\n      fontStyle: chartOptions.defaultFontStyle,\n      fontFamily: chartOptions.defaultFontFamily,\n      shadowOffsetX: 3,\n      shadowOffsetY: 3,\n      shadowColor: 'rgba(0,0,0,0.3)',\n      shadowBlur: 6,\n      images: [],\n      outsidePadding: 2,\n      textMargin: 2,\n      overlap: true\n    }, options);\n    if (chart.config.type === 'bar') {\n      this.options.position = 'default';\n      this.options.arc = false;\n      this.options.overlap = true;\n    }\n  };\n\n  Label.prototype.render = function () {\n    this.labelBounds = [];\n    this.chart.data.datasets.forEach(this.renderToDataset);\n  };\n\n  Label.prototype.renderToDataset = function (dataset, index) {\n    this.totalPercentage = 0;\n    this.total = null;\n    var arg = this.args[index];\n    arg.meta.data.forEach(function (element, index) {\n      this.renderToElement(dataset, arg, element, index);\n    }.bind(this));\n  };\n\n  Label.prototype.renderToElement = function (dataset, arg, element, index) {\n    if (!this.shouldRenderToElement(arg.meta, element)) {\n      return;\n    }\n    this.percentage = null;\n    var label = this.getLabel(dataset, element, index);\n    if (!label) {\n      return;\n    }\n    var ctx = this.ctx;\n    ctx.save();\n    ctx.font = Chart.helpers.fontString(this.options.fontSize, this.options.fontStyle, this.options.fontFamily);\n    var renderInfo = this.getRenderInfo(element, label);\n    if (!this.drawable(element, label, renderInfo)) {\n      ctx.restore();\n      return;\n    }\n    ctx.beginPath();\n    ctx.fillStyle = this.getFontColor(dataset, element, index);\n    this.renderLabel(label, renderInfo);\n    ctx.restore();\n  };\n\n  Label.prototype.renderLabel = function (label, renderInfo) {\n    return this.options.arc ? this.renderArcLabel(label, renderInfo) : this.renderBaseLabel(label, renderInfo);\n  };\n\n  Label.prototype.renderBaseLabel = function (label, position) {\n    var ctx = this.ctx;\n    if (typeof label === 'object') {\n      ctx.drawImage(label, position.x - label.width / 2, position.y - label.height / 2, label.width, label.height);\n    } else {\n      ctx.save();\n      ctx.textBaseline = 'top';\n      ctx.textAlign = 'center';\n\n      if (this.options.textShadow) {\n        ctx.shadowOffsetX = this.options.shadowOffsetX;\n        ctx.shadowOffsetY = this.options.shadowOffsetY;\n        ctx.shadowColor = this.options.shadowColor;\n        ctx.shadowBlur = this.options.shadowBlur;\n      }\n\n      var lines = label.split('\\n');\n      for (var i = 0; i < lines.length; i++) {\n        var y = position.y - this.options.fontSize / 2 * lines.length + this.options.fontSize * i;\n        ctx.fillText(lines[i], position.x, y);\n      }\n      ctx.restore();\n    }\n  };\n\n  Label.prototype.renderArcLabel = function (label, renderInfo) {\n    var ctx = this.ctx, radius = renderInfo.radius, view = renderInfo.view;\n    ctx.save();\n    ctx.translate(view.x, view.y);\n    if (typeof label === 'string') {\n      ctx.rotate(renderInfo.startAngle);\n      ctx.textBaseline = 'middle';\n      ctx.textAlign = 'left';\n      var lines = label.split('\\n'), max = 0, widths = [], offset = 0;\n      if (this.options.position === 'border') {\n        offset = (lines.length - 1) * this.options.fontSize / 2;\n      }\n      for (var j = 0; j < lines.length; ++j) {\n        var mertrics = ctx.measureText(lines[j]);\n        if (mertrics.width > max) {\n          max = mertrics.width;\n        }\n        widths.push(mertrics.width);\n      }\n      for (var j = 0; j < lines.length; ++j) {\n        var line = lines[j];\n        var y = (lines.length - 1 - j) * -this.options.fontSize + offset;\n        ctx.save();\n        var padding = (max - widths[j]) / 2;\n        ctx.rotate(padding / radius);\n        for (var i = 0; i < line.length; i++) {\n          var char = line.charAt(i);\n          mertrics = ctx.measureText(char);\n          ctx.save();\n          ctx.translate(0, -1 * radius);\n          ctx.fillText(char, 0, y);\n          ctx.restore();\n          ctx.rotate(mertrics.width / radius);\n        }\n        ctx.restore();\n      }\n    } else {\n      ctx.rotate((view.startAngle + Math.PI / 2 + renderInfo.endAngle) / 2);\n      ctx.translate(0, -1 * radius);\n      this.renderLabel(label, { x: 0, y: 0 });\n    }\n    ctx.restore();\n  };\n\n  Label.prototype.shouldRenderToElement = function (meta, element) {\n    return !meta.hidden && !element.hidden && (\n      this.options.showZero ||\n      this.chart.config.type === 'polarArea' ? element._view.outerRadius !== 0 : element._view.circumference !== 0\n    );\n  };\n\n  Label.prototype.getLabel = function (dataset, element, index) {\n    var label;\n    if (typeof this.options.render === 'function') {\n      label = this.options.render({\n        label: this.chart.config.data.labels[index],\n        value: dataset.data[index],\n        percentage: this.getPercentage(dataset, element, index),\n        dataset: dataset,\n        index: index\n      });\n    } else {\n      switch (this.options.render) {\n        case 'value':\n          label = dataset.data[index];\n          break;\n        case 'label':\n          label = this.chart.config.data.labels[index];\n          break;\n        case 'image':\n          label = this.options.images[index] ? this.loadImage(this.options.images[index]) : '';\n          break;\n        case 'percentage':\n        default:\n          label = this.getPercentage(dataset, element, index) + '%';\n          break;\n      }\n    }\n    if (typeof label === 'object') {\n      label = this.loadImage(label);\n    } else if (label !== null && label !== undefined) {\n      label = label.toString();\n    }\n    return label;\n  };\n\n  Label.prototype.getFontColor = function (dataset, element, index) {\n    var fontColor = this.options.fontColor;\n    if (typeof fontColor === 'function') {\n      fontColor = fontColor({\n        label: this.chart.config.data.labels[index],\n        value: dataset.data[index],\n        percentage: this.getPercentage(dataset, element, index),\n        backgroundColor: dataset.backgroundColor[index],\n        dataset: dataset,\n        index: index\n      });\n    } else if (typeof fontColor !== 'string') {\n      fontColor = fontColor[index] || this.chart.config.options.defaultFontColor;\n    }\n    return fontColor;\n  };\n\n  Label.prototype.getPercentage = function (dataset, element, index) {\n    if (this.percentage !== null) {\n      return this.percentage;\n    }\n    var percentage;\n    if (this.chart.config.type === 'polarArea') {\n      if (this.total === null) {\n        this.total = 0;\n        for (var i = 0;i < dataset.data.length; ++i) {\n          this.total += dataset.data[i];\n        }\n      }\n      percentage = dataset.data[index] / this.total * 100;\n    } else if (this.chart.config.type === 'bar') {\n      if (this.barTotal[index] === undefined) {\n        this.barTotal[index] = 0;\n        for (var i = 0;i < this.chart.data.datasets.length; ++i) {\n          this.barTotal[index] += this.chart.data.datasets[i].data[index];\n        }\n      }\n      percentage = dataset.data[index] / this.barTotal[index] * 100;\n    } else {\n      percentage = element._view.circumference / this.chart.config.options.circumference * 100;\n    }\n    percentage = parseFloat(percentage.toFixed(this.options.precision));\n    if (!this.options.showActualPercentages) {\n      if (this.chart.config.type === 'bar') {\n        this.totalPercentage = this.barTotalPercentage[index] || 0;\n      }\n      this.totalPercentage += percentage;\n      if (this.totalPercentage > 100) {\n        percentage -= this.totalPercentage - 100;\n        percentage = parseFloat(percentage.toFixed(this.options.precision));\n      }\n      if (this.chart.config.type === 'bar') {\n        this.barTotalPercentage[index] = this.totalPercentage\n      }\n    }\n    this.percentage = percentage;\n    return percentage;\n  };\n\n  Label.prototype.getRenderInfo = function (element, label) {\n    if (this.chart.config.type === 'bar') {\n      return this.getBarRenderInfo(element, label);\n    } else {\n      return this.options.arc ? this.getArcRenderInfo(element, label) : this.getBaseRenderInfo(element, label);\n    }\n  };\n\n  Label.prototype.getBaseRenderInfo = function (element, label) {\n    if (this.options.position === 'outside' || this.options.position === 'border') {\n      var renderInfo, rangeFromCentre,\n        view = element._view,\n        centreAngle = view.startAngle + (view.endAngle - view.startAngle) / 2,\n        innerRadius = view.outerRadius / 2;\n      if (this.options.position === 'border') {\n        rangeFromCentre = (view.outerRadius - innerRadius) / 2 + innerRadius;\n      } else if (this.options.position === 'outside') {\n        rangeFromCentre = (view.outerRadius - innerRadius) + innerRadius + this.options.textMargin;\n      }\n      renderInfo = {\n        x: view.x + (Math.cos(centreAngle) * rangeFromCentre),\n        y: view.y + (Math.sin(centreAngle) * rangeFromCentre)\n      };\n      if (this.options.position === 'outside') {\n        var offset = this.options.textMargin + this.measureLabel(label).width / 2;\n        renderInfo.x += renderInfo.x < view.x ? -offset : offset;\n      }\n      return renderInfo;\n    } else {\n      return element.tooltipPosition();\n    }\n  };\n\n  Label.prototype.getArcRenderInfo = function (element, label) {\n    var radius, view = element._view;\n    if (this.options.position === 'outside') {\n      radius = view.outerRadius + this.options.fontSize + this.options.textMargin;\n    } else if (this.options.position === 'border') {\n      radius = (view.outerRadius / 2 + view.outerRadius) / 2;\n    } else {\n      radius = (view.innerRadius + view.outerRadius) / 2;\n    }\n    var startAngle = view.startAngle, endAngle = view.endAngle;\n    var totalAngle = endAngle - startAngle;\n    startAngle += Math.PI / 2;\n    endAngle += Math.PI / 2;\n    var mertrics = this.measureLabel(label);\n    startAngle += (endAngle - (mertrics.width / radius + startAngle)) / 2;\n    return {\n      radius: radius,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      totalAngle: totalAngle,\n      view: view\n    }\n  };\n\n  Label.prototype.getBarRenderInfo = function (element, label) {\n    var renderInfo = element.tooltipPosition();\n    renderInfo.y -= this.measureLabel(label).height / 2 + this.options.textMargin;\n    return renderInfo;\n  };\n\n  Label.prototype.drawable = function (element, label, renderInfo) {\n    if (this.options.overlap) {\n      return true;\n    } else if (this.options.arc) {\n      return renderInfo.endAngle - renderInfo.startAngle <= renderInfo.totalAngle;\n    } else {\n      var mertrics = this.measureLabel(label),\n        left = renderInfo.x - mertrics.width / 2,\n        right = renderInfo.x + mertrics.width / 2,\n        top = renderInfo.y - mertrics.height / 2,\n        bottom = renderInfo.y + mertrics.height / 2;\n      if (this.options.renderInfo === 'outside') {\n        return this.outsideInRange(left, right, top, bottom);\n      } else {\n        return element.inRange(left, top) && element.inRange(left, bottom) &&\n          element.inRange(right, top) && element.inRange(right, bottom);\n      }\n    }\n  };\n\n  Label.prototype.outsideInRange = function (left, right, top, bottom) {\n    var labelBounds = this.labelBounds;\n    for (var i = 0;i < labelBounds.length;++i) {\n      var bound = labelBounds[i];\n      var potins = [\n        [left, top],\n        [left, bottom],\n        [right, top],\n        [right, bottom]\n      ];\n      for (var j = 0;j < potins.length;++j) {\n        var x = potins[j][0];\n        var y = potins[j][1];\n        if (x >= bound.left && x <= bound.right && y >= bound.top && y <= bound.bottom) {\n          return false;\n        }\n      }\n      potins = [\n        [bound.left, bound.top],\n        [bound.left, bound.bottom],\n        [bound.right, bound.top],\n        [bound.right, bound.bottom]\n      ];\n      for (var j = 0;j < potins.length;++j) {\n        var x = potins[j][0];\n        var y = potins[j][1];\n        if (x >= left && x <= right && y >= top && y <= bottom) {\n          return false;\n        }\n      }\n    }\n    labelBounds.push({\n      left: left,\n      right: right,\n      top: top,\n      bottom: bottom\n    });\n    return true;\n  };\n\n  Label.prototype.measureLabel = function (label) {\n    if (typeof label === 'object') {\n      return { width: label.width, height: label.height };\n    } else {\n      var width = 0;\n      var lines = label.split('\\n');\n      for (var i = 0; i < lines.length; ++i) {\n        var result = this.ctx.measureText(lines[i]);\n        if (result.width > width) {\n          width = result.width;\n        }\n      }\n      return { width: width, height: this.options.fontSize * lines.length };\n    }\n  };\n\n  Label.prototype.loadImage = function (obj) {\n    var image = new Image();\n    image.src = obj.src;\n    image.width = obj.width;\n    image.height = obj.height;\n    return image;\n  };\n\n  Chart.plugins.register({\n    id: 'labels',\n    beforeDatasetsUpdate: function (chart, options) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      if (!Array.isArray(options)) {\n        options = [options];\n      }\n      var count = options.length;\n      if (!chart._labels || count !== chart._labels.length) {\n        chart._labels = options.map(function () {\n          return new Label();\n        });\n      }\n      var someOutside = false, maxPadding = 0;\n      for (var i = 0; i < count; ++i) {\n        var label = chart._labels[i];\n        label.setup(chart, options[i]);\n        if (label.options.position === 'outside') {\n          someOutside = true;\n          var padding = label.options.fontSize * 1.5 + label.options.outsidePadding;\n          if (padding > maxPadding) {\n            maxPadding = padding;\n          }\n        }\n      }\n      if (someOutside) {\n        chart.chartArea.top += maxPadding;\n        chart.chartArea.bottom -= maxPadding;\n      }\n    },\n    afterDatasetUpdate: function (chart, args, options) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.args[args.index] = args;\n      });\n    },\n    beforeDraw: function (chart) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.barTotalPercentage = {};\n      });\n    },\n    afterDatasetsDraw: function (chart) {\n      if (!SUPPORTED_TYPES[chart.config.type]) {\n        return;\n      }\n      chart._labels.forEach(function (label) {\n        label.render();\n      });\n    }\n  });\n})();\n","(function () {\n\tif (!window.Chart) {\n\t\treturn;\n\t}\n\tfunction GaugeChartHelper() {\n\t}\n\tGaugeChartHelper.prototype.setup = function(chart, config) {\n\t\tthis.chart = chart;\n\t\tthis.ctx = chart.ctx;\n\t\tthis.limits = config.data.datasets[0].gaugeLimits;\n\t\tthis.data = config.data.datasets[0].gaugeData;\n\t\tvar options = chart.options;\n\t\tthis.fontSize = options.defaultFontSize;\n\t\tthis.fontStyle = options.defaultFontFamily;\n\t\tthis.fontColor = options.defaultFontColor;\n\t\tthis.ctx.textBaseline = \"alphabetic\";\n\t\tthis.arrowAngle = 25 * Math.PI / 180;\n\t\tthis.arrowColor = config.options.indicatorColor || options.arrowColor;\n\t\tthis.showMarkers = typeof(config.options.showMarkers) === 'undefined' ? true : config.options.showMarkers;\n\t\tif (config.options.markerFormatFn) {\n\t\t\tthis.markerFormatFn = config.options.markerFormatFn;\n\t\t} else {\n\t\t\tthis.markerFormatFn = function(value) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t};\n\tGaugeChartHelper.prototype.applyGaugeConfig = function(chartConfig) {\n\t\tthis.calcLimits();\n\t\tchartConfig.data.datasets[0].data = this.doughnutData;\n\t\tvar ctx = this.ctx;\n\t\tvar labelsWidth = this.limits.map(function(label){\n\t\t\tvar text = this.markerFormatFn(label);\n\t\t\treturn ctx.measureText(text).width;\n\t\t}.bind(this));\n\t\tvar padding = Math.max.apply(this, labelsWidth) + this.chart.width / 35;\n\t\tvar heightRatio = this.chart.height / 50;\n\t\tchartConfig.options.layout.padding = {\n\t\t\ttop: this.fontSize + heightRatio,\n\t\t\tleft: padding,\n\t\t\tright: padding,\n\t\t\tbottom: heightRatio * 2\n\t\t};\n\t};\n\tGaugeChartHelper.prototype.calcLimits = function() {\n\t\tvar limits = this.limits;\n\t\tvar data = [];\n\t\tvar total = 0;\n\t\tfor (var i = 1, ln = limits.length; i < ln; i++) {\n\t\t\tvar dataValue = Math.abs(limits[i] - limits[i - 1]);\n\t\t\ttotal += dataValue;\n\t\t\tdata.push(dataValue);\n\t\t}\n\t\tthis.doughnutData = data;\n\t\tvar minValue = limits[0];\n\t\tvar maxValue = limits[limits.length - 1];\n\t\tthis.isRevers = minValue > maxValue;\n\t\tthis.minValue = this.isRevers ? maxValue : minValue;\n\t\tthis.totalValue = total;\n\t};\n\tGaugeChartHelper.prototype.updateGaugeDimensions = function() {\n\t\tvar chartArea = this.chart.chartArea;\n\t\tthis.gaugeRadius = this.chart.innerRadius;\n\t\tthis.gaugeCenterX = (chartArea.left + chartArea.right) / 2;\n\t\tthis.gaugeCenterY = (chartArea.top + chartArea.bottom + this.chart.outerRadius) / 2;\n\t\tthis.arrowLength = this.chart.radiusLength * 2;\n\t};\n\tGaugeChartHelper.prototype.getCoordOnCircle = function(r, alpha) {\n\t\treturn {\n\t\t\tx: r * Math.cos(alpha),\n\t\t\ty: r * Math.sin(alpha)\n\t\t};\n\t};\n\tGaugeChartHelper.prototype.getAngleOfValue = function(value) {\n\t\tvar result = 0;\n\t\tvar gaugeValue = value - this.minValue;\n\t\tif (gaugeValue <= 0) {\n\t\t\tresult = 0;\n\t\t} else if (gaugeValue >= this.totalValue) {\n\t\t\tresult = Math.PI;\n\t\t} else {\n\t\t\tresult = Math.PI * gaugeValue / this.totalValue;\n\t\t}\n\t\tif (this.isRevers) {\n\t\t\treturn Math.PI - result;\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t};\n\tGaugeChartHelper.prototype.renderLimitLabel = function(value) {\n\t\tvar ctx = this.ctx;\n\t\tvar angle = this.getAngleOfValue(value);\n\t\tvar coord = this.getCoordOnCircle(this.chart.outerRadius + (this.chart.radiusLength / 2), angle);\n\t\tvar align;\n\t\tvar diff = angle - (Math.PI / 2);\n\t\tif (diff > 0) {\n\t\t\talign = \"left\";\n\t\t} else if (diff < 0) {\n\t\t\talign = \"right\";\n\t\t} else {\n\t\t\talign = \"center\";\n\t\t}\n\t\tctx.textAlign = align;\n\t\tctx.font = this.fontSize + \"px \" + this.fontStyle;\n\t\tctx.fillStyle = this.fontColor;\n\t\tvar text = this.markerFormatFn(value);\n\t\tctx.fillText(text, this.gaugeCenterX - coord.x, this.gaugeCenterY - coord.y);\n\t};\n\tGaugeChartHelper.prototype.renderLimits = function() {\n\t\tfor (var i = 0, ln = this.limits.length; i < ln; i++) {\n\t\t\tthis.renderLimitLabel(this.limits[i]);\n\t\t}\n\t};\n\tGaugeChartHelper.prototype.renderValueLabel = function() {\n\t\tvar label = this.data.value.toString();\n\t\tvar ctx = this.ctx;\n\t\tctx.font = \"30px \" + this.fontStyle;\n\t\tvar stringWidth = ctx.measureText(label).width;\n\t\tvar elementWidth = 0.75 * this.gaugeRadius * 2;\n\t\tvar widthRatio = elementWidth / stringWidth;\n\t\tvar newFontSize = Math.floor(30 * widthRatio);\n\t\tvar fontSizeToUse = Math.min(newFontSize, this.gaugeRadius);\n\t\tctx.textAlign = \"center\";\n\t\tctx.font = fontSizeToUse + \"px \" + this.fontStyle;\n\t\tctx.fillStyle = this.data.valueColor || this.fontColor;\n\t\tctx.fillText(label, this.gaugeCenterX, this.gaugeCenterY);\n\t};\n\tGaugeChartHelper.prototype.renderValueArrow = function(value) {\n\t\tvar angle = this.getAngleOfValue(typeof value === \"number\" ? value : this.data.value);\n\t\tthis.ctx.globalCompositeOperation = \"source-over\";\n\t\tthis.renderArrow(this.gaugeRadius, angle, this.arrowLength, this.arrowAngle, this.arrowColor);\n\t};\n\tGaugeChartHelper.prototype.renderSmallValueArrow = function(value) {\n\t\tvar angle = this.getAngleOfValue(value);\n\t\tthis.ctx.globalCompositeOperation = \"source-over\";\n\t\tthis.renderArrow(this.gaugeRadius - 1, angle, this.arrowLength - 1, this.arrowAngle, this.arrowColor);\n\t};\n\tGaugeChartHelper.prototype.clearValueArrow = function(value) {\n\t\tvar angle = this.getAngleOfValue(value);\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.globalCompositeOperation = \"destination-out\";\n\t\tthis.renderArrow(this.gaugeRadius - 1, angle, this.arrowLength + 1, this.arrowAngle, \"#FFFFFF\");\n\t\tthis.ctx.stroke();\n\t};\n\tGaugeChartHelper.prototype.renderArrow = function(radius, angle, arrowLength, arrowAngle, arrowColor) {\n\t\tvar coord = this.getCoordOnCircle(radius, angle);\n\t\tvar arrowPoint = {\n\t\t\tx: this.gaugeCenterX - coord.x,\n\t\t\ty: this.gaugeCenterY - coord.y\n\t\t};\n\t\tvar ctx = this.ctx;\n\t\tctx.fillStyle = arrowColor;\n\t\tctx.beginPath();\n\t\tctx.moveTo(arrowPoint.x, arrowPoint.y);\n\t\tcoord = this.getCoordOnCircle(arrowLength, angle + arrowAngle);\n\t\tctx.lineTo(arrowPoint.x + coord.x, arrowPoint.y + coord.y);\n\t\tcoord = this.getCoordOnCircle(arrowLength, angle - arrowAngle);\n\t\tctx.lineTo(arrowPoint.x + coord.x, arrowPoint.y + coord.y);\n\t\tctx.closePath();\n\t\tctx.fill();\n\t};\n\tGaugeChartHelper.prototype.animateArrow = function() {\n\t\tvar stepCount = 30;\n\t\tvar animateTimeout = 300;\n\t\tvar gaugeValue = this.data.value - this.minValue;\n\t\tvar step = gaugeValue / stepCount;\n\t\tvar i = 0;\n\t\tvar currentValue = this.minValue;\n\t\tvar interval = setInterval(function() {\n\t\t\ti++;\n\t\t\tthis.clearValueArrow(currentValue);\n\t\t\tif (i > stepCount) {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tthis.renderValueArrow();\n\t\t\t} else {\n\t\t\t\tcurrentValue += step;\n\t\t\t\tthis.renderSmallValueArrow(currentValue);\n\t\t\t}\n\t\t}.bind(this), animateTimeout / stepCount);\n\t};\n\tChart.defaults.tsgauge = {\n\t\tanimation: {\n\t\t\tanimateRotate: true,\n\t\t\tanimateScale: false\n\t\t},\n\t\tcutoutPercentage: 95,\n\t\trotation: Math.PI,\n\t\tcircumference: Math.PI,\n\t\tlegend: {\n\t\t\tdisplay: false\n\t\t},\n\t\tscales: {},\n\t\tarrowColor: \"#444\"\n\t};\n\tChart.controllers.tsgauge = Chart.controllers.doughnut.extend({\n\t\tinitialize: function(chart) {\n\t\t\tvar gaugeHelper = this.gaugeHelper = new GaugeChartHelper();\n\t\t\tgaugeHelper.setup(chart, chart.config);\n\t\t\tgaugeHelper.applyGaugeConfig(chart.config);\n\t\t\tchart.config.options.animation.onComplete = function(chartElement) {\n\t\t\t\tgaugeHelper.updateGaugeDimensions();\n\t\t\t\tgaugeHelper.animateArrow();\n\t\t\t};\n\t\t\tChart.controllers.doughnut.prototype.initialize.apply(this, arguments);\n\t\t},\n\t\tdraw: function() {\n\t\t\tChart.controllers.doughnut.prototype.draw.apply(this, arguments);\n\t\t\tvar gaugeHelper = this.gaugeHelper;\n\t\t\tgaugeHelper.updateGaugeDimensions();\n\t\t\tgaugeHelper.renderValueLabel();\n\t\t\tif (gaugeHelper.showMarkers) {\n\t\t\t\tgaugeHelper.renderLimits();\n\t\t\t}\n\t\t\tgaugeHelper.renderSmallValueArrow(gaugeHelper.minValue);\n\t\t}\n\t});\n})();\n"],"sourceRoot":"webpack:///"}