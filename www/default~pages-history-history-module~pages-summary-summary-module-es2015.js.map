{"version":3,"sources":["./node_modules/chartjs-chart-radial-gauge/build/Chart.RadialGauge.cjs.js","./node_modules/chartjs-plugin-labels/src/chartjs-plugin-labels.js","./node_modules/chartjs-tsgauge/Gauge.js"],"names":[],"mappings":";;;;;;;;;;AAAa;;AAEb,+BAA+B,iFAAiF;;AAEhH,YAAY,mBAAO,CAAC,uDAAU;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+CAA+C,+BAA+B;AAC9E;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,qEAAqE,aAAa;AAClF;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,YAAY;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;;;;;;;;;;;;AC/ZA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;ACzeD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC","file":"default~pages-history-history-module~pages-summary-summary-module-es2015.js","sourcesContent":["'use strict';\r\n\r\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\r\n\r\nvar Chart = require('chart.js');\r\nvar Chart__default = _interopDefault(Chart);\r\n\r\n/**\r\n * An arc element that supports rounded corners\r\n */\r\nChart.elements.RoundedArc = Chart.elements.Arc.extend({\r\n  draw: function draw() {\r\n    var ctx = this._chart.ctx;\r\n    var vm = this._view;\r\n    var startAngle = vm.startAngle,\r\n        endAngle = vm.endAngle;\r\n\r\n    var cornerRadius = (vm.outerRadius - vm.innerRadius) / 2;\r\n    var cornerX = (vm.outerRadius + vm.innerRadius) / 2;\r\n\r\n    // translate + rotate to make drawing the corners simpler\r\n    ctx.translate(vm.x, vm.y);\r\n    ctx.rotate(startAngle);\r\n    var angle = endAngle - startAngle;\r\n    ctx.beginPath();\r\n    if (vm.roundedCorners) {\r\n      ctx.arc(cornerX, 0, cornerRadius, Math.PI, 0);\r\n    }\r\n    ctx.arc(0, 0, vm.outerRadius, 0, angle);\r\n\r\n    var x = cornerX * Math.cos(angle);\r\n    var y = cornerX * Math.sin(angle);\r\n\r\n    if (vm.roundedCorners) {\r\n      ctx.arc(x, y, cornerRadius, angle, angle + Math.PI);\r\n    }\r\n\r\n    ctx.arc(0, 0, vm.innerRadius, angle, 0, true);\r\n    ctx.closePath();\r\n    ctx.rotate(-startAngle);\r\n    ctx.translate(-vm.x, -vm.y);\r\n\r\n    ctx.strokeStyle = vm.borderColor;\r\n    ctx.lineWidth = vm.borderWidth;\r\n    ctx.fillStyle = vm.backgroundColor;\r\n\r\n    ctx.fill();\r\n    ctx.lineJoin = 'bevel';\r\n\r\n    if (vm.borderWidth) {\r\n      ctx.stroke();\r\n    }\r\n  }\r\n});\r\n\r\nChart.elements.RoundedArc;\r\n\r\nvar slicedToArray = function () {\r\n  function sliceIterator(arr, i) {\r\n    var _arr = [];\r\n    var _n = true;\r\n    var _d = false;\r\n    var _e = undefined;\r\n\r\n    try {\r\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\r\n        _arr.push(_s.value);\r\n\r\n        if (i && _arr.length === i) break;\r\n      }\r\n    } catch (err) {\r\n      _d = true;\r\n      _e = err;\r\n    } finally {\r\n      try {\r\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\r\n      } finally {\r\n        if (_d) throw _e;\r\n      }\r\n    }\r\n\r\n    return _arr;\r\n  }\r\n\r\n  return function (arr, i) {\r\n    if (Array.isArray(arr)) {\r\n      return arr;\r\n    } else if (Symbol.iterator in Object(arr)) {\r\n      return sliceIterator(arr, i);\r\n    } else {\r\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\r\n    }\r\n  };\r\n}();\r\n\r\nvar helpers = Chart__default.helpers;\r\n\r\n/**\r\n * Controller for the radialGauge chart type\r\n */\r\n\r\nChart__default.defaults._set('radialGauge', {\r\n  animation: {\r\n    // Boolean - Whether we animate the rotation of the radialGauge\r\n    animateRotate: true,\r\n    // Boolean - Whether we animate scaling the radialGauge from the centre\r\n    animateScale: true\r\n  },\r\n\r\n  // The percentage of the chart that is the center area\r\n  centerPercentage: 80,\r\n\r\n  // The rotation for the start of the metric's arc\r\n  rotation: -Math.PI / 2,\r\n\r\n  // the color of the radial gauge's track\r\n  trackColor: 'rgb(204, 221, 238)',\r\n\r\n  // whether arc for the gauge should have rounded corners\r\n  roundedCorners: true,\r\n\r\n  // center value options\r\n  centerArea: {\r\n    // whether to display the center text value\r\n    displayText: true,\r\n    // font for the center text\r\n    fontFamily: null,\r\n    // color of the center text\r\n    fontColor: null,\r\n    // the size of the center text\r\n    fontSize: null,\r\n    // padding around the center area\r\n    padding: 4,\r\n    // an image to use for the center background\r\n    backgroundImage: null,\r\n    // a color to use for the center background\r\n    backgroundColor: null,\r\n    // the text to display in the center\r\n    // this could be a string or a callback that returns a string\r\n    // if a callback is provided it will be called with (value, options)\r\n    text: null\r\n  },\r\n\r\n  hover: {\r\n    mode: 'single'\r\n  },\r\n\r\n  legend: {\r\n    display: false\r\n  },\r\n\r\n  // the domain of the metric\r\n  domain: [0, 100],\r\n\r\n  tooltips: {\r\n    callbacks: {\r\n      title: function title() {\r\n        return '';\r\n      },\r\n      label: function label(tooltipItem, data) {\r\n        var dataLabel = data.labels[tooltipItem.index];\r\n        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n\r\n        dataLabel += value;\r\n\r\n        return dataLabel;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n// eslint-disable-next-line no-shadow\r\nvar RadialGaugeController = (function (Chart$$1) {\r\n  Chart$$1.controllers.radialGauge = Chart$$1.DatasetController.extend({\r\n    dataElementType: Chart$$1.elements.RoundedArc,\r\n\r\n    linkScales: helpers.noop,\r\n\r\n    draw: function draw() {\r\n      this.drawTrack();\r\n\r\n      this.drawCenterArea();\r\n\r\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n\r\n      Chart$$1.DatasetController.prototype.draw.apply(this, args);\r\n    },\r\n    drawTrack: function drawTrack() {\r\n      new Chart$$1.elements.Arc({\r\n        _view: {\r\n          backgroundColor: this.chart.options.trackColor,\r\n          borderColor: this.chart.options.trackColor,\r\n          startAngle: 0,\r\n          endAngle: Math.PI * 2,\r\n          x: this.centerX,\r\n          y: this.centerY,\r\n          innerRadius: this.innerRadius,\r\n          outerRadius: this.outerRadius,\r\n          borderWidth: this.borderWidth\r\n        },\r\n        _chart: this.chart\r\n      }).draw();\r\n    },\r\n    drawCenterArea: function drawCenterArea() {\r\n      var ctx = this.chart.ctx;\r\n      var drawInfo = {\r\n        ctx: ctx,\r\n        value: Math.ceil(this.getMeta().data[0]._view.value),\r\n        radius: this.innerRadius,\r\n        options: this.chart.options.centerArea\r\n      };\r\n\r\n      ctx.save();\r\n\r\n      try {\r\n        ctx.translate(this.centerX, this.centerY);\r\n        if (drawInfo.options.draw) {\r\n          drawInfo.options.draw(drawInfo);\r\n          return;\r\n        }\r\n\r\n        if (drawInfo.options.backgroundColor) {\r\n          this.drawCenterBackground(drawInfo);\r\n        }\r\n\r\n        if (drawInfo.options.backgroundImage) {\r\n          this.drawCenterImage(drawInfo);\r\n        }\r\n\r\n        if (drawInfo.options.displayText) {\r\n          this.drawCenterText(drawInfo);\r\n        }\r\n      } finally {\r\n        ctx.restore();\r\n      }\r\n    },\r\n    drawCenterBackground: function drawCenterBackground(_ref) {\r\n      var options = _ref.options,\r\n          radius = _ref.radius,\r\n          ctx = _ref.ctx;\r\n\r\n      var bgRadius = radius - options.padding;\r\n      ctx.beginPath();\r\n      ctx.arc(0, 0, bgRadius, 0, Math.PI * 2);\r\n      ctx.closePath();\r\n      ctx.fillStyle = options.backgroundColor;\r\n      ctx.fill();\r\n    },\r\n    drawCenterImage: function drawCenterImage(_ref2) {\r\n      var radius = _ref2.radius,\r\n          options = _ref2.options,\r\n          ctx = _ref2.ctx;\r\n\r\n      var imageRadius = radius - options.padding;\r\n      ctx.beginPath();\r\n      ctx.arc(0, 0, imageRadius, 0, Math.PI * 2, true);\r\n      ctx.closePath();\r\n      ctx.clip();\r\n      ctx.drawImage(options.backgroundImage, -imageRadius, -imageRadius, 2 * imageRadius, 2 * imageRadius);\r\n    },\r\n    drawCenterText: function drawCenterText(_ref3) {\r\n      var options = _ref3.options,\r\n          value = _ref3.value;\r\n\r\n      var fontSize = options.fontSize || (this.innerRadius / 50).toFixed(2) + 'em';\r\n      if (typeof fontSize === 'number') {\r\n        fontSize = fontSize + 'px';\r\n      }\r\n\r\n      var fontFamily = options.fontFamily || Chart$$1.defaults.global.defaultFontFamily;\r\n      var color = options.fontColor || Chart$$1.defaults.global.defaultFontColor;\r\n\r\n      var text = typeof options.text === 'function' ? options.text(value, options) : options.text;\r\n      text = text || '' + value;\r\n      this.chart.ctx.font = fontSize + ' ' + fontFamily;\r\n      this.chart.ctx.fillStyle = color;\r\n      this.chart.ctx.textBaseline = 'middle';\r\n      var textWidth = this.chart.ctx.measureText(text).width;\r\n      var textX = Math.round(-textWidth / 2);\r\n\r\n      // only display the text if it fits\r\n      if (textWidth < 2 * this.innerRadius * 0.8) {\r\n        this.chart.ctx.fillText(text, textX, 0);\r\n      }\r\n    },\r\n    update: function update(reset) {\r\n      var _this = this;\r\n\r\n      var chart = this.chart;\r\n      var chartArea = chart.chartArea;\r\n      var opts = chart.options;\r\n      var arcOpts = opts.elements.arc;\r\n      var availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;\r\n      var availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;\r\n      var availableSize = Math.min(availableWidth, availableHeight);\r\n\r\n      var meta = this.getMeta();\r\n      var centerPercentage = opts.centerPercentage;\r\n\r\n      this.borderWidth = this.getMaxBorderWidth(meta.data);\r\n      this.outerRadius = Math.max((availableSize - this.borderWidth) / 2, 0);\r\n      this.innerRadius = Math.max(centerPercentage ? this.outerRadius / 100 * centerPercentage : 0, 0);\r\n\r\n      meta.total = this.getMetricValue();\r\n      this.centerX = (chartArea.left + chartArea.right) / 2;\r\n      this.centerY = (chartArea.top + chartArea.bottom) / 2;\r\n\r\n      helpers.each(meta.data, function (arc, index) {\r\n        _this.updateElement(arc, index, reset);\r\n      });\r\n    },\r\n    updateElement: function updateElement(arc, index, reset) {\r\n      var chart = this.chart;\r\n      var chartArea = chart.chartArea;\r\n      var opts = chart.options;\r\n      var animationOpts = opts.animation;\r\n      var centerX = (chartArea.left + chartArea.right) / 2;\r\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\r\n      var startAngle = opts.rotation; // non reset case handled later\r\n      var dataset = this.getDataset();\r\n      var arcAngle = reset && animationOpts.animateRotate ? 0 : this.calculateArcAngle(dataset.data[index]);\r\n      var value = reset && animationOpts.animateScale ? 0 : this.getMetricValue();\r\n      var endAngle = startAngle + arcAngle;\r\n      var innerRadius = this.innerRadius;\r\n      var outerRadius = this.outerRadius;\r\n      var valueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\r\n\r\n      helpers.extend(arc, {\r\n        // Utility\r\n        _datasetIndex: this.index,\r\n        _index: index,\r\n\r\n        // Desired view properties\r\n        _model: {\r\n          x: centerX,\r\n          y: centerY,\r\n          startAngle: startAngle,\r\n          endAngle: endAngle,\r\n          outerRadius: outerRadius,\r\n          innerRadius: innerRadius,\r\n          label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index]),\r\n          roundedCorners: opts.roundedCorners,\r\n          value: value\r\n        }\r\n      });\r\n\r\n      var model = arc._model;\r\n\r\n      // Resets the visual styles\r\n      var custom = arc.custom || {};\r\n      var valueOrDefault = helpers.valueAtIndexOrDefault;\r\n      var elementOpts = this.chart.options.elements.arc;\r\n      model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);\r\n      model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);\r\n      model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);\r\n\r\n      arc.pivot();\r\n    },\r\n    getMetricValue: function getMetricValue() {\r\n      var value = this.getDataset().data[0];\r\n      if (value == null) {\r\n        value = this.chart.options.domain[0];\r\n      }\r\n\r\n      return value;\r\n    },\r\n    getDomain: function getDomain() {\r\n      return this.chart.options.domain;\r\n    },\r\n    calculateArcAngle: function calculateArcAngle() {\r\n      var _getDomain = this.getDomain(),\r\n          _getDomain2 = slicedToArray(_getDomain, 2),\r\n          domainStart = _getDomain2[0],\r\n          domainEnd = _getDomain2[1];\r\n\r\n      var value = this.getMetricValue();\r\n      var domainSize = domainEnd - domainStart;\r\n\r\n      return domainSize > 0 ? Math.PI * 2.0 * (Math.abs(value - domainStart) / domainSize) : 0;\r\n    },\r\n\r\n\r\n    // gets the max border or hover width to properly scale pie charts\r\n    getMaxBorderWidth: function getMaxBorderWidth(arcs) {\r\n      var max = 0;\r\n      var index = this.index;\r\n      var length = arcs.length;\r\n      var borderWidth = void 0;\r\n      var hoverWidth = void 0;\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        borderWidth = arcs[i]._model ? arcs[i]._model.borderWidth : 0;\r\n        hoverWidth = arcs[i]._chart ? arcs[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\r\n\r\n        max = borderWidth > max ? borderWidth : max;\r\n        max = hoverWidth > max ? hoverWidth : max;\r\n      }\r\n      return max;\r\n    }\r\n  });\r\n});\r\n\r\nvar RadialGaugeChart = (function (Chart$$1) {\r\n  Chart$$1.RadialGauge = function (context, config) {\r\n    config.type = 'radialGauge';\r\n\r\n    return new Chart$$1(context, config);\r\n  };\r\n});\r\n\r\nRadialGaugeController(Chart__default);\r\nRadialGaugeChart(Chart__default);\r\n\r\nmodule.exports = RadialGaugeChart;\r\n","/**\r\n * [chartjs-plugin-labels]{@link https://github.com/emn178/chartjs-plugin-labels}\r\n *\r\n * @version 1.1.0\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2017-2018\r\n * @license MIT\r\n */\r\n(function () {\r\n  'use strict';\r\n\r\n  if (typeof Chart === 'undefined') {\r\n    console.error('Can not find Chart object.');\r\n    return;\r\n  }\r\n\r\n  if (typeof Object.assign != 'function') {\r\n    Object.assign = function (target, varArgs) {\r\n      if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n      }\r\n      var to = Object(target);\r\n      for (var index = 1; index < arguments.length; index++) {\r\n        var nextSource = arguments[index];\r\n        if (nextSource != null) {\r\n          for (var nextKey in nextSource) {\r\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n              to[nextKey] = nextSource[nextKey];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return to;\r\n    };\r\n  }\r\n\r\n  var SUPPORTED_TYPES = {};\r\n  ['pie', 'doughnut', 'polarArea', 'bar'].forEach(function (t) {\r\n    SUPPORTED_TYPES[t] = true;\r\n  });\r\n\r\n  function Label() {\r\n    this.renderToDataset = this.renderToDataset.bind(this);\r\n  }\r\n\r\n  Label.prototype.setup = function (chart, options) {\r\n    this.chart = chart;\r\n    this.ctx = chart.ctx;\r\n    this.args = {};\r\n    this.barTotal = {};\r\n    var chartOptions = chart.config.options;\r\n    this.options = Object.assign({\r\n      position: 'default',\r\n      precision: 0,\r\n      fontSize: chartOptions.defaultFontSize,\r\n      fontColor: chartOptions.defaultFontColor,\r\n      fontStyle: chartOptions.defaultFontStyle,\r\n      fontFamily: chartOptions.defaultFontFamily,\r\n      shadowOffsetX: 3,\r\n      shadowOffsetY: 3,\r\n      shadowColor: 'rgba(0,0,0,0.3)',\r\n      shadowBlur: 6,\r\n      images: [],\r\n      outsidePadding: 2,\r\n      textMargin: 2,\r\n      overlap: true\r\n    }, options);\r\n    if (chart.config.type === 'bar') {\r\n      this.options.position = 'default';\r\n      this.options.arc = false;\r\n      this.options.overlap = true;\r\n    }\r\n  };\r\n\r\n  Label.prototype.render = function () {\r\n    this.labelBounds = [];\r\n    this.chart.data.datasets.forEach(this.renderToDataset);\r\n  };\r\n\r\n  Label.prototype.renderToDataset = function (dataset, index) {\r\n    this.totalPercentage = 0;\r\n    this.total = null;\r\n    var arg = this.args[index];\r\n    arg.meta.data.forEach(function (element, index) {\r\n      this.renderToElement(dataset, arg, element, index);\r\n    }.bind(this));\r\n  };\r\n\r\n  Label.prototype.renderToElement = function (dataset, arg, element, index) {\r\n    if (!this.shouldRenderToElement(arg.meta, element)) {\r\n      return;\r\n    }\r\n    this.percentage = null;\r\n    var label = this.getLabel(dataset, element, index);\r\n    if (!label) {\r\n      return;\r\n    }\r\n    var ctx = this.ctx;\r\n    ctx.save();\r\n    ctx.font = Chart.helpers.fontString(this.options.fontSize, this.options.fontStyle, this.options.fontFamily);\r\n    var renderInfo = this.getRenderInfo(element, label);\r\n    if (!this.drawable(element, label, renderInfo)) {\r\n      ctx.restore();\r\n      return;\r\n    }\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.getFontColor(dataset, element, index);\r\n    this.renderLabel(label, renderInfo);\r\n    ctx.restore();\r\n  };\r\n\r\n  Label.prototype.renderLabel = function (label, renderInfo) {\r\n    return this.options.arc ? this.renderArcLabel(label, renderInfo) : this.renderBaseLabel(label, renderInfo);\r\n  };\r\n\r\n  Label.prototype.renderBaseLabel = function (label, position) {\r\n    var ctx = this.ctx;\r\n    if (typeof label === 'object') {\r\n      ctx.drawImage(label, position.x - label.width / 2, position.y - label.height / 2, label.width, label.height);\r\n    } else {\r\n      ctx.save();\r\n      ctx.textBaseline = 'top';\r\n      ctx.textAlign = 'center';\r\n\r\n      if (this.options.textShadow) {\r\n        ctx.shadowOffsetX = this.options.shadowOffsetX;\r\n        ctx.shadowOffsetY = this.options.shadowOffsetY;\r\n        ctx.shadowColor = this.options.shadowColor;\r\n        ctx.shadowBlur = this.options.shadowBlur;\r\n      }\r\n\r\n      var lines = label.split('\\n');\r\n      for (var i = 0; i < lines.length; i++) {\r\n        var y = position.y - this.options.fontSize / 2 * lines.length + this.options.fontSize * i;\r\n        ctx.fillText(lines[i], position.x, y);\r\n      }\r\n      ctx.restore();\r\n    }\r\n  };\r\n\r\n  Label.prototype.renderArcLabel = function (label, renderInfo) {\r\n    var ctx = this.ctx, radius = renderInfo.radius, view = renderInfo.view;\r\n    ctx.save();\r\n    ctx.translate(view.x, view.y);\r\n    if (typeof label === 'string') {\r\n      ctx.rotate(renderInfo.startAngle);\r\n      ctx.textBaseline = 'middle';\r\n      ctx.textAlign = 'left';\r\n      var lines = label.split('\\n'), max = 0, widths = [], offset = 0;\r\n      if (this.options.position === 'border') {\r\n        offset = (lines.length - 1) * this.options.fontSize / 2;\r\n      }\r\n      for (var j = 0; j < lines.length; ++j) {\r\n        var mertrics = ctx.measureText(lines[j]);\r\n        if (mertrics.width > max) {\r\n          max = mertrics.width;\r\n        }\r\n        widths.push(mertrics.width);\r\n      }\r\n      for (var j = 0; j < lines.length; ++j) {\r\n        var line = lines[j];\r\n        var y = (lines.length - 1 - j) * -this.options.fontSize + offset;\r\n        ctx.save();\r\n        var padding = (max - widths[j]) / 2;\r\n        ctx.rotate(padding / radius);\r\n        for (var i = 0; i < line.length; i++) {\r\n          var char = line.charAt(i);\r\n          mertrics = ctx.measureText(char);\r\n          ctx.save();\r\n          ctx.translate(0, -1 * radius);\r\n          ctx.fillText(char, 0, y);\r\n          ctx.restore();\r\n          ctx.rotate(mertrics.width / radius);\r\n        }\r\n        ctx.restore();\r\n      }\r\n    } else {\r\n      ctx.rotate((view.startAngle + Math.PI / 2 + renderInfo.endAngle) / 2);\r\n      ctx.translate(0, -1 * radius);\r\n      this.renderLabel(label, { x: 0, y: 0 });\r\n    }\r\n    ctx.restore();\r\n  };\r\n\r\n  Label.prototype.shouldRenderToElement = function (meta, element) {\r\n    return !meta.hidden && !element.hidden && (\r\n      this.options.showZero ||\r\n      this.chart.config.type === 'polarArea' ? element._view.outerRadius !== 0 : element._view.circumference !== 0\r\n    );\r\n  };\r\n\r\n  Label.prototype.getLabel = function (dataset, element, index) {\r\n    var label;\r\n    if (typeof this.options.render === 'function') {\r\n      label = this.options.render({\r\n        label: this.chart.config.data.labels[index],\r\n        value: dataset.data[index],\r\n        percentage: this.getPercentage(dataset, element, index),\r\n        dataset: dataset,\r\n        index: index\r\n      });\r\n    } else {\r\n      switch (this.options.render) {\r\n        case 'value':\r\n          label = dataset.data[index];\r\n          break;\r\n        case 'label':\r\n          label = this.chart.config.data.labels[index];\r\n          break;\r\n        case 'image':\r\n          label = this.options.images[index] ? this.loadImage(this.options.images[index]) : '';\r\n          break;\r\n        case 'percentage':\r\n        default:\r\n          label = this.getPercentage(dataset, element, index) + '%';\r\n          break;\r\n      }\r\n    }\r\n    if (typeof label === 'object') {\r\n      label = this.loadImage(label);\r\n    } else if (label !== null && label !== undefined) {\r\n      label = label.toString();\r\n    }\r\n    return label;\r\n  };\r\n\r\n  Label.prototype.getFontColor = function (dataset, element, index) {\r\n    var fontColor = this.options.fontColor;\r\n    if (typeof fontColor === 'function') {\r\n      fontColor = fontColor({\r\n        label: this.chart.config.data.labels[index],\r\n        value: dataset.data[index],\r\n        percentage: this.getPercentage(dataset, element, index),\r\n        backgroundColor: dataset.backgroundColor[index],\r\n        dataset: dataset,\r\n        index: index\r\n      });\r\n    } else if (typeof fontColor !== 'string') {\r\n      fontColor = fontColor[index] || this.chart.config.options.defaultFontColor;\r\n    }\r\n    return fontColor;\r\n  };\r\n\r\n  Label.prototype.getPercentage = function (dataset, element, index) {\r\n    if (this.percentage !== null) {\r\n      return this.percentage;\r\n    }\r\n    var percentage;\r\n    if (this.chart.config.type === 'polarArea') {\r\n      if (this.total === null) {\r\n        this.total = 0;\r\n        for (var i = 0;i < dataset.data.length; ++i) {\r\n          this.total += dataset.data[i];\r\n        }\r\n      }\r\n      percentage = dataset.data[index] / this.total * 100;\r\n    } else if (this.chart.config.type === 'bar') {\r\n      if (this.barTotal[index] === undefined) {\r\n        this.barTotal[index] = 0;\r\n        for (var i = 0;i < this.chart.data.datasets.length; ++i) {\r\n          this.barTotal[index] += this.chart.data.datasets[i].data[index];\r\n        }\r\n      }\r\n      percentage = dataset.data[index] / this.barTotal[index] * 100;\r\n    } else {\r\n      percentage = element._view.circumference / this.chart.config.options.circumference * 100;\r\n    }\r\n    percentage = parseFloat(percentage.toFixed(this.options.precision));\r\n    if (!this.options.showActualPercentages) {\r\n      if (this.chart.config.type === 'bar') {\r\n        this.totalPercentage = this.barTotalPercentage[index] || 0;\r\n      }\r\n      this.totalPercentage += percentage;\r\n      if (this.totalPercentage > 100) {\r\n        percentage -= this.totalPercentage - 100;\r\n        percentage = parseFloat(percentage.toFixed(this.options.precision));\r\n      }\r\n      if (this.chart.config.type === 'bar') {\r\n        this.barTotalPercentage[index] = this.totalPercentage\r\n      }\r\n    }\r\n    this.percentage = percentage;\r\n    return percentage;\r\n  };\r\n\r\n  Label.prototype.getRenderInfo = function (element, label) {\r\n    if (this.chart.config.type === 'bar') {\r\n      return this.getBarRenderInfo(element, label);\r\n    } else {\r\n      return this.options.arc ? this.getArcRenderInfo(element, label) : this.getBaseRenderInfo(element, label);\r\n    }\r\n  };\r\n\r\n  Label.prototype.getBaseRenderInfo = function (element, label) {\r\n    if (this.options.position === 'outside' || this.options.position === 'border') {\r\n      var renderInfo, rangeFromCentre,\r\n        view = element._view,\r\n        centreAngle = view.startAngle + (view.endAngle - view.startAngle) / 2,\r\n        innerRadius = view.outerRadius / 2;\r\n      if (this.options.position === 'border') {\r\n        rangeFromCentre = (view.outerRadius - innerRadius) / 2 + innerRadius;\r\n      } else if (this.options.position === 'outside') {\r\n        rangeFromCentre = (view.outerRadius - innerRadius) + innerRadius + this.options.textMargin;\r\n      }\r\n      renderInfo = {\r\n        x: view.x + (Math.cos(centreAngle) * rangeFromCentre),\r\n        y: view.y + (Math.sin(centreAngle) * rangeFromCentre)\r\n      };\r\n      if (this.options.position === 'outside') {\r\n        var offset = this.options.textMargin + this.measureLabel(label).width / 2;\r\n        renderInfo.x += renderInfo.x < view.x ? -offset : offset;\r\n      }\r\n      return renderInfo;\r\n    } else {\r\n      return element.tooltipPosition();\r\n    }\r\n  };\r\n\r\n  Label.prototype.getArcRenderInfo = function (element, label) {\r\n    var radius, view = element._view;\r\n    if (this.options.position === 'outside') {\r\n      radius = view.outerRadius + this.options.fontSize + this.options.textMargin;\r\n    } else if (this.options.position === 'border') {\r\n      radius = (view.outerRadius / 2 + view.outerRadius) / 2;\r\n    } else {\r\n      radius = (view.innerRadius + view.outerRadius) / 2;\r\n    }\r\n    var startAngle = view.startAngle, endAngle = view.endAngle;\r\n    var totalAngle = endAngle - startAngle;\r\n    startAngle += Math.PI / 2;\r\n    endAngle += Math.PI / 2;\r\n    var mertrics = this.measureLabel(label);\r\n    startAngle += (endAngle - (mertrics.width / radius + startAngle)) / 2;\r\n    return {\r\n      radius: radius,\r\n      startAngle: startAngle,\r\n      endAngle: endAngle,\r\n      totalAngle: totalAngle,\r\n      view: view\r\n    }\r\n  };\r\n\r\n  Label.prototype.getBarRenderInfo = function (element, label) {\r\n    var renderInfo = element.tooltipPosition();\r\n    renderInfo.y -= this.measureLabel(label).height / 2 + this.options.textMargin;\r\n    return renderInfo;\r\n  };\r\n\r\n  Label.prototype.drawable = function (element, label, renderInfo) {\r\n    if (this.options.overlap) {\r\n      return true;\r\n    } else if (this.options.arc) {\r\n      return renderInfo.endAngle - renderInfo.startAngle <= renderInfo.totalAngle;\r\n    } else {\r\n      var mertrics = this.measureLabel(label),\r\n        left = renderInfo.x - mertrics.width / 2,\r\n        right = renderInfo.x + mertrics.width / 2,\r\n        top = renderInfo.y - mertrics.height / 2,\r\n        bottom = renderInfo.y + mertrics.height / 2;\r\n      if (this.options.renderInfo === 'outside') {\r\n        return this.outsideInRange(left, right, top, bottom);\r\n      } else {\r\n        return element.inRange(left, top) && element.inRange(left, bottom) &&\r\n          element.inRange(right, top) && element.inRange(right, bottom);\r\n      }\r\n    }\r\n  };\r\n\r\n  Label.prototype.outsideInRange = function (left, right, top, bottom) {\r\n    var labelBounds = this.labelBounds;\r\n    for (var i = 0;i < labelBounds.length;++i) {\r\n      var bound = labelBounds[i];\r\n      var potins = [\r\n        [left, top],\r\n        [left, bottom],\r\n        [right, top],\r\n        [right, bottom]\r\n      ];\r\n      for (var j = 0;j < potins.length;++j) {\r\n        var x = potins[j][0];\r\n        var y = potins[j][1];\r\n        if (x >= bound.left && x <= bound.right && y >= bound.top && y <= bound.bottom) {\r\n          return false;\r\n        }\r\n      }\r\n      potins = [\r\n        [bound.left, bound.top],\r\n        [bound.left, bound.bottom],\r\n        [bound.right, bound.top],\r\n        [bound.right, bound.bottom]\r\n      ];\r\n      for (var j = 0;j < potins.length;++j) {\r\n        var x = potins[j][0];\r\n        var y = potins[j][1];\r\n        if (x >= left && x <= right && y >= top && y <= bottom) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    labelBounds.push({\r\n      left: left,\r\n      right: right,\r\n      top: top,\r\n      bottom: bottom\r\n    });\r\n    return true;\r\n  };\r\n\r\n  Label.prototype.measureLabel = function (label) {\r\n    if (typeof label === 'object') {\r\n      return { width: label.width, height: label.height };\r\n    } else {\r\n      var width = 0;\r\n      var lines = label.split('\\n');\r\n      for (var i = 0; i < lines.length; ++i) {\r\n        var result = this.ctx.measureText(lines[i]);\r\n        if (result.width > width) {\r\n          width = result.width;\r\n        }\r\n      }\r\n      return { width: width, height: this.options.fontSize * lines.length };\r\n    }\r\n  };\r\n\r\n  Label.prototype.loadImage = function (obj) {\r\n    var image = new Image();\r\n    image.src = obj.src;\r\n    image.width = obj.width;\r\n    image.height = obj.height;\r\n    return image;\r\n  };\r\n\r\n  Chart.plugins.register({\r\n    id: 'labels',\r\n    beforeDatasetsUpdate: function (chart, options) {\r\n      if (!SUPPORTED_TYPES[chart.config.type]) {\r\n        return;\r\n      }\r\n      if (!Array.isArray(options)) {\r\n        options = [options];\r\n      }\r\n      var count = options.length;\r\n      if (!chart._labels || count !== chart._labels.length) {\r\n        chart._labels = options.map(function () {\r\n          return new Label();\r\n        });\r\n      }\r\n      var someOutside = false, maxPadding = 0;\r\n      for (var i = 0; i < count; ++i) {\r\n        var label = chart._labels[i];\r\n        label.setup(chart, options[i]);\r\n        if (label.options.position === 'outside') {\r\n          someOutside = true;\r\n          var padding = label.options.fontSize * 1.5 + label.options.outsidePadding;\r\n          if (padding > maxPadding) {\r\n            maxPadding = padding;\r\n          }\r\n        }\r\n      }\r\n      if (someOutside) {\r\n        chart.chartArea.top += maxPadding;\r\n        chart.chartArea.bottom -= maxPadding;\r\n      }\r\n    },\r\n    afterDatasetUpdate: function (chart, args, options) {\r\n      if (!SUPPORTED_TYPES[chart.config.type]) {\r\n        return;\r\n      }\r\n      chart._labels.forEach(function (label) {\r\n        label.args[args.index] = args;\r\n      });\r\n    },\r\n    beforeDraw: function (chart) {\r\n      if (!SUPPORTED_TYPES[chart.config.type]) {\r\n        return;\r\n      }\r\n      chart._labels.forEach(function (label) {\r\n        label.barTotalPercentage = {};\r\n      });\r\n    },\r\n    afterDatasetsDraw: function (chart) {\r\n      if (!SUPPORTED_TYPES[chart.config.type]) {\r\n        return;\r\n      }\r\n      chart._labels.forEach(function (label) {\r\n        label.render();\r\n      });\r\n    }\r\n  });\r\n})();\r\n","(function () {\r\n\tif (!window.Chart) {\r\n\t\treturn;\r\n\t}\r\n\tfunction GaugeChartHelper() {\r\n\t}\r\n\tGaugeChartHelper.prototype.setup = function(chart, config) {\r\n\t\tthis.chart = chart;\r\n\t\tthis.ctx = chart.ctx;\r\n\t\tthis.limits = config.data.datasets[0].gaugeLimits;\r\n\t\tthis.data = config.data.datasets[0].gaugeData;\r\n\t\tvar options = chart.options;\r\n\t\tthis.fontSize = options.defaultFontSize;\r\n\t\tthis.fontStyle = options.defaultFontFamily;\r\n\t\tthis.fontColor = options.defaultFontColor;\r\n\t\tthis.ctx.textBaseline = \"alphabetic\";\r\n\t\tthis.arrowAngle = 25 * Math.PI / 180;\r\n\t\tthis.arrowColor = config.options.indicatorColor || options.arrowColor;\r\n\t\tthis.showMarkers = typeof(config.options.showMarkers) === 'undefined' ? true : config.options.showMarkers;\r\n\t\tif (config.options.markerFormatFn) {\r\n\t\t\tthis.markerFormatFn = config.options.markerFormatFn;\r\n\t\t} else {\r\n\t\t\tthis.markerFormatFn = function(value) {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tGaugeChartHelper.prototype.applyGaugeConfig = function(chartConfig) {\r\n\t\tthis.calcLimits();\r\n\t\tchartConfig.data.datasets[0].data = this.doughnutData;\r\n\t\tvar ctx = this.ctx;\r\n\t\tvar labelsWidth = this.limits.map(function(label){\r\n\t\t\tvar text = this.markerFormatFn(label);\r\n\t\t\treturn ctx.measureText(text).width;\r\n\t\t}.bind(this));\r\n\t\tvar padding = Math.max.apply(this, labelsWidth) + this.chart.width / 35;\r\n\t\tvar heightRatio = this.chart.height / 50;\r\n\t\tchartConfig.options.layout.padding = {\r\n\t\t\ttop: this.fontSize + heightRatio,\r\n\t\t\tleft: padding,\r\n\t\t\tright: padding,\r\n\t\t\tbottom: heightRatio * 2\r\n\t\t};\r\n\t};\r\n\tGaugeChartHelper.prototype.calcLimits = function() {\r\n\t\tvar limits = this.limits;\r\n\t\tvar data = [];\r\n\t\tvar total = 0;\r\n\t\tfor (var i = 1, ln = limits.length; i < ln; i++) {\r\n\t\t\tvar dataValue = Math.abs(limits[i] - limits[i - 1]);\r\n\t\t\ttotal += dataValue;\r\n\t\t\tdata.push(dataValue);\r\n\t\t}\r\n\t\tthis.doughnutData = data;\r\n\t\tvar minValue = limits[0];\r\n\t\tvar maxValue = limits[limits.length - 1];\r\n\t\tthis.isRevers = minValue > maxValue;\r\n\t\tthis.minValue = this.isRevers ? maxValue : minValue;\r\n\t\tthis.totalValue = total;\r\n\t};\r\n\tGaugeChartHelper.prototype.updateGaugeDimensions = function() {\r\n\t\tvar chartArea = this.chart.chartArea;\r\n\t\tthis.gaugeRadius = this.chart.innerRadius;\r\n\t\tthis.gaugeCenterX = (chartArea.left + chartArea.right) / 2;\r\n\t\tthis.gaugeCenterY = (chartArea.top + chartArea.bottom + this.chart.outerRadius) / 2;\r\n\t\tthis.arrowLength = this.chart.radiusLength * 2;\r\n\t};\r\n\tGaugeChartHelper.prototype.getCoordOnCircle = function(r, alpha) {\r\n\t\treturn {\r\n\t\t\tx: r * Math.cos(alpha),\r\n\t\t\ty: r * Math.sin(alpha)\r\n\t\t};\r\n\t};\r\n\tGaugeChartHelper.prototype.getAngleOfValue = function(value) {\r\n\t\tvar result = 0;\r\n\t\tvar gaugeValue = value - this.minValue;\r\n\t\tif (gaugeValue <= 0) {\r\n\t\t\tresult = 0;\r\n\t\t} else if (gaugeValue >= this.totalValue) {\r\n\t\t\tresult = Math.PI;\r\n\t\t} else {\r\n\t\t\tresult = Math.PI * gaugeValue / this.totalValue;\r\n\t\t}\r\n\t\tif (this.isRevers) {\r\n\t\t\treturn Math.PI - result;\r\n\t\t} else {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t};\r\n\tGaugeChartHelper.prototype.renderLimitLabel = function(value) {\r\n\t\tvar ctx = this.ctx;\r\n\t\tvar angle = this.getAngleOfValue(value);\r\n\t\tvar coord = this.getCoordOnCircle(this.chart.outerRadius + (this.chart.radiusLength / 2), angle);\r\n\t\tvar align;\r\n\t\tvar diff = angle - (Math.PI / 2);\r\n\t\tif (diff > 0) {\r\n\t\t\talign = \"left\";\r\n\t\t} else if (diff < 0) {\r\n\t\t\talign = \"right\";\r\n\t\t} else {\r\n\t\t\talign = \"center\";\r\n\t\t}\r\n\t\tctx.textAlign = align;\r\n\t\tctx.font = this.fontSize + \"px \" + this.fontStyle;\r\n\t\tctx.fillStyle = this.fontColor;\r\n\t\tvar text = this.markerFormatFn(value);\r\n\t\tctx.fillText(text, this.gaugeCenterX - coord.x, this.gaugeCenterY - coord.y);\r\n\t};\r\n\tGaugeChartHelper.prototype.renderLimits = function() {\r\n\t\tfor (var i = 0, ln = this.limits.length; i < ln; i++) {\r\n\t\t\tthis.renderLimitLabel(this.limits[i]);\r\n\t\t}\r\n\t};\r\n\tGaugeChartHelper.prototype.renderValueLabel = function() {\r\n\t\tvar label = this.data.value.toString();\r\n\t\tvar ctx = this.ctx;\r\n\t\tctx.font = \"30px \" + this.fontStyle;\r\n\t\tvar stringWidth = ctx.measureText(label).width;\r\n\t\tvar elementWidth = 0.75 * this.gaugeRadius * 2;\r\n\t\tvar widthRatio = elementWidth / stringWidth;\r\n\t\tvar newFontSize = Math.floor(30 * widthRatio);\r\n\t\tvar fontSizeToUse = Math.min(newFontSize, this.gaugeRadius);\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.font = fontSizeToUse + \"px \" + this.fontStyle;\r\n\t\tctx.fillStyle = this.data.valueColor || this.fontColor;\r\n\t\tctx.fillText(label, this.gaugeCenterX, this.gaugeCenterY);\r\n\t};\r\n\tGaugeChartHelper.prototype.renderValueArrow = function(value) {\r\n\t\tvar angle = this.getAngleOfValue(typeof value === \"number\" ? value : this.data.value);\r\n\t\tthis.ctx.globalCompositeOperation = \"source-over\";\r\n\t\tthis.renderArrow(this.gaugeRadius, angle, this.arrowLength, this.arrowAngle, this.arrowColor);\r\n\t};\r\n\tGaugeChartHelper.prototype.renderSmallValueArrow = function(value) {\r\n\t\tvar angle = this.getAngleOfValue(value);\r\n\t\tthis.ctx.globalCompositeOperation = \"source-over\";\r\n\t\tthis.renderArrow(this.gaugeRadius - 1, angle, this.arrowLength - 1, this.arrowAngle, this.arrowColor);\r\n\t};\r\n\tGaugeChartHelper.prototype.clearValueArrow = function(value) {\r\n\t\tvar angle = this.getAngleOfValue(value);\r\n\t\tthis.ctx.lineWidth = 2;\r\n\t\tthis.ctx.globalCompositeOperation = \"destination-out\";\r\n\t\tthis.renderArrow(this.gaugeRadius - 1, angle, this.arrowLength + 1, this.arrowAngle, \"#FFFFFF\");\r\n\t\tthis.ctx.stroke();\r\n\t};\r\n\tGaugeChartHelper.prototype.renderArrow = function(radius, angle, arrowLength, arrowAngle, arrowColor) {\r\n\t\tvar coord = this.getCoordOnCircle(radius, angle);\r\n\t\tvar arrowPoint = {\r\n\t\t\tx: this.gaugeCenterX - coord.x,\r\n\t\t\ty: this.gaugeCenterY - coord.y\r\n\t\t};\r\n\t\tvar ctx = this.ctx;\r\n\t\tctx.fillStyle = arrowColor;\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(arrowPoint.x, arrowPoint.y);\r\n\t\tcoord = this.getCoordOnCircle(arrowLength, angle + arrowAngle);\r\n\t\tctx.lineTo(arrowPoint.x + coord.x, arrowPoint.y + coord.y);\r\n\t\tcoord = this.getCoordOnCircle(arrowLength, angle - arrowAngle);\r\n\t\tctx.lineTo(arrowPoint.x + coord.x, arrowPoint.y + coord.y);\r\n\t\tctx.closePath();\r\n\t\tctx.fill();\r\n\t};\r\n\tGaugeChartHelper.prototype.animateArrow = function() {\r\n\t\tvar stepCount = 30;\r\n\t\tvar animateTimeout = 300;\r\n\t\tvar gaugeValue = this.data.value - this.minValue;\r\n\t\tvar step = gaugeValue / stepCount;\r\n\t\tvar i = 0;\r\n\t\tvar currentValue = this.minValue;\r\n\t\tvar interval = setInterval(function() {\r\n\t\t\ti++;\r\n\t\t\tthis.clearValueArrow(currentValue);\r\n\t\t\tif (i > stepCount) {\r\n\t\t\t\tclearInterval(interval);\r\n\t\t\t\tthis.renderValueArrow();\r\n\t\t\t} else {\r\n\t\t\t\tcurrentValue += step;\r\n\t\t\t\tthis.renderSmallValueArrow(currentValue);\r\n\t\t\t}\r\n\t\t}.bind(this), animateTimeout / stepCount);\r\n\t};\r\n\tChart.defaults.tsgauge = {\r\n\t\tanimation: {\r\n\t\t\tanimateRotate: true,\r\n\t\t\tanimateScale: false\r\n\t\t},\r\n\t\tcutoutPercentage: 95,\r\n\t\trotation: Math.PI,\r\n\t\tcircumference: Math.PI,\r\n\t\tlegend: {\r\n\t\t\tdisplay: false\r\n\t\t},\r\n\t\tscales: {},\r\n\t\tarrowColor: \"#444\"\r\n\t};\r\n\tChart.controllers.tsgauge = Chart.controllers.doughnut.extend({\r\n\t\tinitialize: function(chart) {\r\n\t\t\tvar gaugeHelper = this.gaugeHelper = new GaugeChartHelper();\r\n\t\t\tgaugeHelper.setup(chart, chart.config);\r\n\t\t\tgaugeHelper.applyGaugeConfig(chart.config);\r\n\t\t\tchart.config.options.animation.onComplete = function(chartElement) {\r\n\t\t\t\tgaugeHelper.updateGaugeDimensions();\r\n\t\t\t\tgaugeHelper.animateArrow();\r\n\t\t\t};\r\n\t\t\tChart.controllers.doughnut.prototype.initialize.apply(this, arguments);\r\n\t\t},\r\n\t\tdraw: function() {\r\n\t\t\tChart.controllers.doughnut.prototype.draw.apply(this, arguments);\r\n\t\t\tvar gaugeHelper = this.gaugeHelper;\r\n\t\t\tgaugeHelper.updateGaugeDimensions();\r\n\t\t\tgaugeHelper.renderValueLabel();\r\n\t\t\tif (gaugeHelper.showMarkers) {\r\n\t\t\t\tgaugeHelper.renderLimits();\r\n\t\t\t}\r\n\t\t\tgaugeHelper.renderSmallValueArrow(gaugeHelper.minValue);\r\n\t\t}\r\n\t});\r\n})();\r\n"],"sourceRoot":"webpack:///"}