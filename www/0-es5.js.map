{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-action-sheet-controller_8.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\r\nimport './config-3c7f3790.js';\r\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\r\n\r\nconst ActionSheetController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create an action sheet overlay with action sheet options.\r\n     *\r\n     * @param options The options to use to create the action sheet.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-action-sheet', options);\r\n    }\r\n    /**\r\n     * Dismiss the open action sheet overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the action sheet.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the action sheet.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-action-sheet', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened action sheet overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-action-sheet');\r\n    }\r\n};\r\n\r\nconst AlertController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create an alert overlay with alert options.\r\n     *\r\n     * @param options The options to use to create the alert.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-alert', options);\r\n    }\r\n    /**\r\n     * Dismiss the open alert overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the alert.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the alert.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-alert', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened alert overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-alert');\r\n    }\r\n};\r\n\r\nconst Anchor = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * When using a router, it specifies the transition direction when navigating to\r\n         * another page using `href`.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = (ev) => {\r\n            openURL(this.href, ev, this.routerDirection);\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        const attrs = {\r\n            href: this.href,\r\n            rel: this.rel\r\n        };\r\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\r\n    }\r\n    static get style() { return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"; }\r\n};\r\n\r\nconst LoadingController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a loading overlay with loading options.\r\n     *\r\n     * @param options The options to use to create the loading.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-loading', options);\r\n    }\r\n    /**\r\n     * Dismiss the open loading overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the loading.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the loading.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-loading', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened loading overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-loading');\r\n    }\r\n};\r\n\r\nconst ModalController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a modal overlay with modal options.\r\n     *\r\n     * @param options The options to use to create the modal.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-modal', options);\r\n    }\r\n    /**\r\n     * Dismiss the open modal overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the modal.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the modal.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-modal', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened modal overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-modal');\r\n    }\r\n};\r\n\r\nconst PickerController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a picker overlay with picker options.\r\n     *\r\n     * @param options The options to use to create the picker.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-picker', options);\r\n    }\r\n    /**\r\n     * Dismiss the open picker overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the picker.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the picker.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-picker', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened picker overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-picker');\r\n    }\r\n};\r\n\r\nconst PopoverController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a popover overlay with popover options.\r\n     *\r\n     * @param options The options to use to create the popover.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-popover', options);\r\n    }\r\n    /**\r\n     * Dismiss the open popover overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the popover.\r\n     * This can be useful in a button handler for determining which button was\r\n     * clicked to dismiss the popover.\r\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\r\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-popover', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened popover overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-popover');\r\n    }\r\n};\r\n\r\nconst ToastController = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    /**\r\n     * Create a toast overlay with toast options.\r\n     *\r\n     * @param options The options to use to create the toast.\r\n     */\r\n    create(options) {\r\n        return createOverlay('ion-toast', options);\r\n    }\r\n    /**\r\n     * Dismiss the open toast overlay.\r\n     *\r\n     * @param data Any data to emit in the dismiss events.\r\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\r\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\r\n     */\r\n    dismiss(data, role, id) {\r\n        return dismissOverlay(document, data, role, 'ion-toast', id);\r\n    }\r\n    /**\r\n     * Get the most recently opened toast overlay.\r\n     */\r\n    async getTop() {\r\n        return getOverlay(document, 'ion-toast');\r\n    }\r\n};\r\n\r\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };\r\n"],"sourceRoot":"webpack:///","file":"0-es5.js"}