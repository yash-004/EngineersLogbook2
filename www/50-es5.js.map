{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, c as createEvent, w as writeTask, d as getIonMode, h, e as getElement, H as Host } from './core-ca0488fc.js';\r\nimport { b as config } from './config-3c7f3790.js';\r\nimport { s as sanitizeDOMString } from './index-3476b023.js';\r\n\r\nconst Refresher = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.appliedStyles = false;\r\n        this.didStart = false;\r\n        this.progress = 0;\r\n        /**\r\n         * The current state which the refresher is in. The refresher's states include:\r\n         *\r\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\r\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\r\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\r\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\r\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\r\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\r\n         */\r\n        this.state = 1 /* Inactive */;\r\n        /**\r\n         * The minimum distance the user must pull down until the\r\n         * refresher will go into the `refreshing` state.\r\n         */\r\n        this.pullMin = 60;\r\n        /**\r\n         * The maximum distance of the pull until the refresher\r\n         * will automatically go into the `refreshing` state.\r\n         * Defaults to the result of `pullMin + 60`.\r\n         */\r\n        this.pullMax = this.pullMin + 60;\r\n        /**\r\n         * Time it takes to close the refresher.\r\n         */\r\n        this.closeDuration = '280ms';\r\n        /**\r\n         * Time it takes the refresher to to snap back to the `refreshing` state.\r\n         */\r\n        this.snapbackDuration = '280ms';\r\n        /**\r\n         * How much to multiply the pull speed by. To slow the pull animation down,\r\n         * pass a number less than `1`. To speed up the pull, pass a number greater\r\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\r\n         * If a negative value is passed in, the factor will be `1` instead.\r\n         *\r\n         * For example: If the value passed is `1.2` and the content is dragged by\r\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\r\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\r\n         * will be `8` pixels, less than the amount the cursor has moved.\r\n         */\r\n        this.pullFactor = 1;\r\n        /**\r\n         * If `true`, the refresher will be hidden.\r\n         */\r\n        this.disabled = false;\r\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\r\n        this.ionPull = createEvent(this, \"ionPull\", 7);\r\n        this.ionStart = createEvent(this, \"ionStart\", 7);\r\n    }\r\n    disabledChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.setDisabled(this.disabled);\r\n        }\r\n    }\r\n    async connectedCallback() {\r\n        if (this.el.getAttribute('slot') !== 'fixed') {\r\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\r\n            return;\r\n        }\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (!contentEl) {\r\n            console.error('<ion-refresher> must be used inside an <ion-content>');\r\n            return;\r\n        }\r\n        this.scrollEl = await contentEl.getScrollElement();\r\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\r\n            el: contentEl,\r\n            gestureName: 'refresher',\r\n            gesturePriority: 10,\r\n            direction: 'y',\r\n            threshold: 20,\r\n            passive: false,\r\n            canStart: () => this.canStart(),\r\n            onStart: () => this.onStart(),\r\n            onMove: ev => this.onMove(ev),\r\n            onEnd: () => this.onEnd(),\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    disconnectedCallback() {\r\n        this.scrollEl = undefined;\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Call `complete()` when your async operation has completed.\r\n     * For example, the `refreshing` state is while the app is performing\r\n     * an asynchronous operation, such as receiving more data from an\r\n     * AJAX request. Once the data has been received, you then call this\r\n     * method to signify that the refreshing has completed and to close\r\n     * the refresher. This method also changes the refresher's state from\r\n     * `refreshing` to `completing`.\r\n     */\r\n    async complete() {\r\n        this.close(32 /* Completing */, '120ms');\r\n    }\r\n    /**\r\n     * Changes the refresher's state from `refreshing` to `cancelling`.\r\n     */\r\n    async cancel() {\r\n        this.close(16 /* Cancelling */, '');\r\n    }\r\n    /**\r\n     * A number representing how far down the user has pulled.\r\n     * The number `0` represents the user hasn't pulled down at all. The\r\n     * number `1`, and anything greater than `1`, represents that the user\r\n     * has pulled far enough down that when they let go then the refresh will\r\n     * happen. If they let go and the number is less than `1`, then the\r\n     * refresh will not happen, and the content will return to it's original\r\n     * position.\r\n     */\r\n    getProgress() {\r\n        return Promise.resolve(this.progress);\r\n    }\r\n    canStart() {\r\n        if (!this.scrollEl) {\r\n            return false;\r\n        }\r\n        if (this.state !== 1 /* Inactive */) {\r\n            return false;\r\n        }\r\n        // if the scrollTop is greater than zero then it's\r\n        // not possible to pull the content down yet\r\n        if (this.scrollEl.scrollTop > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    onStart() {\r\n        this.progress = 0;\r\n        this.state = 1 /* Inactive */;\r\n    }\r\n    onMove(detail) {\r\n        if (!this.scrollEl) {\r\n            return;\r\n        }\r\n        // this method can get called like a bazillion times per second,\r\n        // so it's built to be as efficient as possible, and does its\r\n        // best to do any DOM read/writes only when absolutely necessary\r\n        // if multi-touch then get out immediately\r\n        const ev = detail.event;\r\n        if (ev.touches && ev.touches.length > 1) {\r\n            return;\r\n        }\r\n        // do nothing if it's actively refreshing\r\n        // or it's in the way of closing\r\n        // or this was never a startY\r\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\r\n            return;\r\n        }\r\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\r\n        const deltaY = detail.deltaY * pullFactor;\r\n        // don't bother if they're scrolling up\r\n        // and have not already started dragging\r\n        if (deltaY <= 0) {\r\n            // the current Y is higher than the starting Y\r\n            // so they scrolled up enough to be ignored\r\n            this.progress = 0;\r\n            this.state = 1 /* Inactive */;\r\n            if (this.appliedStyles) {\r\n                // reset the styles only if they were applied\r\n                this.setCss(0, '', false, '');\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n        if (this.state === 1 /* Inactive */) {\r\n            // this refresh is not already actively pulling down\r\n            // get the content's scrollTop\r\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\r\n            // if the scrollTop is greater than zero then it's\r\n            // not possible to pull the content down yet\r\n            if (scrollHostScrollTop > 0) {\r\n                this.progress = 0;\r\n                return;\r\n            }\r\n            // content scrolled all the way to the top, and dragging down\r\n            this.state = 2 /* Pulling */;\r\n        }\r\n        // prevent native scroll events\r\n        if (ev.cancelable) {\r\n            ev.preventDefault();\r\n        }\r\n        // the refresher is actively pulling at this point\r\n        // move the scroll element within the content element\r\n        this.setCss(deltaY, '0ms', true, '');\r\n        if (deltaY === 0) {\r\n            // don't continue if there's no delta yet\r\n            this.progress = 0;\r\n            return;\r\n        }\r\n        const pullMin = this.pullMin;\r\n        // set pull progress\r\n        this.progress = deltaY / pullMin;\r\n        // emit \"start\" if it hasn't started yet\r\n        if (!this.didStart) {\r\n            this.didStart = true;\r\n            this.ionStart.emit();\r\n        }\r\n        // emit \"pulling\" on every move\r\n        this.ionPull.emit();\r\n        // do nothing if the delta is less than the pull threshold\r\n        if (deltaY < pullMin) {\r\n            // ensure it stays in the pulling state, cuz its not ready yet\r\n            this.state = 2 /* Pulling */;\r\n            return;\r\n        }\r\n        if (deltaY > this.pullMax) {\r\n            // they pulled farther than the max, so kick off the refresh\r\n            this.beginRefresh();\r\n            return;\r\n        }\r\n        // pulled farther than the pull min!!\r\n        // it is now in the `ready` state!!\r\n        // if they let go then it'll refresh, kerpow!!\r\n        this.state = 4 /* Ready */;\r\n        return;\r\n    }\r\n    onEnd() {\r\n        // only run in a zone when absolutely necessary\r\n        if (this.state === 4 /* Ready */) {\r\n            // they pulled down far enough, so it's ready to refresh\r\n            this.beginRefresh();\r\n        }\r\n        else if (this.state === 2 /* Pulling */) {\r\n            // they were pulling down, but didn't pull down far enough\r\n            // set the content back to it's original location\r\n            // and close the refresher\r\n            // set that the refresh is actively cancelling\r\n            this.cancel();\r\n        }\r\n    }\r\n    beginRefresh() {\r\n        // assumes we're already back in a zone\r\n        // they pulled down far enough, so it's ready to refresh\r\n        this.state = 8 /* Refreshing */;\r\n        // place the content in a hangout position while it thinks\r\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\r\n        // emit \"refresh\" because it was pulled down far enough\r\n        // and they let go to begin refreshing\r\n        this.ionRefresh.emit({\r\n            complete: this.complete.bind(this)\r\n        });\r\n    }\r\n    close(state, delay) {\r\n        // create fallback timer incase something goes wrong with transitionEnd event\r\n        setTimeout(() => {\r\n            this.state = 1 /* Inactive */;\r\n            this.progress = 0;\r\n            this.didStart = false;\r\n            this.setCss(0, '0ms', false, '');\r\n        }, 600);\r\n        // reset set the styles on the scroll element\r\n        // set that the refresh is actively cancelling/completing\r\n        this.state = state;\r\n        this.setCss(0, this.closeDuration, true, delay);\r\n        // TODO: stop gesture\r\n    }\r\n    setCss(y, duration, overflowVisible, delay) {\r\n        this.appliedStyles = (y > 0);\r\n        writeTask(() => {\r\n            if (this.scrollEl) {\r\n                const style = this.scrollEl.style;\r\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\r\n                style.transitionDuration = duration;\r\n                style.transitionDelay = delay;\r\n                style.overflow = (overflowVisible ? 'hidden' : '');\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { slot: \"fixed\", class: {\r\n                [mode]: true,\r\n                // Used internally for styling\r\n                [`refresher-${mode}`]: true,\r\n                'refresher-active': this.state !== 1 /* Inactive */,\r\n                'refresher-pulling': this.state === 2 /* Pulling */,\r\n                'refresher-ready': this.state === 4 /* Ready */,\r\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\r\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\r\n                'refresher-completing': this.state === 32 /* Completing */\r\n            } }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n    static get style() { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; }\r\n};\r\n\r\nconst RefresherContent = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    componentWillLoad() {\r\n        if (this.pullingIcon === undefined) {\r\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\r\n        }\r\n        if (this.refreshingSpinner === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\r\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\r\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\r\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\r\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\r\n    }\r\n};\r\n\r\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\r\n"],"sourceRoot":"webpack:///","file":"50-es5.js"}