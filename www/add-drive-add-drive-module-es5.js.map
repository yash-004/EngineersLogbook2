{"version":3,"sources":["src/app/add-drive/add-drive.page.html","src/app/add-drive/add-drive.module.ts","src/app/add-drive/add-drive.page.scss","src/app/add-drive/add-drive.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header translucent>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Drive Details</ion-title>\\r\\n  </ion-toolbar>\\r\\n\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <ion-item *ngIf=\\\"!gettime()\\\" color=\\\"danger\\\" text-wrap>\\r\\n    <ion-label>ONLY IN CAMP DRIVES ALLOWED</ion-label>\\r\\n  </ion-item>\\r\\n  <form class=\\\"form\\\" [formGroup]=\\\"addDriveForm\\\" (submit)=\\\"addDrive(addDriveForm.value)\\\">\\r\\n\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item text-wrap>\\r\\n            <ion-label position=\\\"floating\\\">driving area</ion-label>\\r\\n            <ion-select formControlName=\\\"incamp\\\" interface=\\\"popover\\\">\\r\\n              <ion-select-option text-wrap value=true>In Camp</ion-select-option>\\r\\n              <ion-select-option text-wrap value=false *ngIf=\\\"gettime()\\\">Out of Camp</ion-select-option>\\r\\n            </ion-select>\\r\\n          </ion-item>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Date</ion-label>\\r\\n            <ion-datetime displayFormat=\\\"DD/MM/YYYY\\\" formControlName=\\\"date\\\"></ion-datetime>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validationMessages.date\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"addDriveForm.get('date').hasError(validation.type) && (addDriveForm.get('date').dirty || addDriveForm.get('date').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item >\\r\\n            <ion-label position=\\\"floating\\\">Vehicle Number</ion-label>\\r\\n            <ion-input onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"vehicleNumber\\\"></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleNumber\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"addDriveForm.get('vehicleNumber').hasError(validation.type) && (addDriveForm.get('vehicleNumber').dirty || addDriveForm.get('vehicleNumber').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Vehicle Type</ion-label>\\r\\n            <ion-select formControlName=\\\"vehicleType\\\" interface=\\\"popover\\\">\\r\\n              <ion-select-option text-wrap *ngFor=\\\"let vty of getapprovedvtypes()\\\" value={{vty}}>{{vty}}</ion-select-option>\\r\\n            </ion-select>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleType\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"addDriveForm.get('vehicleType').hasError(validation.type) && (addDriveForm.get('vehicleType').dirty || addDriveForm.get('vehicleType').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\">Vehicle Commander</ion-label>\\r\\n            <ion-select formControlName=\\\"vehicleCommander\\\" interface=\\\"popover\\\">\\r\\n              <ion-select-option *ngFor=\\\"let c of database.current.all_commanders_of_driver\\\" value={{c.email}}>{{c.name}}\\r\\n              </ion-select-option>\\r\\n            </ion-select>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validationMessages.vehicleCommander\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"addDriveForm.get('vehicleCommander').hasError(validation.type) && (addDriveForm.get('vehicleCommander').dirty || addDriveForm.get('vehicleCommander').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n\\r\\n    <ion-card>\\r\\n      <ion-card-content>\\r\\n        <ion-item lines=\\\"none\\\" no-padding>\\r\\n          <ion-icon name=\\\"pin\\\" size=\\\"large\\\" color=\\\"primary\\\"></ion-icon>\\r\\n          <ion-label> Start Drive Details </ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Location</ion-label>\\r\\n          <ion-input type=\\\"text\\\" onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"startLocation\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startLocation\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('startLocation').hasError(validation.type) && (addDriveForm.get('startLocation').dirty || addDriveForm.get('startLocation').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Odometer</ion-label>\\r\\n          <ion-input type=\\\"number\\\" inputmode=\\\"numeric\\\" formControlName=\\\"startOdometer\\\" placeholder=\\\"Input Current Odometer Reading\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startOdometer\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('startOdometer').hasError(validation.type) && (addDriveForm.get('startOdometer').dirty || addDriveForm.get('startOdometer').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Time</ion-label>\\r\\n          <ion-datetime formControlName=\\\"startTime\\\" displayFormat=\\\"HH:mm\\\"></ion-datetime>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.startTime\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('startTime').hasError(validation.type) && (addDriveForm.get('startTime').dirty || addDriveForm.get('startTime').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n      </ion-card-content>\\r\\n    </ion-card>\\r\\n\\r\\n    <ion-card *ngIf=(drive)>\\r\\n      <ion-card-content>\\r\\n        <ion-item lines=\\\"none\\\" no-padding>\\r\\n          <ion-icon name=\\\"pin\\\" size=\\\"large\\\" color=\\\"success\\\"></ion-icon>\\r\\n          <ion-label> End Drive Details </ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Location</ion-label>\\r\\n          <ion-input type=\\\"text\\\" onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"endLocation\\\" placeholder=\\\"End Location\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endLocation\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('endLocation').hasError(validation.type) && (addDriveForm.get('endLocation').dirty || addDriveForm.get('endLocation').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Odometer</ion-label>\\r\\n          <ion-input type=\\\"number\\\" inputmode=\\\"numeric\\\" formControlName=\\\"endOdometer\\\" placeholder=\\\"Input Current Odometer Reading\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endOdometer\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('endOdometer').hasError(validation.type) && (addDriveForm.get('endOdometer').dirty || addDriveForm.get('endOdometer').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">Time</ion-label>\\r\\n          <ion-datetime formControlName=\\\"endTime\\\" displayFormat=\\\"HH:mm\\\"></ion-datetime>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.endTime\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('endTime').hasError(validation.type) && (addDriveForm.get('endTime').dirty || addDriveForm.get('endTime').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label>Fuel Level</ion-label>\\r\\n          <ion-label>{{addDriveForm.get('fuelLevel').value}}%</ion-label>\\r\\n          <ion-range min='0' max='100' color=\\\"secondary\\\" step='25' snaps=\\\"true\\\" ticks=\\\"true\\\" formControlName=\\\"fuelLevel\\\">\\r\\n            <ion-label slot=\\\"start\\\">empty</ion-label>\\r\\n            <ion-label slot=\\\"end\\\">full</ion-label>\\r\\n          </ion-range>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validationMessages.fuelLevel\\\">\\r\\n            <div class=\\\"error-message\\\"\\r\\n              *ngIf=\\\"addDriveForm.get('fuelLevel').hasError(validation.type) && (addDriveForm.get('fuelLevel').dirty || addDriveForm.get('fuelLevel').touched)\\\">\\r\\n              {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label>Maintenance Drive</ion-label>\\r\\n          <ion-toggle slot=\\\"start\\\" formControlName=\\\"maintenance\\\" (ionChange)=\\\"onToggle()\\\" [checked]=\\\"isToggled\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n\\r\\n        <ion-item>\\r\\n          <ion-label floating>Comments</ion-label>\\r\\n          <ion-textarea onkeyup=\\\"this.value = this.value.toUpperCase()\\\" formControlName=\\\"driveComments\\\"></ion-textarea>\\r\\n        </ion-item>\\r\\n      </ion-card-content>\\r\\n    </ion-card>\\r\\n   <ion-card *ngIf=(showStatus)>\\r\\n      <ion-list>\\r\\n      <ion-radio-group formControlName=\\\"driveStatus\\\">\\r\\n        <ion-item>\\r\\n          <ion-label>Verified Drive</ion-label>\\r\\n          <ion-radio value='verified' formControlName='radioVerify'>Verify drive</ion-radio>\\r\\n        </ion-item>\\r\\n        <ion-item>\\r\\n          <ion-label>Reject Drive</ion-label>\\r\\n          <ion-radio value='rejected' formControlName='radioReject'>Reject Drive</ion-radio>\\r\\n        </ion-item>\\r\\n      </ion-radio-group>\\r\\n      </ion-list>\\r\\n    </ion-card>\\r\\n\\r\\n    <div class=\\\"btn-wrapper\\\">\\r\\n      <div *ngIf = showSubmit()>\\r\\n        <ion-button *ngIf = this.database.current.user.is_commander routerLink=\\\"/tabs/commander\\\">Cancel</ion-button>\\r\\n        <ion-button *ngIf = !this.database.current.user.is_commander routerLink=\\\"/tabs/summary\\\">Cancel</ion-button>\\r\\n        <ion-button *ngIf = this.database.current.user.is_commander class=\\\"submit-btn\\\" type=\\\"submit\\\" routerLink=\\\"/tabs/commander\\\" [disabled]=\\\"!addDriveForm.valid || addDriveForm.get('driveStatus').value == null \\\" style=\\\"padding-right:10px\\\">Submit\\r\\n        </ion-button>\\r\\n        <ion-button *ngIf = !this.database.current.user.is_commander class=\\\"submit-btn\\\" type=\\\"submit\\\" routerLink=\\\"/tabs/summary\\\" [disabled]=\\\"!addDriveForm.valid\\\" style=\\\"padding-right:10px\\\">\\r\\n          Submit\\r\\n        </ion-button>\\r\\n      </div>\\r\\n      <div *ngIf = !showSubmit()>\\r\\n            <ion-button *ngIf = !this.database.current.user.is_commander expand=\\\"block\\\" routerLink=\\\"/tabs/summary\\\">OK</ion-button>\\r\\n            <ion-button *ngIf = this.database.current.user.is_commander expand=\\\"block\\\" routerLink=\\\"/tabs/commander\\\">OK</ion-button>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AddDrivePage } from './add-drive.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddDrivePage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [AddDrivePage]\r\n})\r\nexport class AddDrivePageModule {}\r\n","export default \"ion-input {\\n  text-transform: uppercase;\\n  color: primary !important; }\\n\\nion-card-title {\\n  --color:--ion-color-primary-contrast-rgb; }\\n\\n.btn-wrapper {\\n  text-align: center; }\\n\\n.input[type=number] {\\n  -moz-appearance: textfield; }\\n\\n.input[type=number]::-webkit-inner-spin-button {\\n    display: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWRkLWRyaXZlL0M6XFxVc2Vyc1xcUnVpXFxBbmRyb2lkU3R1ZGlvUHJvamVjdHNcXEVuZ2luZWVyc0xvZ2Jvb2syL3NyY1xcYXBwXFxhZGQtZHJpdmVcXGFkZC1kcml2ZS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0E7RUFDRSx5QkFBeUI7RUFDekIseUJBQXdCLEVBQUE7O0FBRzFCO0VBQ0Usd0NBQVEsRUFBQTs7QUFHVjtFQUNFLGtCQUFrQixFQUFBOztBQUlwQjtFQUVFLDBCQUF5QixFQUFBOztBQUYzQjtJQUNnQyxhQUFhLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9hZGQtZHJpdmUvYWRkLWRyaXZlLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4qIHtcclxuLy8gIG9wYWNpdHk6IDEgIWltcG9ydGFudDsgIC8vIGRpc2FibGVkIGl0ZW1zIHdpbGwgbm90IGJlIGdyZXkgb3V0LlxyXG59XHJcblxyXG5pb24taW5wdXR7XHJcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICBjb2xvcjogcHJpbWFyeSFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmlvbi1jYXJkLXRpdGxle1xyXG4gIC0tY29sb3I6LS1pb24tY29sb3ItcHJpbWFyeS1jb250cmFzdC1yZ2I7XHJcbn1cclxuXHJcbi5idG4td3JhcHBlciB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcblxyXG4vLyBkbyBub3Qgc2hvdyBzcGlubmVyIGZvciBudW1iZXIgaW5wdXRzXHJcbi5pbnB1dFt0eXBlPW51bWJlcl0geyAgXHJcbiAgJjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbnsgZGlzcGxheTogbm9uZTsgfVxyXG4gIC1tb3otYXBwZWFyYW5jZTp0ZXh0ZmllbGQ7XHJcbn0iXX0= */\"","import { Component, OnInit, wtfStartTimeRange } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { NavController } from '@ionic/angular';\r\nimport { DatabaseService, Drive, VehicleTypes, Mtrac } from '../services/database.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as dayjs from 'dayjs'; // DateTime utility, See http://zetcode.com/javascript/dayjs/\r\n\r\n@Component({\r\n  selector: 'app-add-drive',\r\n  templateUrl: './add-drive.page.html',\r\n  styleUrls: ['./add-drive.page.scss'],\r\n})\r\n\r\nexport class AddDrivePage implements OnInit {\r\n\r\n  addDriveForm: FormGroup;\r\n  endDriveForm: FormGroup;\r\n  errorMessage = '';\r\n  successMessage = '';\r\n  toast: any;\r\n  today = new Date().toISOString();\r\n  drive;\r\n  updateStatus;\r\n  showStatus = true;\r\n  isToggled = false;\r\n  isDisabled;\r\n  mtrac;\r\n\r\n  validationMessages = {\r\n    date: [\r\n      { type: 'required', message: 'Date is required.' }],\r\n    vehicleNumber: [\r\n      { type: 'required', message: 'Vehicle Number is required.' },\r\n      { type: 'minlength', message: 'Vehicle number must be at least 5 characters long.' }\r\n    ],\r\n    vehicleType: [\r\n      { type: 'required', message: 'Select a type of vehicle' },\r\n    ],\r\n    vehicleCommander: [\r\n      { type: 'required', message: 'Select the Vehicle Commanders Name' },\r\n    ],\r\n    startLocation: [\r\n      { type: 'required', message: 'Enter starting location' },\r\n    ],\r\n    startOdometer: [\r\n      { type: 'required', message: 'Enter current Odometer value' },\r\n    ],\r\n    startTime: [\r\n      { type: 'required', message: 'Enter current Time' },\r\n    ],\r\n    endLocation: [\r\n      { type: 'required', message: 'Enter final location' },\r\n    ],\r\n    endOdometer: [\r\n      { type: 'required', message: 'Enter final Odometer value' },\r\n    ],\r\n    endTime: [\r\n      { type: 'required', message: 'Enter final Time' },\r\n    ],\r\n    fuelLevel: [\r\n      { type: 'required', message: 'Indicate final fuel level' },\r\n    ]\r\n  };\r\n\r\n  constructor(\r\n    private navCtrl: NavController,\r\n    private formBuilder: FormBuilder,\r\n    public toastController: ToastController,\r\n    public database: DatabaseService,\r\n    public route: ActivatedRoute\r\n  ) { }\r\n\r\n  gettime() {\r\n    var cd = new Date(); // for now\r\n    var nmtmoringstart = new Date();\r\n    nmtmoringstart.setHours(7,30,0);\r\n    var nmtmoringend = new Date();\r\n    nmtmoringend.setHours(9,30,0);\r\n    var nmtnightstart = new Date();\r\n    nmtnightstart.setHours(17,30,0);\r\n    var nmtnightend = new Date();\r\n    nmtnightend.setHours(19,30,0);\r\n    if (cd >= nmtmoringstart && cd < nmtmoringend){\r\n      return false;\r\n    }\r\n    if (cd >= nmtnightstart && cd < nmtnightend){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public getapprovedvtypes(): string[] {\r\n        var vtypes =  VehicleTypes\r\n        if (this.database.current.user.mss_certified != true) {\r\n            vtypes = vtypes.filter( vtype => vtype != 'MSS');\r\n        }\r\n        if (this.database.current.user.flb_certified != true) {\r\n            vtypes = vtypes.filter( vtype => vtype != 'FLB');\r\n        }\r\n        if (this.database.current.user.belrex_certified != true) {\r\n            vtypes = vtypes.filter( vtype => vtype != 'BELREX');\r\n        }\r\n        return vtypes\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Create form group of controls\r\n    this.addDriveForm = this.formBuilder.group({\r\n      date: new FormControl(this.today, Validators.compose([Validators.required])),\r\n      vehicleNumber: new FormControl('', Validators.compose([Validators.minLength(5), Validators.required])),\r\n      vehicleType: new FormControl('', Validators.compose([Validators.required])),\r\n      vehicleCommander: new FormControl('', Validators.compose([Validators.required])),\r\n      startLocation: new FormControl('', Validators.compose([Validators.required])),\r\n      startOdometer: new FormControl('', Validators.compose([Validators.required])),\r\n      startTime: new FormControl(this.today, Validators.compose([Validators.required])),\r\n      endLocation: new FormControl('', Validators.compose([Validators.required])),\r\n      endOdometer: new FormControl('', Validators.compose([Validators.required])),\r\n      endTime: new FormControl('', Validators.compose([Validators.required])),\r\n      maintenance: new FormControl(''),\r\n      fuelLevel: new FormControl('', Validators.compose([Validators.required])),\r\n      driveComments: new FormControl(''),\r\n      driveStatus: new FormControl(''),\r\n      radioVerify: new FormControl({ value: '', disabled: true }),\r\n      radioReject: new FormControl({ value: '', disabled: true }),\r\n      incamp: new FormControl ('')\r\n    });\r\n\r\n  //  this.updateStatus = false;\r\n  //  this.isDisabled = false;\r\n\r\n    // get the drive the user selected\r\n    this.drive = this.database.current.drive_to_edit;\r\n    if (this.drive != null) {\r\n      console.log('In add drive page: drive id:' + this.drive.id);\r\n    }\r\n    // Has gotten the info so reset drive_to_edit\r\n    this.database.current.drive_to_edit = null;\r\n\r\n    /* if user did not select any drive, ie user clicked on fab button,\r\n        check if there is an incompleted drive\r\n     */\r\n    if (this.drive == null) {\r\n      this.drive = this.database.current.drive_in_progress;\r\n    }\r\n    if (this.drive != null) {\r\n      console.log('drive status: ' + this.drive.status);\r\n      console.log('is commander: ' + this.database.current.user.is_commander);\r\n    }\r\n    if (this.drive == null) { // start a new drive\r\n      this.mtrac = this.database.current.mtrac_to_edit;\r\n      this.startDriveControls();\r\n      this.updateStatus = false;\r\n      this.isDisabled = false;\r\n      this.showStatus = false;\r\n    } else {  // retrieving an existing drive\r\n      if (this.drive.driver != this.database.current.user.email && this.database.current.user.is_admin) {\r\n        console.log('editing drive info - admin user');\r\n        this.editDriveControls();\r\n        this.updateStatus = true;\r\n        this.showStatus = true;\r\n        this.isDisabled = false;\r\n      } else if\r\n      (this.drive.status === 'pending' || this.drive.status === 'verified' || ((this.drive.status === 'in-progress' || this.drive.status === 'rejected') && this.drive.commander == this.database.current.user.email)) {\r\n        // view only\r\n        console.log('viewing a drive');\r\n        this.updateStatus = false;\r\n        this.showStatus = true;\r\n        this.isDisabled = true;\r\n        this.viewDriveControls();\r\n      } else if (this.drive.status === 'in-progress' && this.drive.driver == this.database.current.user.email) {\r\n        // driver enter details to complete drive\r\n        console.log('completing an in-progress drive - driver');\r\n        this.updateStatus = false;\r\n        this.isDisabled = false;\r\n        this.showStatus = false;\r\n        this.endDriveControls();\r\n      } else if ((this.drive.status === 'rejected' && this.drive.driver == this.database.current.user.email)) {\r\n        console.log('editing rejected drive info - driver')\r\n        // driver edit details for rejected drive\r\n        this.updateStatus = false;\r\n        this.showStatus = true;\r\n        this.isDisabled = false;\r\n        this.editDriveControls();\r\n      }\r\n    }\r\n  }\r\n\r\n  viewDriveControls()\r\n  {\r\n    this.addDriveForm.disable();\r\n //   this.isDisabled = this.addDriveForm.disabled;\r\n    console.log('form is disabled? ' + this.isDisabled);\r\n    console.log('update status? ' + this.updateStatus);\r\n    this.setStartDriveDetails();\r\n    this.setEndDriveDetails();\r\n    this.setDriveStatusControls();\r\n\r\n    // if commander and drive status is pending, add verified and reject controls\r\n    // else display ok button\r\n    if (this.drive.commander == this.database.current.user.email && this.drive.status === 'pending') {\r\n      console.log('commander need to approve/reject drive');\r\n      this.updateStatus = true;\r\n      this.addDriveForm.get('driveStatus').setValidators(Validators.required);\r\n      this.addDriveForm.get('radioVerify').enable();\r\n      this.addDriveForm.get('radioReject').enable();\r\n    }\r\n   }\r\n\r\n  startDriveControls() {\r\n    this.addDriveForm.get('date').setValue(this.today);\r\n    this.addDriveForm.get('startTime').setValue(this.today);\r\n    this.addDriveForm.get('incamp').setValue(this.mtrac.incamp);\r\n    this.addDriveForm.get('vehicleNumber').setValue(this.mtrac.vehicleNumber);\r\n    this.addDriveForm.get('vehicleCommander').setValue(this.mtrac.commander);\r\n    this.addDriveForm.get('startLocation').setValue(this.mtrac.startLocation);\r\n    // clear validators for end drive controls\r\n    this.addDriveForm.get('endLocation').clearValidators();\r\n    this.addDriveForm.get('endOdometer').clearValidators();\r\n    this.addDriveForm.get('endTime').clearValidators();\r\n    this.addDriveForm.get('fuelLevel').clearValidators();\r\n  }\r\n\r\n  endDriveControls() {\r\n    console.log('incomplete drive exist');\r\n    this.setStartDriveDetails();\r\n    // set end Time to current time\r\n    const time2 = dayjs(new Date(this.today)).format('HH:mm');\r\n    this.addDriveForm.get('endTime').setValue(time2);\r\n  }\r\n\r\n  editDriveControls() {\r\n    this.addDriveForm.reset();\r\n    this.setStartDriveDetails();\r\n    this.setEndDriveDetails();\r\n    this.setDriveStatusControls();\r\n  }\r\n\r\n  setStartDriveDetails() {\r\n    // Stage-1 details\r\n    // populate values of start drive fields\r\n    this.addDriveForm.get('date').setValue(this.drive.date);\r\n    this.addDriveForm.get('vehicleNumber').setValue(this.drive.vehicle.toUpperCase());\r\n    this.addDriveForm.get('vehicleType').setValue(this.drive.vehicle_type);\r\n    this.addDriveForm.get('vehicleCommander').setValue(this.drive.commander);\r\n    this.addDriveForm.get('startLocation').setValue(this.drive.start_location.toUpperCase());\r\n    this.addDriveForm.get('startOdometer').setValue(this.drive.start_odometer);\r\n    this.addDriveForm.get('startTime').setValue(this.drive.start_time);\r\n    this.addDriveForm.get('incamp').setValue(this.drive.incamp);\r\n    console.log('start time: ' + this.addDriveForm.value.startTime);\r\n  }\r\n\r\n  setEndDriveDetails() {\r\n    // Stage-2 details\r\n    // populate values of end drive fields\r\n    this.addDriveForm.get('endLocation').setValue(this.drive.end_location.toUpperCase());\r\n    this.addDriveForm.get('endOdometer').setValue(this.drive.end_odometer);\r\n    this.addDriveForm.get('endTime').setValue(this.drive.end_time);\r\n    console.log('end time: ' +   this.addDriveForm.value.endTime);\r\n    this.addDriveForm.get('fuelLevel').setValue(this.drive.fuel_level);\r\n    this.addDriveForm.get('driveComments').setValue(this.drive.comments.toUpperCase());\r\n    // set the maintenance toggle to check\r\n    this.isToggled = this.drive.is_maintenance;\r\n  }\r\n\r\n  setDriveStatusControls() {\r\n    if (this.showStatus) {\r\n      this.addDriveForm.get('driveStatus').setValue(this.drive.status);\r\n      console.log(this.addDriveForm.get('driveStatus').value);\r\n    }\r\n  }\r\n\r\n  async endDrive(value) {\r\n    // added this check as end drive details can be saved despite missing info.\r\n    // check if all mandatory fields are entered\r\n    if (!this.addDriveForm.valid) {\r\n      this.errorMessage = 'Drive cannot be updated... missing end drive information.';\r\n      this.showToast(this.errorMessage);\r\n      console.log(this.errorMessage);\r\n      return;\r\n    }\r\n    if (this.drive.commander != this.database.current.user.email)\r\n    {try {\r\n      const currentDrive = this.database.current.drive_history[0];\r\n\r\n      // Stage 1 details : the user may made some changes to these info\r\n      currentDrive.vehicle = this.addDriveForm.value.vehicleNumber.toUpperCase();\r\n      currentDrive.vehicle_type = this.addDriveForm.value.vehicleType;\r\n      currentDrive.commander =  this.addDriveForm.value.vehicleCommander;\r\n      currentDrive.date = (this.addDriveForm.value.date).split('T')[0];\r\n      currentDrive.start_location = this.addDriveForm.value.startLocation.toUpperCase();\r\n      currentDrive.start_odometer = parseInt(this.addDriveForm.value.startOdometer);\r\n      currentDrive.start_time = this.addDriveForm.value.startTime;\r\n      currentDrive.fleet = this.database.current.user.fleet;\r\n      currentDrive.company = this.database.current.user.company;\r\n      currentDrive.incamp = this.addDriveForm.value.incamp;\r\n      // Stage 2 details\r\n      currentDrive.end_location = this.addDriveForm.value.endLocation;\r\n      currentDrive.end_odometer = parseInt(this.addDriveForm.value.endOdometer);\r\n     // const time2 = dayjs(new Date(this.addDriveForm.value.endTime)).format('HH:mm');\r\n      currentDrive.end_time = this.addDriveForm.value.endTime;\r\n      // store the maintenance toggle checked value in the drive document\r\n      currentDrive.is_maintenance = this.isToggled;\r\n      currentDrive.fuel_level = parseInt(this.addDriveForm.value.fuelLevel);\r\n      console.log('Fuel level (UI): ' + currentDrive.fuel_level);\r\n\r\n      currentDrive.comments = this.addDriveForm.value.driveComments;\r\n      currentDrive.status = 'pending';\r\n      await this.database.write('drive', currentDrive.id, currentDrive);\r\n      this.errorMessage = '';\r\n      this.successMessage = 'Your drive has been updated.';\r\n      this.showToast(this.successMessage);\r\n    } catch (err) {\r\n      console.log(err);\r\n      this.errorMessage = 'Update drive error: ${err}';\r\n      this.successMessage = '';\r\n\r\n      this.showToast(this.errorMessage);\r\n    }}\r\n  }\r\n\r\n  async addDrive(value) {\r\n    console.log('is Commander: ' + this.database.current.user.is_commander);\r\n    if (this.drive.commander == this.database.current.user.email) {\r\n      // commander has verified/rejected drive, update drive status.\r\n      this.drive.status = this.addDriveForm.get('driveStatus').value;\r\n      console.log('Drive status: ' + this.drive.status);\r\n      // update status in database\r\n      await this.database.write('drive', this.drive.id, this.drive);\r\n      this.errorMessage = '';\r\n      this.successMessage = 'The drive status has been updated successfully.';\r\n      this.showToast(this.successMessage);\r\n\r\n    } else if (this.database.current.drive_in_progress != null || this.drive != null) {\r\n      // the submit is to complete the drive information\r\n      console.log('Updating start and end drive details...');\r\n      this.endDrive(value);\r\n    } else { // the submit is to capture start drive information\r\n      try {\r\n        this.mtrac = this.database.current.mtrac_to_edit;\r\n        const time = dayjs(new Date(this.addDriveForm.value.startTime)).format('HH:mm');\r\n        var new_drive: Drive = {\r\n          created: this.database.getTimeStamp(),\r\n          driver: this.database.current.user.email,\r\n          status: \"in-progress\",\r\n\r\n          // Stage-1 details\r\n          vehicle: this.addDriveForm.value.vehicleNumber.toUpperCase(),\r\n          vehicle_type: this.addDriveForm.value.vehicleType,\r\n          commander: this.addDriveForm.value.vehicleCommander,\r\n          date: (this.addDriveForm.value.date).split('T')[0],\r\n          start_location: this.addDriveForm.value.startLocation.toUpperCase(),\r\n          start_odometer: parseInt(this.addDriveForm.value.startOdometer),\r\n          start_time: time,\r\n          fleet: this.database.current.user.fleet,\r\n          company: this.database.current.user.company,\r\n          incamp: this.addDriveForm.value.incamp,\r\n\r\n        };\r\n        console.log('new_drive=${JSON.stringify(new_drive)}');\r\n        await this.database.write('drive', this.mtrac.id, new_drive);\r\n        this.mtrac.status = \"completed\";\r\n        await this.database.write('mtrac', this.mtrac.id, this.mtrac);\r\n\r\n        this.errorMessage = '';\r\n        this.successMessage = 'Your drive has been added.';\r\n\r\n        this.showToast(this.successMessage);\r\n\r\n      } catch (err) {\r\n\r\n        this.errorMessage = `Add drive error: ${err}`;\r\n        this.successMessage = '';\r\n        console.log(this.errorMessage);\r\n        console.log(this.addDriveForm.value.startLocation);\r\n        this.showToast(this.errorMessage);\r\n        //this.navCtrl.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  showToast(msg) {\r\n    this.toastController.create({\r\n      message: msg,\r\n      duration: 2000,\r\n      //  showCloseButton: true,\r\n      //  closeButtonText: 'OK',\r\n      position: 'middle'\r\n    }).then((obj) => {\r\n      obj.present();\r\n    });\r\n  }\r\n\r\n  onCancel() {\r\n    this.navCtrl.pop();\r\n  }\r\n\r\n  onToggle() {\r\n    //console.log(\"initial state - toggled: \" + this.isToggled);\r\n    if (this.isToggled) { this.isToggled = false; } else { this.isToggled = true; }\r\n    //console.log(\"final state - toggled: \" + this.isToggled);\r\n  }\r\n\r\n  showSubmit() {\r\n    if (this.updateStatus || !this.isDisabled) { return true; }\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"add-drive-add-drive-module-es5.js"}