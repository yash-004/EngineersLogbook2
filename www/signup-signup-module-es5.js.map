{"version":3,"sources":["src/app/signup/signup.page.html","src/app/signup/signup.module.ts","src/app/signup/signup.page.scss","src/app/signup/signup.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Signup</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content no-padding>\\r\\n\\r\\n  <form class=\\\"form\\\" [formGroup]=\\\"validationsForm\\\"  (ngSubmit)=\\\"tryRegister(validationsForm.value)\\\">\\r\\n    \\r\\n    <!-- Name ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label position=\\\"floating\\\">Name</ion-label>\\r\\n      <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('name').hasError(validation.type) && (validationsForm.get('name').dirty || validationsForm.get('name').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n\\r\\n    <!-- Email ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label  position=\\\"floating\\\">Email</ion-label>\\r\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('email').hasError(validation.type) && (validationsForm.get('email').dirty || validationsForm.get('email').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n    <!-- Unit ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label position=\\\"floating\\\">Unit</ion-label>\\r\\n      <ion-input type=\\\"text\\\" formControlName=\\\"unit\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.unit\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('unit').hasError(validation.type) && (validationsForm.get('unit').dirty || validationsForm.get('unit').touched)\\\">\\r\\n          {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n    <!-- Company/Platoon ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label position=\\\"floating\\\">Company</ion-label>\\r\\n      <ion-input type=\\\"text\\\" formControlName=\\\"company\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.company\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('company').hasError(validation.type) && (validationsForm.get('company').dirty || validationsForm.get('company').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n    \\r\\n    <!-- Password ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label  position=\\\"floating\\\">Password</ion-label>\\r\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.password\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('password').hasError(validation.type) && (validationsForm.get('password').dirty || validationsForm.get('password').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n       \\r\\n    <ion-item no-padding>\\r\\n      <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\r\\n      <ion-input type=\\\"password\\\" formControlName=\\\"confirmPassword\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.confirmPassword\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('confirmPassword').hasError(validation.type) && (validationsForm.get('confirmPassword').dirty || validationsForm.get('confirmPassword').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n\\r\\n    <!-- Licence ------------------->\\r\\n    \\r\\n    <ion-item no-padding>\\r\\n      <ion-label position=\\\"floating\\\">License Number</ion-label>\\r\\n      <ion-input type=\\\"text\\\" formControlName=\\\"licenseNum\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <div class=\\\"validation-errors\\\">\\r\\n      <ng-container *ngFor=\\\"let validation of validationMessages.licenseNum\\\">\\r\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validationsForm.get('licenseNum').hasError(validation.type) && (validationsForm.get('licenseNum').dirty || validationsForm.get('licenseNum').touched)\\\">\\r\\n        {{ validation.message }}\\r\\n        </div>\\r\\n      </ng-container>\\r\\n    </div>\\r\\n    \\r\\n    <ion-item no-padding>\\r\\n      <ion-label floating >License Type</ion-label>\\r\\n      <ion-select formControlName=\\\"licenseType\\\">\\r\\n        <ion-select-option value=\\\"A\\\">A</ion-select-option>\\r\\n        <ion-select-option value=\\\"B\\\">B</ion-select-option>\\r\\n        <ion-select-option value=\\\"C\\\">C</ion-select-option>\\r\\n        <ion-select-option value=\\\"D\\\">D</ion-select-option>\\r\\n      </ion-select>\\r\\n    </ion-item>\\r\\n\\r\\n    <!-- Commander or Driver ------------------->\\r\\n\\r\\n    <ion-item no-padding>\\r\\n      <ion-label floating >Commander or Driver?</ion-label>\\r\\n      <ion-select formControlName=\\\"isCommander\\\">\\r\\n        <ion-select-option value=\\\"true\\\">Commander</ion-select-option>\\r\\n        <ion-select-option value=\\\"false\\\">Driver</ion-select-option>\\r\\n      </ion-select>\\r\\n    </ion-item>\\r\\n        \\r\\n    <!-- Submit Button ------------------->  \\r\\n    <BR><BR>\\r\\n    <ion-button expand=\\\"block\\\" class=\\\"submit-btn\\\" type=\\\"submit\\\"  [disabled]=\\\"!validationsForm.valid\\\">Sign up</ion-button>\\r\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\r\\n    <label class=\\\"success-message\\\">{{successMessage}}</label>\\r\\n\\r\\n    <!-- <ion-button expand=\\\"block\\\" routerLink=\\\"/tabs\\\" fill=\\\"outline\\\">Sign up</ion-button>  --> \\r\\n\\r\\n    <!-- Cancel Button ------------------->\\r\\n    <ion-button expand=\\\"block\\\" routerLink=\\\"/\\\" fill=\\\"outline\\\">Cancel</ion-button>\\r\\n\\r\\n  </form>\\r\\n\\r\\n</ion-content>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { SignupPage } from './signup.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SignupPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [SignupPage]\r\n})\r\nexport class SignupPageModule {}\r\n","export default \"ion-content {\\n  --padding-start: 10%;\\n  --padding-end: 10%;\\n  --padding-top: 5px; }\\n  ion-content .error-message {\\n    color: red;\\n    font-size: 0.8em; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2lnbnVwL0M6XFxVc2Vyc1xcUnVpXFxBbmRyb2lkU3R1ZGlvUHJvamVjdHNcXEVuZ2luZWVyc0xvZ2Jvb2syL3NyY1xcYXBwXFxzaWdudXBcXHNpZ251cC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxvQkFBZ0I7RUFDaEIsa0JBQWM7RUFDZCxrQkFBYyxFQUFBO0VBSmhCO0lBT0ksVUFBVTtJQUNWLGdCQUFnQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvc2lnbnVwL3NpZ251cC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY29udGVudCB7XHJcblxyXG4gIC0tcGFkZGluZy1zdGFydDogMTAlO1xyXG4gIC0tcGFkZGluZy1lbmQ6IDEwJTtcclxuICAtLXBhZGRpbmctdG9wOiA1cHg7XHJcblxyXG4gIC5lcnJvci1tZXNzYWdlIHtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgICBmb250LXNpemU6IDAuOGVtO1xyXG4gIH1cclxufVxyXG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { NavController } from '@ionic/angular';\r\nimport { DatabaseService, User } from '../services/database.service';\r\nimport { ToastController } from '@ionic/angular';\r\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.page.html',\r\n  styleUrls: ['./signup.page.scss'],\r\n})\r\nexport class SignupPage implements OnInit {\r\n\r\n  validationsForm: FormGroup;\r\n  errorMessage = '';\r\n  successMessage = '';\r\n  toast: any;\r\n\r\n  validationMessages = {\r\n   name: [\r\n     { type: 'required', message: 'Name is required.' }],\r\n   email: [\r\n     { type: 'required', message: 'Email is required.' },\r\n     { type: 'pattern', message: 'Enter a valid email.' }\r\n   ],\r\n   unit: [\r\n     { type: 'required', message: 'Unit is required 30SCE or TPT.' },\r\n     { type: 'minlength', message: 'Unit must be at least 3 characters long.' }\r\n   ],\r\n   company: [\r\n     { type: 'required', message: 'Company is required A/B/C/ME or West.' },\r\n     { type: 'maxlength', message: 'Company must be less than 5 characters long. Alpha-A Bravo-B Charlie-C' }\r\n   ],\r\n   password: [\r\n     { type: 'required', message: 'Password is required.' },\r\n     { type: 'minlength', message: 'Password must be at least 6 characters long.' }\r\n   ],\r\n   confirmPassword: [\r\n    { type: 'required', message: 'You need to confirm your password.' },\r\n  ],\r\n   licenseNum: [\r\n    { type: 'required', message: 'License Number is required.' },\r\n    { type: 'minlength', message: 'License Number must be at least 5 characters long.' }\r\n  ]\r\n };\r\n\r\n  constructor(\r\n    private navCtrl: NavController,\r\n    private authService: AuthenticationService,\r\n    private database: DatabaseService,\r\n    private formBuilder: FormBuilder,\r\n    public toastController: ToastController\r\n  ) {}\r\n\r\n  ngOnInit(){\r\n    this.validationsForm = this.formBuilder.group({\r\n      name: new FormControl('', Validators.compose([\r\n        Validators.required\r\n      ])),\r\n      email: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\r\n      ])),\r\n      unit: new FormControl('', Validators.compose([\r\n        Validators.minLength(3),\r\n        Validators.required\r\n      ])),\r\n      company: new FormControl('', Validators.compose([\r\n        Validators.maxLength(4),\r\n        Validators.required\r\n      ])),\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.minLength(6),\r\n        Validators.required\r\n      ])),\r\n      confirmPassword: new FormControl('', Validators.required),\r\n      licenseNum: new FormControl('', Validators.compose([\r\n        Validators.minLength(6),\r\n        Validators.required\r\n      ])),\r\n      licenseType: new FormControl('', Validators.compose([\r\n        Validators.required\r\n      ])),\r\n      isCommander: new FormControl('', Validators.compose([\r\n        Validators.required\r\n      ]))\r\n    });\r\n  }\r\n\r\n  async tryRegister(value){\r\n  \r\n    //console.log(`tryRegister: ${JSON.stringify(value)}`);\r\n    if (this.validationsForm.get('password').value !== this.validationsForm.get('confirmPassword').value) {\r\n      this.errorMessage = 'Password do not match';\r\n    }\r\n    else {\r\n      try {\r\n        const res = await this.authService.registerUser(value);\r\n        //console.log(`success: ${JSON.stringify(res)}`);\r\n        var new_user: User = {\r\n          name: value.name.toUpperCase(),\r\n          email: value.email,\r\n          fleet: value.unit.toUpperCase(),\r\n          company: value.company.toUpperCase(),\r\n          licence_num: value.licenseNum,\r\n          licence_type: value.licenseType,\r\n          created: this.database.getTimeStamp(),\r\n          mss_certified: false,\r\n          flb_certified: false,\r\n          belrex_certified: false,\r\n          m3g_certified: false,\r\n          is_driver: value.isCommander.toLowerCase() === 'false',\r\n          is_commander: value.isCommander.toLowerCase() === 'true',\r\n          location: {lat: 0, lng: 0},\r\n          admin_level: 1,\r\n        };\r\n        await this.database.write('user',res.user.email,new_user);\r\n        this.errorMessage = '';\r\n        this.successMessage = 'Your account has been created. Please log in.';\r\n        this.showToast(this.successMessage);\r\n        \r\n      } catch(err) {\r\n        console.log(err);\r\n        this.errorMessage = err.message;\r\n        this.successMessage = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  goLoginPage() {\r\n    this.navCtrl.navigateBack('');\r\n  }\r\n\r\n  showToast(msg) {\r\n    this.toastController.create({\r\n      message: msg,\r\n      duration: 2000,\r\n      showCloseButton: true,\r\n      closeButtonText: 'OK',\r\n      position: 'middle'\r\n    }).then((obj) => {\r\n      obj.present();\r\n      this.navCtrl.navigateBack('');\r\n    });\r\n  }\r\n \r\n}\r\n"],"sourceRoot":"webpack:///","file":"signup-signup-module-es5.js"}